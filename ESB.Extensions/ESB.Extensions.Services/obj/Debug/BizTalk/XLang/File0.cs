
#pragma warning disable 162

namespace ESB.Extensions.Services
{

    [System.SerializableAttribute]
    sealed public class __Microsoft_Practices_ESB_ExceptionHandling_Schemas_Faults_FaultMessage__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage _schema = new Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage();

        public __Microsoft_Practices_ESB_ExceptionHandling_Schemas_Faults_FaultMessage__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__Microsoft_Practices_ESB_ExceptionHandling_Schemas_Faults_FaultMessage__)
        },
        0,
        @"http://schemas.microsoft.biztalk.practices.esb.com/exceptionhandling#FaultEnvelope"
    )]
    [System.SerializableAttribute]
    sealed internal class FaultMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __Microsoft_Practices_ESB_ExceptionHandling_Schemas_Faults_FaultMessage__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __Microsoft_Practices_ESB_ExceptionHandling_Schemas_Faults_FaultMessage__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public FaultMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __ESB_Extensions_Schemas_Go__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static ESB.Extensions.Schemas.Go _schema = new ESB.Extensions.Schemas.Go();

        public __ESB_Extensions_Schemas_Go__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(ESB.Extensions.Schemas.Go)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__ESB_Extensions_Schemas_Go__)
        },
        0,
        @"http://ESB.Extensions.Schemas.Go#Go"
    )]
    [System.SerializableAttribute]
    sealed internal class GoMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __ESB_Extensions_Schemas_Go__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __ESB_Extensions_Schemas_Go__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public GoMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequence__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequence _schema = new ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequence();

        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequence__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequence)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequence__)
        },
        0,
        @"http://schemas.microsoft.com/Sql/2008/05/TypedProcedures/dbo#sp_MergeBatchSequence"
    )]
    [System.SerializableAttribute]
    sealed internal class MergeBatchSequenceRequestMT : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequence__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequence__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public MergeBatchSequenceRequestMT(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequenceResponse__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequenceResponse _schema = new ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequenceResponse();

        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequenceResponse__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequenceResponse)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequenceResponse__)
        },
        0,
        @"http://schemas.microsoft.com/Sql/2008/05/TypedProcedures/dbo#sp_MergeBatchSequenceResponse"
    )]
    [System.SerializableAttribute]
    sealed internal class MergeBatchSequenceResponseMT : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequenceResponse__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo1_sp_MergeBatchSequenceResponse__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public MergeBatchSequenceResponseMT(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __ESB_Extensions_Schemas_WcfSql_Notification__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static ESB.Extensions.Schemas.WcfSql.Notification _schema = new ESB.Extensions.Schemas.WcfSql.Notification();

        public __ESB_Extensions_Schemas_WcfSql_Notification__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(ESB.Extensions.Schemas.WcfSql.Notification)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__ESB_Extensions_Schemas_WcfSql_Notification__)
        },
        0,
        @"http://schemas.microsoft.com/Sql/2008/05/Notification/#Notification"
    )]
    [System.SerializableAttribute]
    sealed internal class SqlNotificationMT : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __ESB_Extensions_Schemas_WcfSql_Notification__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __ESB_Extensions_Schemas_WcfSql_Notification__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public SqlNotificationMT(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatches__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatches _schema = new ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatches();

        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatches__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatches)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatches__)
        },
        0,
        @"http://schemas.microsoft.com/Sql/2008/05/TypedProcedures/dbo#sp_GetAllCompletedBatches"
    )]
    [System.SerializableAttribute]
    sealed internal class GetAllCompletedBatchesRequestMT : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatches__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatches__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public GetAllCompletedBatchesRequestMT(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatchesResponse__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatchesResponse _schema = new ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatchesResponse();

        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatchesResponse__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatchesResponse)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatchesResponse__)
        },
        0,
        @"http://schemas.microsoft.com/Sql/2008/05/TypedProcedures/dbo#sp_GetAllCompletedBatchesResponse"
    )]
    [System.SerializableAttribute]
    sealed internal class GetAllCompletedBatchesResponseMT : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatchesResponse__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __ESB_Extensions_Schemas_EsbBatchDb_TypedProcedure_dbo_sp_GetAllCompletedBatchesResponse__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public GetAllCompletedBatchesResponseMT(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __ESB_Extensions_Schemas_GoList__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static ESB.Extensions.Schemas.GoList _schema = new ESB.Extensions.Schemas.GoList();

        public __ESB_Extensions_Schemas_GoList__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(ESB.Extensions.Schemas.GoList)
        },
        new string[]{
            "Body"
        },
        new System.Type[]{
            typeof(__ESB_Extensions_Schemas_GoList__)
        },
        0,
        @"http://ESB.Extensions.Schemas.GoList#GoList"
    )]
    [System.SerializableAttribute]
    sealed internal class GoListMT : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __ESB_Extensions_Schemas_GoList__ Body;

        private void __CreatePartWrappers()
        {
            Body = new __ESB_Extensions_Schemas_GoList__(this, "Body", 0);
            this.AddPart("Body", 0, Body);
        }

        public GoListMT(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "PostFault",
        new System.Type[]{
            typeof(ESB.Extensions.Services.FaultMsgType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class FaultProcessingType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public FaultProcessingType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public FaultProcessingType(FaultProcessingType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            FaultProcessingType p = new FaultProcessingType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo PostFault = new Microsoft.XLANGs.Core.OperationInfo
        (
            "PostFault",
            System.Web.Services.Description.OperationFlow.OneWay,
            typeof(FaultProcessingType),
            typeof(FaultMsgType),
            null,
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "PostFault" ] = PostFault;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [System.SerializableAttribute]
    sealed public class __Microsoft_XLANGs_BaseTypes_Any__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static Microsoft.XLANGs.BaseTypes.Any _schema = new Microsoft.XLANGs.BaseTypes.Any();

        public __Microsoft_XLANGs_BaseTypes_Any__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.ePublic,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eThirdKind,
        "System.Xml.XmlDocument",
        new System.Type[]{
            typeof(Microsoft.XLANGs.BaseTypes.Any)
        },
        new string[]{
            "part"
        },
        new System.Type[]{
            typeof(__Microsoft_XLANGs_BaseTypes_Any__)
        },
        0,
        Microsoft.XLANGs.Core.XMessage.AnyMessageTypeName
    )]
    [System.SerializableAttribute]
    sealed public class __messagetype_System_Xml_XmlDocument : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __Microsoft_XLANGs_BaseTypes_Any__ part;

        private void __CreatePartWrappers()
        {
            part = new __Microsoft_XLANGs_BaseTypes_Any__(this, "part", 0);
            this.AddPart("part", 0, part);
        }

        public __messagetype_System_Xml_XmlDocument(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "XmlDocument",
        new System.Type[]{
            typeof(ESB.Extensions.Services.__messagetype_System_Xml_XmlDocument)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class XmlDocumentPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public XmlDocumentPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public XmlDocumentPortType(XmlDocumentPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            XmlDocumentPortType p = new XmlDocumentPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo XmlDocument = new Microsoft.XLANGs.Core.OperationInfo
        (
            "XmlDocument",
            System.Web.Services.Description.OperationFlow.OneWay,
            typeof(XmlDocumentPortType),
            typeof(__messagetype_System_Xml_XmlDocument),
            null,
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "XmlDocument" ] = XmlDocument;
                return h;
            }
        }
        #endregion // port reflection support
    }
    [Microsoft.XLANGs.BaseTypes.CorrelationTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        new string[] {
            "ESB.Extensions.Schemas.BatchId", 
            "Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName", 
            "Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState"
        }
    )]
    sealed internal class ConvoyCT : Microsoft.XLANGs.Core.CorrelationType
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        private static Microsoft.XLANGs.BaseTypes.PropertyBase[] _properties = new Microsoft.XLANGs.BaseTypes.PropertyBase[] {
            new ESB.Extensions.Schemas.BatchId(), 
            new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName(), 
            new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState()
         };
        public override Microsoft.XLANGs.BaseTypes.PropertyBase[] Properties { get { return _properties; } }
        public static Microsoft.XLANGs.BaseTypes.PropertyBase[] PropertiesList { get { return _properties; } }
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "GoMsg",
        new System.Type[]{
            typeof(ESB.Extensions.Services.GoMsgType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class GoMsgPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public GoMsgPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public GoMsgPortType(GoMsgPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            GoMsgPortType p = new GoMsgPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo GoMsg = new Microsoft.XLANGs.Core.OperationInfo
        (
            "GoMsg",
            System.Web.Services.Description.OperationFlow.OneWay,
            typeof(GoMsgPortType),
            typeof(GoMsgType),
            null,
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "GoMsg" ] = GoMsg;
                return h;
            }
        }
        #endregion // port reflection support
    }
    [Microsoft.XLANGs.BaseTypes.CorrelationTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        new string[] {
            "BTS.OutboundTransportLocation", 
            "BTS.OutboundTransportType", 
            "Microsoft.Practices.ESB.Itinerary.Schemas.IsRequestResponse", 
            "Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName", 
            "Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState", 
            "Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType"
        }
    )]
    sealed internal class ItineraryAdvanceCT : Microsoft.XLANGs.Core.CorrelationType
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        private static Microsoft.XLANGs.BaseTypes.PropertyBase[] _properties = new Microsoft.XLANGs.BaseTypes.PropertyBase[] {
            new BTS.OutboundTransportLocation(), 
            new BTS.OutboundTransportType(), 
            new Microsoft.Practices.ESB.Itinerary.Schemas.IsRequestResponse(), 
            new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName(), 
            new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState(), 
            new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType()
         };
        public override Microsoft.XLANGs.BaseTypes.PropertyBase[] Properties { get { return _properties; } }
        public static Microsoft.XLANGs.BaseTypes.PropertyBase[] PropertiesList { get { return _properties; } }
    }
    [Microsoft.XLANGs.BaseTypes.CorrelationTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        new string[] {
            "ESB.Extensions.Schemas.BatchId"
        }
    )]
    sealed internal class BatchCT : Microsoft.XLANGs.Core.CorrelationType
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        private static Microsoft.XLANGs.BaseTypes.PropertyBase[] _properties = new Microsoft.XLANGs.BaseTypes.PropertyBase[] {
            new ESB.Extensions.Schemas.BatchId()
         };
        public override Microsoft.XLANGs.BaseTypes.PropertyBase[] Properties { get { return _properties; } }
        public static Microsoft.XLANGs.BaseTypes.PropertyBase[] PropertiesList { get { return _properties; } }
    }
    [Microsoft.XLANGs.BaseTypes.CorrelationTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        new string[] {
            "ESB.Extensions.Schemas.BatchId", 
            "ESB.Extensions.Schemas.SequenceId"
        }
    )]
    sealed internal class SequenceCT : Microsoft.XLANGs.Core.CorrelationType
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        private static Microsoft.XLANGs.BaseTypes.PropertyBase[] _properties = new Microsoft.XLANGs.BaseTypes.PropertyBase[] {
            new ESB.Extensions.Schemas.BatchId(), 
            new ESB.Extensions.Schemas.SequenceId()
         };
        public override Microsoft.XLANGs.BaseTypes.PropertyBase[] Properties { get { return _properties; } }
        public static Microsoft.XLANGs.BaseTypes.PropertyBase[] PropertiesList { get { return _properties; } }
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "MergeBatchSequence",
        new System.Type[]{
            typeof(ESB.Extensions.Services.MergeBatchSequenceRequestMT), 
            typeof(ESB.Extensions.Services.MergeBatchSequenceResponseMT)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class MergeBatchSequencePortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public MergeBatchSequencePortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public MergeBatchSequencePortType(MergeBatchSequencePortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            MergeBatchSequencePortType p = new MergeBatchSequencePortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo MergeBatchSequence = new Microsoft.XLANGs.Core.OperationInfo
        (
            "MergeBatchSequence",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(MergeBatchSequencePortType),
            typeof(MergeBatchSequenceRequestMT),
            typeof(MergeBatchSequenceResponseMT),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "MergeBatchSequence" ] = MergeBatchSequence;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "SqlNotification",
        new System.Type[]{
            typeof(ESB.Extensions.Services.SqlNotificationMT)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class SqlNotificationPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public SqlNotificationPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public SqlNotificationPortType(SqlNotificationPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            SqlNotificationPortType p = new SqlNotificationPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo SqlNotification = new Microsoft.XLANGs.Core.OperationInfo
        (
            "SqlNotification",
            System.Web.Services.Description.OperationFlow.OneWay,
            typeof(SqlNotificationPortType),
            typeof(SqlNotificationMT),
            null,
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "SqlNotification" ] = SqlNotification;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "GetAllCompletedBatches",
        new System.Type[]{
            typeof(ESB.Extensions.Services.GetAllCompletedBatchesRequestMT), 
            typeof(ESB.Extensions.Services.GetAllCompletedBatchesResponseMT)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class GetAllCompletedBatchesPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public GetAllCompletedBatchesPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public GetAllCompletedBatchesPortType(GetAllCompletedBatchesPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            GetAllCompletedBatchesPortType p = new GetAllCompletedBatchesPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo GetAllCompletedBatches = new Microsoft.XLANGs.Core.OperationInfo
        (
            "GetAllCompletedBatches",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(GetAllCompletedBatchesPortType),
            typeof(GetAllCompletedBatchesRequestMT),
            typeof(GetAllCompletedBatchesResponseMT),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "GetAllCompletedBatches" ] = GetAllCompletedBatches;
                return h;
            }
        }
        #endregion // port reflection support
    }
    //#line 728 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\ReceivePipelineService.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "DocumentProcessing", "XmlDocument", 0, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ActivationPredicateAttribute(
        0,
        new bool[] {
            true,
            false,
            false
        },
        new System.Type[] {
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType)
        },
        new Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator[] {
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual
        },
        new System.Object[] {
            "ReceivePipelineService",
            "Pending",
            "Orchestration"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "DocumentProcessing",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eLongRunning
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class ReceivePipelineService : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(ReceivePipelineService));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static ReceivePipelineService()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 3, 3),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment4), 1, 2, 4)
            };

            _Locks = 8;
            _rootContext = new __ReceivePipelineService_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[4];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public ReceivePipelineService(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "ReceivePipelineService", tracker)
        {
            ConstructorHelper();
        }

        public ReceivePipelineService(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "ReceivePipelineService")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>85c068f1-8b21-403c-9c1a-e7cfa9a1cc66</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>7f876254-e059-4783-8615-d577d596b512</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>7d8338fe-ba3a-41ae-adf2-b7c142785700</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>71800deb-62fa-4870-bbc2-7cb3b789eb17</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>150a8d0c-fd35-41b4-bb95-40180316fea2</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>5b7bf5e6-1b96-4a86-8ec7-ded99a09d7d5</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Itinerary and Resolution</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>d0f6b60d-ed64-4981-a616-ee680a439723</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>newItineraryString1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>LongRunningTransactionShape</shapeType>      <ShapeID>f414edd6-b5e9-4172-836c-780dd7d516ab</ShapeID>      <ParentLink>Scope_Transaction</ParentLink>                <shapeText>TxItinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d7a5552f-e6f2-4b4e-8936-cf79303149d8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Current Itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>0fd2e58b-3497-44aa-b325-4f38e79bd15f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Retrieve Resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>4f3e3f65-16d0-404e-b795-86b2250ab443</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolvers returned</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>175b2157-9347-4745-a877-2ddc43145622</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>bf0a0f99-f0ef-4ee6-a5ae-6bbc2fb07e43</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolve</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>7c30575c-6b5d-42fe-9ad1-85eb6d9766cd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>2nd Resolver for new itinerary?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>a8ced1b1-51e0-45b3-9440-be85d6a72568</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>be2b906a-2a39-4ec0-86ad-768574610e3a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set new resolver</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>68bb780d-bcd4-436a-837c-17ea72bd1a82</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>dfbc7a4f-51f6-419e-a712-b8a3031fd134</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ScpExecuteReceivePipeline</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>5bb91d8a-d157-4c0e-83bd-df3b087ceea4</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>outputMessages</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>702390e7-1f46-4e1d-b911-fd8c6935cd8c</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>e8597520-e084-4a74-bf0b-8e2b225e14bd</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>newItineraryString2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>8b536829-cdd7-4183-a5cd-c271ae410776</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>mergeBatchSequenceRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>AtomicTransactionShape</shapeType>      <ShapeID>5153403a-ecca-456e-8424-d70af1be4959</ShapeID>      <ParentLink>Scope_Transaction</ParentLink>                <shapeText>TxExecuteReceivePipeline</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>2660d656-8b1e-40ac-9f6a-dc482482587a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Continue Original Message?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>a94aa72f-46b2-4772-a562-e256009c2c53</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>6c97eed1-c32a-4291-a60d-c0e5075bc4d3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>StartAdvanceItinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>5993b9d5-25c9-44c3-87f4-7ec9d684f9c2</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>InboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>998510fe-c9a7-4feb-9b6f-8852b29eb37d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>5cc8c8b2-6983-4cef-8114-b08c35f9368e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Publish GoMsg based on 1st resolver?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>2a12c125-90f7-4e77-898a-47e1273d8e8e</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>89f1832e-2fef-434b-becc-4f21fdc43e2a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get go resolution</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>bec874fb-198f-46dc-9f1f-f8cf0dcd1976</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start Publish GoMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>fbdaed0c-ffa0-4fbf-8f0f-0892064ce5d3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>e93f6dba-c5b5-4d93-ba0a-1b3d134805b3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>c9309524-fe45-44f5-911d-ad25fab0af0e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Register Batch based on 1st resolver?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>be8a8799-7b36-410f-ae8a-b72264d5875c</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7947c477-46e0-4032-990f-71c666bf2eb4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get mergeBatchSequenceRequest resolution</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>b5c6e179-0261-41ca-9d69-be0afd77182c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start RegisterBatch</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>f8ea0433-bb22-4b07-a8c1-fe869d561d1b</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>mergeBatchSequenceRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>bc543b69-523d-4900-998c-76052131b826</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>f0a9e314-f9d7-41ba-b916-d792ecf24683</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Execute Receive Pipeline</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>WhileShape</shapeType>      <ShapeID>049dd6be-e43c-4c2c-bc3f-b1997a19595b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Publish Messages</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>da1bcaaf-4703-4f53-8b19-ada7bfbd194b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct OutputMessage</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>6869046a-e005-4b5a-8875-43a6005982cb</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>b85598fc-5c11-4974-be2c-179d02b4d5ae</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign OutputMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>884757c0-ee75-43f9-99f9-8501c68fe85a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolve from 2nd resolver?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6183c238-f8e5-45ab-be05-da4fa6c4f1be</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7b20e0a0-9791-4ef4-ae69-2af67fcf77d7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolve new itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ed0d4dee-6928-47ed-8b46-d95a23856693</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>c1090042-649e-4f2b-bc33-936ffd824e80</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Advance or Initialize itinerary?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>518d11d2-88d3-4a5c-b837-e7aa824286bb</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Initialize 2nd Itinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>90dd0245-7526-4a2c-b67f-e57714e92e2a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>StartInitializeItinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e45dd206-741c-421f-a103-0ee6ee9d234c</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OutputMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>531fe1c6-ee16-4486-ab0e-4cf0171ae0b7</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>newItineraryString2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>8afcd2f6-f4af-4eaa-88c1-a4671fb37894</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Initialize 1st Itinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>c615c099-a9f9-41a1-bd2c-cc4ff45dd395</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>StartInitializeItinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>35560119-26dc-480b-a831-5abdc26b61c6</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OutputMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>3af02c08-38f4-4450-91f4-c34017300abe</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>newItineraryString1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>23cc83b7-f955-4d90-a6ac-592d20eddc35</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Advance</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>e87e9631-cac7-4fb6-a009-7d456484908a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>StartAdvanceItinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>202913d1-2c3f-41a1-8e45-17363c93c00a</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OutputMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>bc25ee06-c6ac-49de-8e8a-65fd3ed03d84</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Publish Go Message based on 2nd resolver?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>2d28db77-6cfc-4e27-b0c0-78f6a6611dde</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>1f330f1d-c91e-47ca-9d25-f5a229b009be</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get go resolution</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>65b2e37d-16a6-4869-a59c-6541edbc24c9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start PublishGoMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d19498fa-700d-4001-abfd-a11e27e3452d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6a5c0c08-6cf6-4347-b3eb-4e658f61a641</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>c887a0ea-d98b-46bb-9057-ac5844a6c228</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Register Batch based on 2nd resolver?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>51ed767e-df8c-41a5-82d5-844d2c628007</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>a100e387-ab89-4660-b954-050c192d1616</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get mergeBatchSequenceRequest resolution</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>2feaf0be-0e87-40ab-8257-14c650c7818a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start RegisterBatch</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6603b7a2-d876-41cd-8efe-c94537019b93</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>mergeBatchSequenceRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>f854c7dc-2814-4a18-a124-9e124d5d7e38</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransactionAttributeShape</shapeType>      <ShapeID>e99759d8-44fc-4294-b75f-ca93e1705337</ShapeID>      <ParentLink>Statement_CLRAttribute</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>21a54c82-fc31-427b-b43c-559a74384fbf</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>63af0399-26bc-4d43-bb2a-84092f51c314</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Throw Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>4dc6bc80-d5d4-48b5-b339-6fecb43a9383</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>9623ca64-83af-4402-b6dd-9461f84e355d</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolution Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>6b404caf-8696-4d32-81f8-b06b204594cd</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>631e73cf-9913-4d49-98aa-bcbdd9549cf8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>a5f47e6a-4115-4e13-99e2-bcd7218102cf</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>50af0715-bf56-4025-86e2-0f1e45c8fecd</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'ReceivePipelineService'</ActionName><IsAtomic>0</IsAtomic><Line>728</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>748</Line><Position>258</Position><ShapeID>'7f876254-e059-4783-8615-d577d596b512'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'TxItinerary'</ActionName><IsAtomic>0</IsAtomic><Line>758</Line><Position>13</Position><ShapeID>'5b7bf5e6-1b96-4a86-8ec7-ded99a09d7d5'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>766</Line><Position>41</Position><ShapeID>'d7a5552f-e6f2-4b4e-8936-cf79303149d8'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>774</Line><Position>31</Position><ShapeID>'0fd2e58b-3497-44aa-b325-4f38e79bd15f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>777</Line><Position>21</Position><ShapeID>'4f3e3f65-16d0-404e-b795-86b2250ab443'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>780</Line><Position>43</Position><ShapeID>'bf0a0f99-f0ef-4ee6-a5ae-6bbc2fb07e43'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>786</Line><Position>25</Position><ShapeID>'7c30575c-6b5d-42fe-9ad1-85eb6d9766cd'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>789</Line><Position>38</Position><ShapeID>'be2b906a-2a39-4ec0-86ad-768574610e3a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'TxExecuteReceivePipeline'</ActionName><IsAtomic>1</IsAtomic><Line>794</Line><Position>25</Position><ShapeID>'dfbc7a4f-51f6-419e-a712-b8a3031fd134'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>806</Line><Position>33</Position><ShapeID>'2660d656-8b1e-40ac-9f6a-dc482482587a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>809</Line><Position>83</Position><ShapeID>'6c97eed1-c32a-4291-a60d-c0e5075bc4d3'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>812</Line><Position>33</Position><ShapeID>'5cc8c8b2-6983-4cef-8114-b08c35f9368e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>815</Line><Position>40</Position><ShapeID>'89f1832e-2fef-434b-becc-4f21fdc43e2a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>817</Line><Position>79</Position><ShapeID>'bec874fb-198f-46dc-9f1f-f8cf0dcd1976'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>820</Line><Position>33</Position><ShapeID>'c9309524-fe45-44f5-911d-ad25fab0af0e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>823</Line><Position>63</Position><ShapeID>'7947c477-46e0-4032-990f-71c666bf2eb4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>825</Line><Position>80</Position><ShapeID>'b5c6e179-0261-41ca-9d69-be0afd77182c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>828</Line><Position>48</Position><ShapeID>'f0a9e314-f9d7-41ba-b916-d792ecf24683'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>830</Line><Position>33</Position><ShapeID>'049dd6be-e43c-4c2c-bc3f-b1997a19595b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>833</Line><Position>37</Position><ShapeID>'da1bcaaf-4703-4f53-8b19-ada7bfbd194b'</ShapeID>
<Messages>
	<MsgInfo><name>OutputMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>840</Line><Position>37</Position><ShapeID>'884757c0-ee75-43f9-99f9-8501c68fe85a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>843</Line><Position>75</Position><ShapeID>'7b20e0a0-9791-4ef4-ae69-2af67fcf77d7'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>848</Line><Position>37</Position><ShapeID>'c1090042-649e-4f2b-bc33-936ffd824e80'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>851</Line><Position>90</Position><ShapeID>'90dd0245-7526-4a2c-b67f-e57714e92e2a'</ShapeID>
<Messages>
	<MsgInfo><name>OutputMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>856</Line><Position>90</Position><ShapeID>'c615c099-a9f9-41a1-bd2c-cc4ff45dd395'</ShapeID>
<Messages>
	<MsgInfo><name>OutputMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>861</Line><Position>87</Position><ShapeID>'e87e9631-cac7-4fb6-a009-7d456484908a'</ShapeID>
<Messages>
	<MsgInfo><name>OutputMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>864</Line><Position>37</Position><ShapeID>'bc25ee06-c6ac-49de-8e8a-65fd3ed03d84'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>867</Line><Position>44</Position><ShapeID>'1f330f1d-c91e-47ca-9d25-f5a229b009be'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>869</Line><Position>83</Position><ShapeID>'65b2e37d-16a6-4869-a59c-6541edbc24c9'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>872</Line><Position>37</Position><ShapeID>'c887a0ea-d98b-46bb-9057-ac5844a6c228'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>875</Line><Position>67</Position><ShapeID>'a100e387-ab89-4660-b954-050c192d1616'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>877</Line><Position>84</Position><ShapeID>'2feaf0be-0e87-40ab-8257-14c650c7818a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>886</Line><Position>25</Position><ShapeID>'63af0399-26bc-4d43-bb2a-84092f51c314'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>892</Line><Position>21</Position><ShapeID>'4dc6bc80-d5d4-48b5-b339-6fecb43a9383'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>895</Line><Position>25</Position><ShapeID>'9623ca64-83af-4402-b6dd-9461f84e355d'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>911</Line><Position>25</Position><ShapeID>'a5f47e6a-4115-4e13-99e2-bcd7218102cf'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>913</Line><Position>25</Position><ShapeID>'50af0715-bf56-4025-86e2-0f1e45c8fecd'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='a57788f2-e589-4791-86fe-0f14e28709e4' LowerBound='1.1' HigherBound='215.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='PortType' OID='e15a134a-4614-47fe-8510-b3660a46980a' ParentLink='Module_PortType' LowerBound='8.1' HigherBound='15.1'>
            <om:Property Name='Synchronous' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='FaultProcessingType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='77089dc2-4f8a-47ec-9ed5-1c18df91204b' ParentLink='PortType_OperationDeclaration' LowerBound='10.1' HigherBound='14.1'>
                <om:Property Name='OperationType' Value='OneWay' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PostFault' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='2168a8eb-2291-4eda-af99-419aced6a75b' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='12.13' HigherBound='12.25'>
                    <om:Property Name='Ref' Value='ESB.Extensions.Services.FaultMsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='4925f0c7-c6f1-4dd0-9ef6-cff40b731a87' ParentLink='Module_PortType' LowerBound='15.1' HigherBound='22.1'>
            <om:Property Name='Synchronous' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='XmlDocumentPortType' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='OperationDeclaration' OID='9ad5c73f-65b7-4ec8-a1d8-c66b04204257' ParentLink='PortType_OperationDeclaration' LowerBound='17.1' HigherBound='21.1'>
                <om:Property Name='OperationType' Value='OneWay' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='XmlDocument' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='e5ff85b6-26d5-4fc3-9069-841162109375' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='19.13' HigherBound='19.35'>
                    <om:Property Name='Ref' Value='System.Xml.XmlDocument' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='ServiceDeclaration' OID='bd198dff-11be-487a-a66e-942607397863' ParentLink='Module_ServiceDeclaration' LowerBound='22.1' HigherBound='214.1'>
            <om:Property Name='InitializedTransactionType' Value='True' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ReceivePipelineService' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='a24b0b13-05fc-4d49-a045-b0be13a1663e' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='32.1' HigherBound='33.1'>
                <om:Property Name='InitialValue' Value='true' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='hasNextStep' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='8a135e3f-db2f-4304-8b47-10c816c8c677' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='33.1' HigherBound='34.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='itinerary' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='f5e68dd7-bcfc-4c6b-89e6-6451eca26b91' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='34.1' HigherBound='35.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='itineraryStep' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='f090881b-ecf2-4d5a-9c30-800402dc5aad' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='35.1' HigherBound='36.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.ResolverCollection' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='resolvers' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='467732ac-ec4f-42bd-92aa-de8b5334022d' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='36.1' HigherBound='37.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='resolver' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='4f341e12-9027-48ba-93b8-1170f5e63e73' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='37.1' HigherBound='38.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='ESB.Extensions.Resolution.ResolutionDictionary' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='resolutionDictionary' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='b1573946-cd60-4732-a763-e35bba0605ad' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='38.1' HigherBound='39.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='ESB.Extensions.Resolutions.ReceivePipelineServiceResolution' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='resolution' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='b8fde43d-1c68-402b-beb5-73761e4b7edd' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='39.1' HigherBound='40.1'>
                <om:Property Name='InitialValue' Value='false' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='fromSecondResolver' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='LongRunningTransaction' OID='31c5eafc-9dc4-43c4-8fd3-e56bd5ac0263' ParentLink='ServiceDeclaration_Transaction' LowerBound='23.21' HigherBound='23.68'>
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TxMain' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='efec73b4-ea8a-4ece-bb25-53820bd54ade' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='29.1' HigherBound='30.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='InboundMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='74a7bd2e-228c-400a-a794-1b15f38c2fd8' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='30.1' HigherBound='31.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='OutputMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='ece1de3a-c17b-4fc7-a129-4d179d720581' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='31.1' HigherBound='32.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='85c068f1-8b21-403c-9c1a-e7cfa9a1cc66' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='7f876254-e059-4783-8615-d577d596b512' ParentLink='ServiceBody_Statement' LowerBound='42.1' HigherBound='52.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='DocumentProcessing' />
                    <om:Property Name='MessageName' Value='InboundMessage' />
                    <om:Property Name='OperationName' Value='XmlDocument' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive Msg' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DNFPredicate' OID='7d8338fe-ba3a-41ae-adf2-b7c142785700' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                        <om:Property Name='RHS' Value='&quot;ReceivePipelineService&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='71800deb-62fa-4870-bbc2-7cb3b789eb17' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                        <om:Property Name='RHS' Value='&quot;Pending&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='150a8d0c-fd35-41b4-bb95-40180316fea2' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType' />
                        <om:Property Name='RHS' Value='&quot;Orchestration&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='5b7bf5e6-1b96-4a86-8ec7-ded99a09d7d5' ParentLink='ServiceBody_Statement' LowerBound='52.1' HigherBound='212.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Itinerary and Resolution' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='VariableDeclaration' OID='d0f6b60d-ed64-4981-a616-ee680a439723' ParentLink='Scope_VariableDeclaration' LowerBound='55.1' HigherBound='56.1'>
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.String' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='newItineraryString1' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='LongRunningTransaction' OID='f414edd6-b5e9-4172-836c-780dd7d516ab' ParentLink='Scope_Transaction' LowerBound='53.18' HigherBound='53.54'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='TxItinerary' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='d7a5552f-e6f2-4b4e-8936-cf79303149d8' ParentLink='ComplexStatement_Statement' LowerBound='59.1' HigherBound='68.1'>
                        <om:Property Name='Expression' Value='// Retrieve the current itinerary step&#xD;&#xA;itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(InboundMessage);&#xD;&#xA;itineraryStep.ItineraryStep = itinerary.Itinerary.GetItineraryStep(InboundMessage);&#xD;&#xA;hasNextStep = itinerary.Itinerary.HasNextService();&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceName: &quot; + itineraryStep.ItineraryStep.ServiceName);&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceType: &quot; + System.Convert.ToString(itineraryStep.ItineraryStep.ServiceType));&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;Itinerary: &quot; + itineraryStep.ItineraryStep.Itinerary.ToString());' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Current Itinerary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='0fd2e58b-3497-44aa-b325-4f38e79bd15f' ParentLink='ComplexStatement_Statement' LowerBound='68.1' HigherBound='71.1'>
                        <om:Property Name='Expression' Value='resolvers = itineraryStep.ItineraryStep.ResolverCollection;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;    Resolver Collection Count: &quot; + System.Convert.ToString(resolvers.Count));' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Retrieve Resolvers' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Decision' OID='4f3e3f65-16d0-404e-b795-86b2250ab443' ParentLink='ComplexStatement_Statement' LowerBound='71.1' HigherBound='183.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Resolvers returned' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='175b2157-9347-4745-a877-2ddc43145622' ParentLink='ReallyComplexStatement_Branch' LowerBound='72.21' HigherBound='178.1'>
                            <om:Property Name='Expression' Value='resolvers.Count &gt; 0' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='YES' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='bf0a0f99-f0ef-4ee6-a5ae-6bbc2fb07e43' ParentLink='ComplexStatement_Statement' LowerBound='74.1' HigherBound='80.1'>
                                <om:Property Name='Expression' Value='resolvers.MoveNext();&#xD;&#xA;resolver = resolvers.Current;&#xD;&#xA;resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(InboundMessage, resolver);&#xD;&#xA;resolution = (ESB.Extensions.Resolutions.ReceivePipelineServiceResolution) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.ReceivePipelineServiceResolution&quot;);&#xD;&#xA;newItineraryString1 = resolutionDictionary.GetString(&quot;Microsoft.Practices.ESB.Itinerary.AsXml&quot;);&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Resolve' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Decision' OID='7c30575c-6b5d-42fe-9ad1-85eb6d9766cd' ParentLink='ComplexStatement_Statement' LowerBound='80.1' HigherBound='87.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='2nd Resolver for new itinerary?' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='DecisionBranch' OID='a8ced1b1-51e0-45b3-9440-be85d6a72568' ParentLink='ReallyComplexStatement_Branch' LowerBound='81.25' HigherBound='87.1'>
                                    <om:Property Name='Expression' Value='resolvers.MoveNext()' />
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='YES' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='VariableAssignment' OID='be2b906a-2a39-4ec0-86ad-768574610e3a' ParentLink='ComplexStatement_Statement' LowerBound='83.1' HigherBound='86.1'>
                                        <om:Property Name='Expression' Value='resolver = resolvers.Current;&#xD;&#xA;fromSecondResolver = true;' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Set new resolver' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='DecisionBranch' OID='68bb780d-bcd4-436a-837c-17ea72bd1a82' ParentLink='ReallyComplexStatement_Branch'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Else' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Scope' OID='dfbc7a4f-51f6-419e-a712-b8a3031fd134' ParentLink='ComplexStatement_Statement' LowerBound='87.1' HigherBound='177.1'>
                                <om:Property Name='InitializedTransactionType' Value='True' />
                                <om:Property Name='IsSynchronized' Value='False' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='ScpExecuteReceivePipeline' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='VariableDeclaration' OID='5bb91d8a-d157-4c0e-83bd-df3b087ceea4' ParentLink='Scope_VariableDeclaration' LowerBound='91.1' HigherBound='92.1'>
                                    <om:Property Name='UseDefaultConstructor' Value='False' />
                                    <om:Property Name='Type' Value='Microsoft.XLANGs.Pipeline.ReceivePipelineOutputMessages' />
                                    <om:Property Name='ParamDirection' Value='In' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='outputMessages' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='VariableDeclaration' OID='702390e7-1f46-4e1d-b911-fd8c6935cd8c' ParentLink='Scope_VariableDeclaration' LowerBound='92.1' HigherBound='93.1'>
                                    <om:Property Name='UseDefaultConstructor' Value='True' />
                                    <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                                    <om:Property Name='ParamDirection' Value='In' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='go' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='VariableDeclaration' OID='e8597520-e084-4a74-bf0b-8e2b225e14bd' ParentLink='Scope_VariableDeclaration' LowerBound='93.1' HigherBound='94.1'>
                                    <om:Property Name='UseDefaultConstructor' Value='False' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='ParamDirection' Value='In' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='newItineraryString2' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='VariableDeclaration' OID='8b536829-cdd7-4183-a5cd-c271ae410776' ParentLink='Scope_VariableDeclaration' LowerBound='94.1' HigherBound='95.1'>
                                    <om:Property Name='UseDefaultConstructor' Value='True' />
                                    <om:Property Name='Type' Value='ESB.Extensions.Resolutions.sp_MergeBatchSequence' />
                                    <om:Property Name='ParamDirection' Value='In' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='mergeBatchSequenceRequest' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='AtomicTransaction' OID='5153403a-ecca-456e-8424-d70af1be4959' ParentLink='Scope_Transaction' LowerBound='89.30' HigherBound='89.74'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='TxExecuteReceivePipeline' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Decision' OID='2660d656-8b1e-40ac-9f6a-dc482482587a' ParentLink='ComplexStatement_Statement' LowerBound='100.1' HigherBound='106.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Continue Original Message?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='a94aa72f-46b2-4772-a562-e256009c2c53' ParentLink='ReallyComplexStatement_Branch' LowerBound='101.33' HigherBound='106.1'>
                                        <om:Property Name='Expression' Value='!System.String.IsNullOrEmpty(newItineraryString1) &amp;&amp; hasNextStep' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='YES' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='Exec' OID='6c97eed1-c32a-4291-a60d-c0e5075bc4d3' ParentLink='ComplexStatement_Statement' LowerBound='103.1' HigherBound='105.1'>
                                            <om:Property Name='Invokee' Value='ESB.Extensions.Services.AdvanceItinerary' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='StartAdvanceItinerary' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Parameter' OID='5993b9d5-25c9-44c3-87f4-7ec9d684f9c2' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='InboundMessage' />
                                                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='998510fe-c9a7-4feb-9b6f-8852b29eb37d' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Decision' OID='5cc8c8b2-6983-4cef-8114-b08c35f9368e' ParentLink='ComplexStatement_Statement' LowerBound='106.1' HigherBound='114.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Publish GoMsg based on 1st resolver?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='2a12c125-90f7-4e77-898a-47e1273d8e8e' ParentLink='ReallyComplexStatement_Branch' LowerBound='107.33' HigherBound='114.1'>
                                        <om:Property Name='Expression' Value='resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.Go&quot;) != null' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='YES' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='VariableAssignment' OID='89f1832e-2fef-434b-becc-4f21fdc43e2a' ParentLink='ComplexStatement_Statement' LowerBound='109.1' HigherBound='111.1'>
                                            <om:Property Name='Expression' Value='go = (ESB.Extensions.Resolutions.Go) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.Go&quot;);' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Get go resolution' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='Exec' OID='bec874fb-198f-46dc-9f1f-f8cf0dcd1976' ParentLink='ComplexStatement_Statement' LowerBound='111.1' HigherBound='113.1'>
                                            <om:Property Name='Invokee' Value='ESB.Extensions.Services.PublishGoMsg' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Start Publish GoMsg' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='Parameter' OID='fbdaed0c-ffa0-4fbf-8f0f-0892064ce5d3' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='go' />
                                                <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='e93f6dba-c5b5-4d93-ba0a-1b3d134805b3' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Decision' OID='c9309524-fe45-44f5-911d-ad25fab0af0e' ParentLink='ComplexStatement_Statement' LowerBound='114.1' HigherBound='122.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Register Batch based on 1st resolver?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='be8a8799-7b36-410f-ae8a-b72264d5875c' ParentLink='ReallyComplexStatement_Branch' LowerBound='115.33' HigherBound='122.1'>
                                        <om:Property Name='Expression' Value='resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.sp_MergeBatchSequence&quot;) != null' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='YES' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='VariableAssignment' OID='7947c477-46e0-4032-990f-71c666bf2eb4' ParentLink='ComplexStatement_Statement' LowerBound='117.1' HigherBound='119.1'>
                                            <om:Property Name='Expression' Value='mergeBatchSequenceRequest = (ESB.Extensions.Resolutions.sp_MergeBatchSequence) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.sp_MergeBatchSequence&quot;);' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Get mergeBatchSequenceRequest resolution' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='Exec' OID='b5c6e179-0261-41ca-9d69-be0afd77182c' ParentLink='ComplexStatement_Statement' LowerBound='119.1' HigherBound='121.1'>
                                            <om:Property Name='Invokee' Value='ESB.Extensions.Services.RegisterBatch' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Start RegisterBatch' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Parameter' OID='f8ea0433-bb22-4b07-a8c1-fe869d561d1b' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='mergeBatchSequenceRequest' />
                                                <om:Property Name='Type' Value='ESB.Extensions.Resolutions.CompositeBatchInsert.Request' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='bc543b69-523d-4900-998c-76052131b826' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='f0a9e314-f9d7-41ba-b916-d792ecf24683' ParentLink='ComplexStatement_Statement' LowerBound='122.1' HigherBound='124.1'>
                                    <om:Property Name='Expression' Value='outputMessages = Microsoft.XLANGs.Pipeline.XLANGPipelineManager.ExecuteReceivePipeline(resolution.ReceivePipelineType, InboundMessage);&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Execute Receive Pipeline' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='While' OID='049dd6be-e43c-4c2c-bc3f-b1997a19595b' ParentLink='ComplexStatement_Statement' LowerBound='124.1' HigherBound='175.1'>
                                    <om:Property Name='Expression' Value='outputMessages.MoveNext()' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Publish Messages' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Construct' OID='da1bcaaf-4703-4f53-8b19-ada7bfbd194b' ParentLink='ComplexStatement_Statement' LowerBound='127.1' HigherBound='134.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Construct OutputMessage' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='MessageRef' OID='6869046a-e005-4b5a-8875-43a6005982cb' ParentLink='Construct_MessageRef' LowerBound='128.47' HigherBound='128.60'>
                                            <om:Property Name='Ref' Value='OutputMessage' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='MessageAssignment' OID='b85598fc-5c11-4974-be2c-179d02b4d5ae' ParentLink='ComplexStatement_Statement' LowerBound='130.1' HigherBound='133.1'>
                                            <om:Property Name='Expression' Value='OutputMessage = null;&#xD;&#xA;outputMessages.GetCurrent(OutputMessage);&#xD;&#xA;' />
                                            <om:Property Name='ReportToAnalyst' Value='False' />
                                            <om:Property Name='Name' Value='Assign OutputMessage' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Decision' OID='884757c0-ee75-43f9-99f9-8501c68fe85a' ParentLink='ComplexStatement_Statement' LowerBound='134.1' HigherBound='142.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Resolve from 2nd resolver?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='6183c238-f8e5-45ab-be05-da4fa6c4f1be' ParentLink='ReallyComplexStatement_Branch' LowerBound='135.37' HigherBound='142.1'>
                                            <om:Property Name='Expression' Value='fromSecondResolver' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='YES' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='7b20e0a0-9791-4ef4-ae69-2af67fcf77d7' ParentLink='ComplexStatement_Statement' LowerBound='137.1' HigherBound='141.1'>
                                                <om:Property Name='Expression' Value='System.Diagnostics.Trace.WriteLine(&quot;Resolving new itinerary from 2nd resolver.&quot;);&#xD;&#xA;resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(OutputMessage, resolver);&#xD;&#xA;newItineraryString2 = resolutionDictionary.GetString(&quot;Microsoft.Practices.ESB.Itinerary.AsXml&quot;);&#xD;&#xA;' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Resolve new itinerary' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='ed0d4dee-6928-47ed-8b46-d95a23856693' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Decision' OID='c1090042-649e-4f2b-bc33-936ffd824e80' ParentLink='ComplexStatement_Statement' LowerBound='142.1' HigherBound='158.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Advance or Initialize itinerary?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='518d11d2-88d3-4a5c-b837-e7aa824286bb' ParentLink='ReallyComplexStatement_Branch' LowerBound='143.37' HigherBound='148.1'>
                                            <om:Property Name='Expression' Value='fromSecondResolver &amp;&amp; !System.String.IsNullOrEmpty(newItineraryString2)' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Initialize 2nd Itinerary' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Exec' OID='90dd0245-7526-4a2c-b67f-e57714e92e2a' ParentLink='ComplexStatement_Statement' LowerBound='145.1' HigherBound='147.1'>
                                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.InitializeItinerary' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='StartInitializeItinerary' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='Parameter' OID='e45dd206-741c-421f-a103-0ee6ee9d234c' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='OutputMessage' />
                                                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                                <om:Element Type='Parameter' OID='531fe1c6-ee16-4486-ab0e-4cf0171ae0b7' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='newItineraryString2' />
                                                    <om:Property Name='Type' Value='System.String' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='8afcd2f6-f4af-4eaa-88c1-a4671fb37894' ParentLink='ReallyComplexStatement_Branch' LowerBound='148.42' HigherBound='153.1'>
                                            <om:Property Name='Expression' Value='!System.String.IsNullOrEmpty(newItineraryString1)' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Initialize 1st Itinerary' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Exec' OID='c615c099-a9f9-41a1-bd2c-cc4ff45dd395' ParentLink='ComplexStatement_Statement' LowerBound='150.1' HigherBound='152.1'>
                                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.InitializeItinerary' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='StartInitializeItinerary' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='Parameter' OID='35560119-26dc-480b-a831-5abdc26b61c6' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='OutputMessage' />
                                                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                                <om:Element Type='Parameter' OID='3af02c08-38f4-4450-91f4-c34017300abe' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='newItineraryString1' />
                                                    <om:Property Name='Type' Value='System.String' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='23cc83b7-f955-4d90-a6ac-592d20eddc35' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Advance' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='Exec' OID='e87e9631-cac7-4fb6-a009-7d456484908a' ParentLink='ComplexStatement_Statement' LowerBound='155.1' HigherBound='157.1'>
                                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.AdvanceItinerary' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='StartAdvanceItinerary' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='Parameter' OID='202913d1-2c3f-41a1-8e45-17363c93c00a' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='OutputMessage' />
                                                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Decision' OID='bc25ee06-c6ac-49de-8e8a-65fd3ed03d84' ParentLink='ComplexStatement_Statement' LowerBound='158.1' HigherBound='166.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Publish Go Message based on 2nd resolver?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='2d28db77-6cfc-4e27-b0c0-78f6a6611dde' ParentLink='ReallyComplexStatement_Branch' LowerBound='159.37' HigherBound='166.1'>
                                            <om:Property Name='Expression' Value='fromSecondResolver &amp;&amp; (resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.Go&quot;) != null)' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='YES' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='VariableAssignment' OID='1f330f1d-c91e-47ca-9d25-f5a229b009be' ParentLink='ComplexStatement_Statement' LowerBound='161.1' HigherBound='163.1'>
                                                <om:Property Name='Expression' Value='go = (ESB.Extensions.Resolutions.Go) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.Go&quot;);' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Get go resolution' />
                                                <om:Property Name='Signal' Value='True' />
                                            </om:Element>
                                            <om:Element Type='Exec' OID='65b2e37d-16a6-4869-a59c-6541edbc24c9' ParentLink='ComplexStatement_Statement' LowerBound='163.1' HigherBound='165.1'>
                                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.PublishGoMsg' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Start PublishGoMsg' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='Parameter' OID='d19498fa-700d-4001-abfd-a11e27e3452d' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='go' />
                                                    <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='6a5c0c08-6cf6-4347-b3eb-4e658f61a641' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Decision' OID='c887a0ea-d98b-46bb-9057-ac5844a6c228' ParentLink='ComplexStatement_Statement' LowerBound='166.1' HigherBound='174.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Register Batch based on 2nd resolver?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='51ed767e-df8c-41a5-82d5-844d2c628007' ParentLink='ReallyComplexStatement_Branch' LowerBound='167.37' HigherBound='174.1'>
                                            <om:Property Name='Expression' Value='fromSecondResolver &amp;&amp; resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.sp_MergeBatchSequence&quot;) != null' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='YES' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='VariableAssignment' OID='a100e387-ab89-4660-b954-050c192d1616' ParentLink='ComplexStatement_Statement' LowerBound='169.1' HigherBound='171.1'>
                                                <om:Property Name='Expression' Value='mergeBatchSequenceRequest = (ESB.Extensions.Resolutions.sp_MergeBatchSequence) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.sp_MergeBatchSequence&quot;);' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Get mergeBatchSequenceRequest resolution' />
                                                <om:Property Name='Signal' Value='True' />
                                            </om:Element>
                                            <om:Element Type='Exec' OID='2feaf0be-0e87-40ab-8257-14c650c7818a' ParentLink='ComplexStatement_Statement' LowerBound='171.1' HigherBound='173.1'>
                                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.RegisterBatch' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Start RegisterBatch' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='Parameter' OID='6603b7a2-d876-41cd-8efe-c94537019b93' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='mergeBatchSequenceRequest' />
                                                    <om:Property Name='Type' Value='ESB.Extensions.Resolutions.CompositeBatchInsert.Request' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='f854c7dc-2814-4a18-a124-9e124d5d7e38' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='TransactionAttribute' OID='e99759d8-44fc-4294-b75f-ca93e1705337' ParentLink='Statement_CLRAttribute' LowerBound='88.1' HigherBound='89.1'>
                                    <om:Property Name='Batch' Value='True' />
                                    <om:Property Name='Retry' Value='True' />
                                    <om:Property Name='Timeout' Value='60' />
                                    <om:Property Name='Isolation' Value='Serializable' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='21a54c82-fc31-427b-b43c-559a74384fbf' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='VariableAssignment' OID='63af0399-26bc-4d43-bb2a-84092f51c314' ParentLink='ComplexStatement_Statement' LowerBound='180.1' HigherBound='182.1'>
                                <om:Property Name='Expression' Value='throw new System.ApplicationException(&quot;There were no resolvers associated with this service config.&quot;);' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Throw Exception' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='4dc6bc80-d5d4-48b5-b339-6fecb43a9383' ParentLink='Scope_Catch' LowerBound='186.1' HigherBound='210.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='9623ca64-83af-4402-b6dd-9461f84e355d' ParentLink='Catch_Statement' LowerBound='189.1' HigherBound='205.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolution Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='6b404caf-8696-4d32-81f8-b06b204594cd' ParentLink='Construct_MessageRef' LowerBound='190.35' HigherBound='190.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='631e73cf-9913-4d49-98aa-bcbdd9549cf8' ParentLink='ComplexStatement_Statement' LowerBound='192.1' HigherBound='204.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, InboundMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='a5f47e6a-4115-4e13-99e2-bcd7218102cf' ParentLink='Catch_Statement' LowerBound='205.1' HigherBound='207.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='50af0715-bf56-4025-86e2-0f1e45c8fecd' ParentLink='Catch_Statement' LowerBound='207.1' HigherBound='209.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='dbe84d74-1e03-4a7a-9ca4-fe6ed64948db' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='25.1' HigherBound='27.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='2' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentProcessing' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='7f8bc091-1e3a-4e88-9de8-ccced3f94bee' ParentLink='PortDeclaration_CLRAttribute' LowerBound='25.1' HigherBound='26.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='123e2929-0055-4f0f-831f-c02966fe67d9' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='27.1' HigherBound='29.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='75' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='fde5ae50-c942-4425-afe0-00610c9b56af' ParentLink='PortDeclaration_CLRAttribute' LowerBound='27.1' HigherBound='28.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='103832de-0921-4143-82ce-0f895643412a' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='FaultMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='5a9011b2-7947-434f-9d01-e8a331ac51fd' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __ReceivePipelineService_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __ReceivePipelineService_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ReceivePipelineService")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ReceivePipelineService __svc__ = (ReceivePipelineService)_service;
                __ReceivePipelineService_root_0 __ctx0__ = (__ReceivePipelineService_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.DocumentProcessing != null)
                {
                    __svc__.DocumentProcessing.Close(this, null);
                    __svc__.DocumentProcessing = null;
                }
                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __ReceivePipelineService_1 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __ReceivePipelineService_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ReceivePipelineService")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ReceivePipelineService __svc__ = (ReceivePipelineService)_service;
                __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)(__svc__._stateMgrs[1]);
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null)
                    __ctx2__.__resolution = null;
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolver = null;
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolvers = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolutionDictionary = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolution = null;
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__itineraryStep = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolver = null;
                if (__ctx1__ != null)
                    __ctx1__.__itinerary = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("InboundMessage")]
            public __messagetype_System_Xml_XmlDocument __InboundMessage;  // lock index = 2
            [Microsoft.XLANGs.Core.UserVariableAttribute("OutputMessage")]
            public __messagetype_System_Xml_XmlDocument __OutputMessage;  // lock index = 5
            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("hasNextStep")]
            internal System.Boolean __hasNextStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryStep")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper __itineraryStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolvers")]
            internal Microsoft.Practices.ESB.Itinerary.ResolverCollection __resolvers;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolver")]
            internal System.String __resolver;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolution")]
            internal ESB.Extensions.Resolutions.ReceivePipelineServiceResolution __resolution;
            [Microsoft.XLANGs.Core.UserVariableAttribute("fromSecondResolver")]
            internal System.Boolean __fromSecondResolver;
        }


        [System.SerializableAttribute]
        public class __TxItinerary_2 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __TxItinerary_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "TxItinerary")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[4];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ReceivePipelineService __svc__ = (ReceivePipelineService)_service;
                __TxExecuteReceivePipeline_3 __ctx3__ = (__TxExecuteReceivePipeline_3)(__svc__._stateMgrs[3]);
                __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)(__svc__._stateMgrs[1]);
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);

                __ctx1__.__itinerary = __ctx2__.__itinerary;
                __ctx1__.__itineraryStep = __ctx2__.__itineraryStep;
                __ctx1__.__hasNextStep = __ctx2__.__hasNextStep;
                __ctx1__.__resolvers = __ctx2__.__resolvers;
                __ctx1__.__resolver = __ctx2__.__resolver;
                __ctx1__.__resolutionDictionary = __ctx2__.__resolutionDictionary;
                __ctx1__.__resolution = __ctx2__.__resolution;
                __ctx1__.__fromSecondResolver = __ctx2__.__fromSecondResolver;
                if (__ctx1__.__FaultMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                __ctx1__.__FaultMessage = __ctx2__.__FaultMessage;
                if (__ctx2__.__FaultMessage != null)
                    __ctx1__.RefMessage(__ctx1__.__FaultMessage);
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                if (__ctx3__ != null)
                    __ctx3__.__resolutionDictionary = null;
                if (__ctx3__ != null && __ctx3__.__OutputMessage != null)
                {
                    __ctx3__.UnrefMessage(__ctx3__.__OutputMessage);
                    __ctx3__.__OutputMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__newItineraryString1 = null;
                if (__ctx1__ != null && __ctx1__.__OutputMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutputMessage);
                    __ctx1__.__OutputMessage = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("hasNextStep")]
            internal System.Boolean __hasNextStep;  // lock index = 1
            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryStep")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper __itineraryStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolvers")]
            internal Microsoft.Practices.ESB.Itinerary.ResolverCollection __resolvers;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolver")]
            internal System.String __resolver;  // lock index = 7
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;  // lock index = 3
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolution")]
            internal ESB.Extensions.Resolutions.ReceivePipelineServiceResolution __resolution;  // lock index = 4
            [Microsoft.XLANGs.Core.UserVariableAttribute("fromSecondResolver")]
            internal System.Boolean __fromSecondResolver;  // lock index = 6
            [Microsoft.XLANGs.Core.UserVariableAttribute("newItineraryString1")]
            internal System.String __newItineraryString1;  // lock index = 0
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class __TxExecuteReceivePipeline_3 : Microsoft.XLANGs.Core.AtomicTransaction
        {
            public __TxExecuteReceivePipeline_3(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "TxExecuteReceivePipeline")
            {
                Retry = true;
                Batch = true;
                Timeout = 60;
                TranIsolationLevel = System.Data.IsolationLevel.Serializable;
            }

            public override int Index { get { return 3; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[3]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[3]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ReceivePipelineService __svc__ = (ReceivePipelineService)_service;
                __TxExecuteReceivePipeline_3 __ctx3__ = (__TxExecuteReceivePipeline_3)(__svc__._stateMgrs[3]);
                __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)(__svc__._stateMgrs[1]);
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);

                if (this.Succeeded)
                {
                    __ctx2__.__resolutionDictionary = __ctx3__.__resolutionDictionary;
                    if (__ctx1__.__OutputMessage != null)
                        __ctx1__.UnrefMessage(__ctx1__.__OutputMessage);
                    __ctx1__.__OutputMessage = __ctx3__.__OutputMessage;
                    if (__ctx3__.__OutputMessage != null)
                        __ctx1__.RefMessage(__ctx1__.__OutputMessage);
                }
                else if (_PrologueCompleted)
                {
                    __ctx2__.__resolutionDictionary = (ESB.Extensions.Resolution.ResolutionDictionary)__ctx3__.RestoreObject(__ctx3__.__resolutionDictionary, 0);
                }
                if (__ctx3__ != null)
                    __ctx3__.__go = null;
                if (__ctx3__ != null)
                    __ctx3__.__mergeBatchSequenceRequest = null;
                if (__ctx3__ != null)
                    __ctx3__.__newItineraryString2 = null;
                if (__ctx3__ != null)
                    __ctx3__.__outputMessages = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("OutputMessage")]
            public __messagetype_System_Xml_XmlDocument __OutputMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [System.NonSerializedAttribute]
            [Microsoft.XLANGs.Core.UserVariableAttribute("outputMessages")]
            internal Microsoft.XLANGs.Pipeline.ReceivePipelineOutputMessages __outputMessages;
            [Microsoft.XLANGs.Core.UserVariableAttribute("go")]
            internal ESB.Extensions.Resolutions.Go __go;
            [Microsoft.XLANGs.Core.UserVariableAttribute("newItineraryString2")]
            internal System.String __newItineraryString2;
            [Microsoft.XLANGs.Core.UserVariableAttribute("mergeBatchSequenceRequest")]
            internal ESB.Extensions.Resolutions.sp_MergeBatchSequence __mergeBatchSequenceRequest;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentProcessing")]
        internal XmlDocumentPortType DocumentProcessing;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType();

        sealed private class PredicateSet0_0 : Microsoft.XLANGs.Core.PredicateGroup
        {
            public PredicateSet0_0() : base(3)
            {
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "ReceivePipelineService"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Pending"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Orchestration"));
            }
        }


        private static Microsoft.XLANGs.Core.PredicateGroup[] _predicates0 = {
            new PredicateSet0_0()
        };


        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(ReceivePipelineService).GetField("DocumentProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ReceivePipelineService), "DocumentProcessing"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(ReceivePipelineService).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ReceivePipelineService), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(ESB.Extensions.Services.AdvanceItinerary),
                    typeof(ESB.Extensions.Services.InitializeItinerary),
                    typeof(ESB.Extensions.Services.PublishGoMsg),
                    typeof(ESB.Extensions.Services.RegisterBatch)                    
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, _predicates0 , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "7f876254-e059-4783-8615-d577d596b512", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "7f876254-e059-4783-8615-d577d596b512", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "5b7bf5e6-1b96-4a86-8ec7-ded99a09d7d5", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "d7a5552f-e6f2-4b4e-8936-cf79303149d8", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "d7a5552f-e6f2-4b4e-8936-cf79303149d8", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "0fd2e58b-3497-44aa-b325-4f38e79bd15f", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "0fd2e58b-3497-44aa-b325-4f38e79bd15f", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "4f3e3f65-16d0-404e-b795-86b2250ab443", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "bf0a0f99-f0ef-4ee6-a5ae-6bbc2fb07e43", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "bf0a0f99-f0ef-4ee6-a5ae-6bbc2fb07e43", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "7c30575c-6b5d-42fe-9ad1-85eb6d9766cd", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "be2b906a-2a39-4ec0-86ad-768574610e3a", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "be2b906a-2a39-4ec0-86ad-768574610e3a", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "7c30575c-6b5d-42fe-9ad1-85eb6d9766cd", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "dfbc7a4f-51f6-419e-a712-b8a3031fd134", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "00000000-0000-0000-0000-000000000000", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "00000000-0000-0000-0000-000000000000", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "2660d656-8b1e-40ac-9f6a-dc482482587a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "6c97eed1-c32a-4291-a60d-c0e5075bc4d3", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "6c97eed1-c32a-4291-a60d-c0e5075bc4d3", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "2660d656-8b1e-40ac-9f6a-dc482482587a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "5cc8c8b2-6983-4cef-8114-b08c35f9368e", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "89f1832e-2fef-434b-becc-4f21fdc43e2a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(27, "89f1832e-2fef-434b-becc-4f21fdc43e2a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(28, "bec874fb-198f-46dc-9f1f-f8cf0dcd1976", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(29, "bec874fb-198f-46dc-9f1f-f8cf0dcd1976", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(30, "5cc8c8b2-6983-4cef-8114-b08c35f9368e", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(31, "c9309524-fe45-44f5-911d-ad25fab0af0e", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(32, "7947c477-46e0-4032-990f-71c666bf2eb4", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(33, "7947c477-46e0-4032-990f-71c666bf2eb4", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(34, "b5c6e179-0261-41ca-9d69-be0afd77182c", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(35, "b5c6e179-0261-41ca-9d69-be0afd77182c", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(36, "c9309524-fe45-44f5-911d-ad25fab0af0e", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(37, "f0a9e314-f9d7-41ba-b916-d792ecf24683", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(38, "f0a9e314-f9d7-41ba-b916-d792ecf24683", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(39, "049dd6be-e43c-4c2c-bc3f-b1997a19595b", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(40, "da1bcaaf-4703-4f53-8b19-ada7bfbd194b", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(41, "da1bcaaf-4703-4f53-8b19-ada7bfbd194b", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(42, "884757c0-ee75-43f9-99f9-8501c68fe85a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(43, "7b20e0a0-9791-4ef4-ae69-2af67fcf77d7", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(44, "7b20e0a0-9791-4ef4-ae69-2af67fcf77d7", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(45, "884757c0-ee75-43f9-99f9-8501c68fe85a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(46, "c1090042-649e-4f2b-bc33-936ffd824e80", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(47, "90dd0245-7526-4a2c-b67f-e57714e92e2a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(48, "90dd0245-7526-4a2c-b67f-e57714e92e2a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(49, "c615c099-a9f9-41a1-bd2c-cc4ff45dd395", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(50, "c615c099-a9f9-41a1-bd2c-cc4ff45dd395", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(51, "e87e9631-cac7-4fb6-a009-7d456484908a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(52, "e87e9631-cac7-4fb6-a009-7d456484908a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(53, "c1090042-649e-4f2b-bc33-936ffd824e80", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(54, "bc25ee06-c6ac-49de-8e8a-65fd3ed03d84", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(55, "1f330f1d-c91e-47ca-9d25-f5a229b009be", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(56, "1f330f1d-c91e-47ca-9d25-f5a229b009be", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(57, "65b2e37d-16a6-4869-a59c-6541edbc24c9", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(58, "65b2e37d-16a6-4869-a59c-6541edbc24c9", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(59, "bc25ee06-c6ac-49de-8e8a-65fd3ed03d84", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(60, "c887a0ea-d98b-46bb-9057-ac5844a6c228", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(61, "a100e387-ab89-4660-b954-050c192d1616", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(62, "a100e387-ab89-4660-b954-050c192d1616", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(63, "2feaf0be-0e87-40ab-8257-14c650c7818a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(64, "2feaf0be-0e87-40ab-8257-14c650c7818a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(65, "c887a0ea-d98b-46bb-9057-ac5844a6c228", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(66, "049dd6be-e43c-4c2c-bc3f-b1997a19595b", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(67, "dfbc7a4f-51f6-419e-a712-b8a3031fd134", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(68, "63af0399-26bc-4d43-bb2a-84092f51c314", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(69, "4f3e3f65-16d0-404e-b795-86b2250ab443", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(70, "4dc6bc80-d5d4-48b5-b339-6fecb43a9383", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(71, "9623ca64-83af-4402-b6dd-9461f84e355d", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(72, "9623ca64-83af-4402-b6dd-9461f84e355d", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(73, "a5f47e6a-4115-4e13-99e2-bcd7218102cf", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(74, "a5f47e6a-4115-4e13-99e2-bcd7218102cf", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(75, "50af0715-bf56-4025-86e2-0f1e45c8fecd", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(76, "4dc6bc80-d5d4-48b5-b339-6fecb43a9383", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(77, "5b7bf5e6-1b96-4a86-8ec7-ded99a09d7d5", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,3,3,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,2,2,2,2,2,2,2,2,4,4,4,77,3,3,3,3,};
        public static int[] __progressLocation2 = new int[] { 7,7,7,7,8,8,8,8,8,8,9,9,10,10,11,11,12,12,13,13,13,13,13,14,14,15,15,16,16,17,18,18,18,67,11,68,68,69,69,69,69,};
        public static int[] __progressLocation3 = new int[] { 21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,23,23,24,25,25,26,26,27,28,28,29,29,30,31,31,32,32,33,34,34,35,35,36,37,37,38,39,39,39,40,40,41,42,42,43,43,44,44,44,45,46,46,47,47,48,48,46,46,46,49,49,50,50,50,51,51,52,52,52,53,54,54,55,55,56,57,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,66,66,66,66,};
        public static int[] __progressLocation4 = new int[] { 70,70,71,71,72,73,73,73,74,75,75,76,76,};

        public static int[][] __progressLocations = new int[5] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3,__progressLocation4};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __ReceivePipelineService_root_0 __ctx0__ = (__ReceivePipelineService_root_0)_stateMgrs[0];
            __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                DocumentProcessing = new XmlDocumentPortType(0, this);
                FaultProcessing = new FaultProcessingType(1, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], DocumentProcessing, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __ReceivePipelineService_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __ReceivePipelineService_root_0 __ctx0__ = (__ReceivePipelineService_root_0)_stateMgrs[0];
            __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__hasNextStep = default(System.Boolean);
                __ctx1__.__itinerary = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper);
                __ctx1__.__itineraryStep = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper);
                __ctx1__.__resolvers = default(Microsoft.Practices.ESB.Itinerary.ResolverCollection);
                __ctx1__.__resolver = default(System.String);
                __ctx1__.__resolutionDictionary = default(ESB.Extensions.Resolution.ResolutionDictionary);
                __ctx1__.__resolution = default(ESB.Extensions.Resolutions.ReceivePipelineServiceResolution);
                __ctx1__.__fromSecondResolver = default(System.Boolean);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!DocumentProcessing.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__InboundMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                __ctx1__.__InboundMessage = new __messagetype_System_Xml_XmlDocument("InboundMessage", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__InboundMessage);
                DocumentProcessing.ReceiveMessage(0, __msgEnv__, __ctx1__.__InboundMessage, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (DocumentProcessing != null)
                {
                    DocumentProcessing.Close(__ctx1__, __seg__);
                    DocumentProcessing = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    __edata.PortName = @"DocumentProcessing";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__hasNextStep = true;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__itinerary = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__itineraryStep = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__resolvers = new Microsoft.Practices.ESB.Itinerary.ResolverCollection();
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx1__.__resolver = "";
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx1__.__resolutionDictionary = new ESB.Extensions.Resolution.ResolutionDictionary();
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx1__.__resolution = new ESB.Extensions.Resolutions.ReceivePipelineServiceResolution();
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                __ctx1__.__fromSecondResolver = false;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __ctx2__ = new __TxItinerary_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                Tracker.FireEvent(__eventLocations[77],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (__ctx2__ != null)
                    __ctx2__.__resolution = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolver = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__resolution = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolutionDictionary = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolver = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolvers = null;
                if (__ctx1__ != null)
                    __ctx1__.__itineraryStep = null;
                if (__ctx1__ != null)
                    __ctx1__.__itinerary = null;
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[20],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 20;
            case 20:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __TxExecuteReceivePipeline_3 __ctx3__ = (__TxExecuteReceivePipeline_3)_stateMgrs[3];
            __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__newItineraryString1 = default(System.String);
                __ctx2__.__itinerary = __ctx1__.__itinerary;
                __ctx2__.__itineraryStep = __ctx1__.__itineraryStep;
                __ctx2__.__hasNextStep = __ctx1__.__hasNextStep;
                __ctx2__.__resolvers = __ctx1__.__resolvers;
                __ctx2__.__resolver = __ctx1__.__resolver;
                __ctx2__.__resolutionDictionary = __ctx1__.__resolutionDictionary;
                __ctx2__.__resolution = __ctx1__.__resolution;
                __ctx2__.__fromSecondResolver = __ctx1__.__fromSecondResolver;
                __ctx2__.__FaultMessage = __ctx1__.__FaultMessage;
                if (__ctx2__.__FaultMessage != null)
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__newItineraryString1 = "";
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx2__.__itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx2__.__itineraryStep.ItineraryStep = __ctx2__.__itinerary.Itinerary.GetItineraryStep(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx2__.__hasNextStep = __ctx2__.__itinerary.Itinerary.HasNextService();
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                System.Diagnostics.Trace.WriteLine("ServiceName: " + __ctx2__.__itineraryStep.ItineraryStep.ServiceName);
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                System.Diagnostics.Trace.WriteLine("ServiceType: " + System.Convert.ToString(__ctx2__.__itineraryStep.ItineraryStep.ServiceType));
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                System.Diagnostics.Trace.WriteLine("Itinerary: " + __ctx2__.__itineraryStep.ItineraryStep.Itinerary.ToString());
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                __ctx2__.__resolvers = __ctx2__.__itineraryStep.ItineraryStep.ResolverCollection;
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                System.Diagnostics.Trace.WriteLine("    Resolver Collection Count: " + System.Convert.ToString(__ctx2__.__resolvers.Count));
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                __condition__ = __ctx2__.__resolvers.Count > 0;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 35;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                __ctx2__.__resolvers.MoveNext();
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __ctx2__.__resolver = __ctx2__.__resolvers.Current;
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                __ctx2__.__resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage), __ctx2__.__resolver);
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                __ctx2__.__resolution = (ESB.Extensions.Resolutions.ReceivePipelineServiceResolution)__ctx2__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.ReceivePipelineServiceResolution");
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                __ctx2__.__newItineraryString1 = __ctx2__.__resolutionDictionary.GetString("Microsoft.Practices.ESB.Itinerary.AsXml");
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                __condition__ = __ctx2__.__resolvers.MoveNext();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 29;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                __ctx2__.__resolver = __ctx2__.__resolvers.Current;
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                __ctx2__.__fromSecondResolver = true;
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                __ctx3__ = new __TxExecuteReceivePipeline_3(this);
                _stateMgrs[3] = __ctx3__;
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                __ctx2__.StartContext(__seg__, __ctx3__);
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[67],__eventData[14],_stateMgrs[2].TrackDataStream );
                __ctx3__.Finally();
                if (__ctx3__ != null)
                    __ctx3__.__resolutionDictionary = null;
                if (__ctx3__ != null && __ctx3__.__OutputMessage != null)
                {
                    __ctx3__.UnrefMessage(__ctx3__.__OutputMessage);
                    __ctx3__.__OutputMessage = null;
                }
                if (__ctx1__ != null && __ctx1__.__OutputMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutputMessage);
                    __ctx1__.__OutputMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 35:
                if ( !PreProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[68],__eventData[15],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 36;
            case 36:
                throw new System.ApplicationException("There were no resolvers associated with this service config.");
            case 37:
                if ( !PreProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__newItineraryString1 = null;
                Tracker.FireEvent(__eventLocations[69],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 38;
            case 38:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                if ( !PreProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 40;
            case 40:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            __TxExecuteReceivePipeline_3 __ctx3__ = (__TxExecuteReceivePipeline_3)_stateMgrs[3];
            __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                if (__ctx3__.LockRead(0, _segments[3]) == false)  // __TxItinerary_2.__newItineraryString1
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if (__ctx3__.LockRead(1, _segments[3]) == false)  // __TxItinerary_2.__hasNextStep
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if (__ctx3__.LockRead(2, _segments[3]) == false)  // __ReceivePipelineService_1.__InboundMessage
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if (__ctx3__.LockWrite(3, _segments[3]) == false)  // __TxItinerary_2.__resolutionDictionary
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if (__ctx3__.LockRead(4, _segments[3]) == false)  // __TxItinerary_2.__resolution
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if (__ctx3__.LockWrite(5, _segments[3]) == false)  // __ReceivePipelineService_1.__OutputMessage
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if (__ctx3__.LockRead(6, _segments[3]) == false)  // __TxItinerary_2.__fromSecondResolver
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if (__ctx3__.LockRead(7, _segments[3]) == false)  // __TxItinerary_2.__resolver
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx3__.__outputMessages = default(Microsoft.XLANGs.Pipeline.ReceivePipelineOutputMessages);
                __ctx3__.__go = default(ESB.Extensions.Resolutions.Go);
                __ctx3__.__newItineraryString2 = default(System.String);
                __ctx3__.__mergeBatchSequenceRequest = default(ESB.Extensions.Resolutions.sp_MergeBatchSequence);
                __ctx3__.__resolutionDictionary = (ESB.Extensions.Resolution.ResolutionDictionary)__ctx3__.SaveObject(__ctx2__.__resolutionDictionary, 0);
                __ctx3__.__OutputMessage = __ctx1__.__OutputMessage;
                if (__ctx3__.__OutputMessage != null)
                    __ctx3__.RefMessage(__ctx3__.__OutputMessage);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx3__.__go = new ESB.Extensions.Resolutions.Go();
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx3__.__newItineraryString2 = "";
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx3__.__mergeBatchSequenceRequest = new ESB.Extensions.Resolutions.sp_MergeBatchSequence();
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                __condition__ = !System.String.IsNullOrEmpty(__ctx2__.__newItineraryString1) && __ctx2__.__hasNextStep;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 18;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.AdvanceItinerary), new object[] {__ctx1__.__InboundMessage});
                goto case 17;
            case 17:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    Tracker.FireEvent(__eventLocations[23],__edata,_stateMgrs[3].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[25],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                __condition__ = __ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.Go") != null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 28;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[26],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                __ctx3__.__go = (ESB.Extensions.Resolutions.Go)__ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.Go");
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[27],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[28],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                if ( !PreProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.PublishGoMsg), new object[] {__ctx3__.__go});
                goto case 27;
            case 27:
                Tracker.FireEvent(__eventLocations[29],__eventData[8],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[30],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[31],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                __condition__ = __ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.sp_MergeBatchSequence") != null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 38;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[32],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                __ctx3__.__mergeBatchSequenceRequest = (ESB.Extensions.Resolutions.sp_MergeBatchSequence)__ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.sp_MergeBatchSequence");
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[33],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                if ( !PreProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[34],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 35;
            case 35:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 36;
            case 36:
                if ( !PreProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.RegisterBatch), new object[] {__ctx3__.__mergeBatchSequenceRequest});
                goto case 37;
            case 37:
                Tracker.FireEvent(__eventLocations[35],__eventData[8],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                if ( !PreProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[36],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 39;
            case 39:
                if ( !PreProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[37],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 40;
            case 40:
                __ctx3__.__outputMessages = Microsoft.XLANGs.Pipeline.XLANGPipelineManager.ExecuteReceivePipeline(__ctx2__.__resolution.ReceivePipelineType, CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 41;
            case 41:
                if ( !PreProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[38],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 42;
            case 42:
                if ( !PreProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[39],__eventData[9],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 43;
            case 43:
                __condition__ = __ctx3__.__outputMessages.MoveNext();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 98 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 98;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                if ( !PreProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[39],__eventData[10],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 45;
            case 45:
                if ( !PreProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[40],__eventData[11],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 46;
            case 46:
                {
                    __messagetype_System_Xml_XmlDocument __OutputMessage = new __messagetype_System_Xml_XmlDocument("OutputMessage", __ctx3__);

                    __OutputMessage.part.LoadFrom(null);
                    __ctx3__.__outputMessages.GetCurrent(CreateMessageWrapperForUserCode(__OutputMessage));

                    if (__ctx3__.__OutputMessage != null)
                        __ctx3__.UnrefMessage(__ctx3__.__OutputMessage);
                    __ctx3__.__OutputMessage = __OutputMessage;
                    __ctx3__.RefMessage(__ctx3__.__OutputMessage);
                }
                __ctx3__.__OutputMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 47;
            case 47:
                if ( !PreProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx3__.__OutputMessage);
                    Tracker.FireEvent(__eventLocations[41],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 48;
            case 48:
                if ( !PreProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[42],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 49;
            case 49:
                __condition__ = __ctx2__.__fromSecondResolver;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 55;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 50;
            case 50:
                if ( !PreProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[43],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 51;
            case 51:
                System.Diagnostics.Trace.WriteLine("Resolving new itinerary from 2nd resolver.");
                if ( !PostProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 52;
            case 52:
                if ( !PreProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[44],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 53;
            case 53:
                __ctx3__.__resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(CreateMessageWrapperForUserCode(__ctx3__.__OutputMessage), __ctx2__.__resolver);
                if ( !PostProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 54;
            case 54:
                __ctx3__.__newItineraryString2 = __ctx3__.__resolutionDictionary.GetString("Microsoft.Practices.ESB.Itinerary.AsXml");
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                if ( !PreProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[45],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 56;
            case 56:
                if ( !PreProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[46],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 57;
            case 57:
                __condition__ = __ctx2__.__fromSecondResolver && !System.String.IsNullOrEmpty(__ctx3__.__newItineraryString2);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 63 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 63;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 58;
            case 58:
                if ( !PreProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[47],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 59;
            case 59:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 60;
            case 60:
                if ( !PreProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.InitializeItinerary), new object[] {__ctx3__.__OutputMessage, __ctx3__.__newItineraryString2});
                goto case 61;
            case 61:
                if ( !PreProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx3__.__OutputMessage);
                    Tracker.FireEvent(__eventLocations[48],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 62;
            case 62:
                if ( !PostProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 75;
            case 63:
                if ( !PreProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 64;
            case 64:
                __condition__ = !System.String.IsNullOrEmpty(__ctx2__.__newItineraryString1);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 70 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 70;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 65 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 65;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[49],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 67 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 67;
            case 67:
                if ( !PreProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.InitializeItinerary), new object[] {__ctx3__.__OutputMessage, __ctx2__.__newItineraryString1});
                goto case 68;
            case 68:
                if ( !PreProgressInc( __seg__, __ctx__, 69 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx3__.__OutputMessage);
                    Tracker.FireEvent(__eventLocations[50],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 69;
            case 69:
                if ( !PostProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 74;
            case 70:
                if ( !PreProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[51],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 71;
            case 71:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 72;
            case 72:
                if ( !PreProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.AdvanceItinerary), new object[] {__ctx3__.__OutputMessage});
                goto case 73;
            case 73:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx3__.__OutputMessage);
                    Tracker.FireEvent(__eventLocations[52],__edata,_stateMgrs[3].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 74;
            case 74:
                if ( !PreProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 75;
            case 75:
                if ( !PreProgressInc( __seg__, __ctx__, 76 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[53],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 76;
            case 76:
                if ( !PreProgressInc( __seg__, __ctx__, 77 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[54],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 77;
            case 77:
                __condition__ = __ctx2__.__fromSecondResolver && (__ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.Go") != null);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 85 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 85;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 78 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 78;
            case 78:
                if ( !PreProgressInc( __seg__, __ctx__, 79 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[55],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 79;
            case 79:
                __ctx3__.__go = (ESB.Extensions.Resolutions.Go)__ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.Go");
                if ( !PostProgressInc( __seg__, __ctx__, 80 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 80;
            case 80:
                if ( !PreProgressInc( __seg__, __ctx__, 81 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[56],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 81;
            case 81:
                if ( !PreProgressInc( __seg__, __ctx__, 82 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[57],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 82;
            case 82:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 83 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 83;
            case 83:
                if ( !PreProgressInc( __seg__, __ctx__, 84 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.PublishGoMsg), new object[] {__ctx3__.__go});
                goto case 84;
            case 84:
                Tracker.FireEvent(__eventLocations[58],__eventData[8],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 85 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 85;
            case 85:
                if ( !PreProgressInc( __seg__, __ctx__, 86 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[59],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 86;
            case 86:
                if ( !PreProgressInc( __seg__, __ctx__, 87 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[60],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 87;
            case 87:
                __condition__ = __ctx2__.__fromSecondResolver && __ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.sp_MergeBatchSequence") != null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 95 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 95;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 88 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 88;
            case 88:
                if ( !PreProgressInc( __seg__, __ctx__, 89 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[61],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 89;
            case 89:
                __ctx3__.__mergeBatchSequenceRequest = (ESB.Extensions.Resolutions.sp_MergeBatchSequence)__ctx3__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.sp_MergeBatchSequence");
                if ( !PostProgressInc( __seg__, __ctx__, 90 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 90;
            case 90:
                if ( !PreProgressInc( __seg__, __ctx__, 91 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[62],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 91;
            case 91:
                if ( !PreProgressInc( __seg__, __ctx__, 92 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[63],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 92;
            case 92:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 93 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 93;
            case 93:
                if ( !PreProgressInc( __seg__, __ctx__, 94 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.RegisterBatch), new object[] {__ctx3__.__mergeBatchSequenceRequest});
                goto case 94;
            case 94:
                Tracker.FireEvent(__eventLocations[64],__eventData[8],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 95 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 95;
            case 95:
                if ( !PreProgressInc( __seg__, __ctx__, 96 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[65],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 96;
            case 96:
                if ( !PreProgressInc( __seg__, __ctx__, 97 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[66],__eventData[12],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 97;
            case 97:
                if ( !PostProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 43;
            case 98:
                if ( !PreProgressInc( __seg__, __ctx__, 99 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx3__ != null)
                    __ctx3__.__mergeBatchSequenceRequest = null;
                if (__ctx3__ != null)
                    __ctx3__.__newItineraryString2 = null;
                if (__ctx3__ != null)
                    __ctx3__.__go = null;
                if (__ctx3__ != null)
                    __ctx3__.__outputMessages = null;
                Tracker.FireEvent(__eventLocations[66],__eventData[13],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 99;
            case 99:
                if (!__ctx3__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 100 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 100;
            case 100:
                if ( !PreProgressInc( __seg__, __ctx__, 101 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx3__.OnCommit();
                goto case 101;
            case 101:
                __seg__.SegmentDone();
                _segments[2].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment4(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[4];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __ReceivePipelineService_root_0 __ctx0__ = (__ReceivePipelineService_root_0)_stateMgrs[0];
            __ReceivePipelineService_1 __ctx1__ = (__ReceivePipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[70],__eventData[16],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[71],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx2__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));

                    if (__ctx2__.__FaultMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = __FaultMessage;
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                }
                __ctx2__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[72],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[73],__eventData[17],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx2__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[74],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[75],__eventData[18],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[76],__eventData[19],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 684 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\SendPipelineService.odx"
    [Microsoft.XLANGs.BaseTypes.StaticConvoyAttribute(
        0,
        new System.Type[] { typeof(ConvoyCT) }
    )]
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "DocumentProcessing", "XmlDocument", 0, 0, true
    )]
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        1, "DocumentProcessing", "XmlDocument", -1, 0, false
    )]
    [Microsoft.XLANGs.BaseTypes.ActivationPredicateAttribute(
        0,
        new bool[] {
            true,
            false,
            false
        },
        new System.Type[] {
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType)
        },
        new Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator[] {
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual
        },
        new System.Object[] {
            "SendPipelineService",
            "Pending",
            "Orchestration"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "DocumentProcessing",
            "PublishingDirect",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eLongRunning
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class SendPipelineService : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(SendPipelineService));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static SendPipelineService()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 3, 3),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment4), 1, 3, 4),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment5), 1, 2, 5)
            };

            _Locks = 0;
            _rootContext = new __SendPipelineService_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[4];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public SendPipelineService(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "SendPipelineService", tracker)
        {
            ConstructorHelper();
        }

        public SendPipelineService(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "SendPipelineService")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>04dc2719-d125-4135-abfb-eecca4049bc7</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>e73d2df2-7f46-4cec-b9f8-4f0140c45b2c</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive InboundMessage</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>66bb29b6-4e46-4ea1-8def-29b8be9a4ffc</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>23d9d983-a85c-4bc8-8afe-c8afcefb7871</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>3e55be0f-cc34-4124-823d-8408fb77e701</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>1fac51c5-cec1-491f-bbb4-04e936232923</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Itinerary and Resolution</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>1d468c94-8080-41b8-99d0-6a42da94346c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Current Itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>a3183035-9243-47fc-b78b-602cd99aab8f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Retrieve Resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>434f9c11-00ee-4920-a892-3bde09b016f7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolvers returned</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>a3680a86-c7c6-4dde-9ae1-de01fb09998a</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>NO</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>3a9bfb93-b248-4f22-b224-bd5e37791905</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Throw Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1aef40a4-1833-4462-b6ea-c2d6424e124c</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7875dc61-8ec4-47bc-ad76-51cd5e85d8ec</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolve</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>6eeebd9b-00e6-43d9-a2d8-cb3c7d02d175</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Continue Original Message Itinerary?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>4809cfb9-cee1-4c63-948f-c9299f8cef65</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>11791fe9-f969-4cff-a6ec-a61699966688</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start AdvanceItineraryBatch</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d5bc06ed-295d-42fb-b874-37292faae635</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>InboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>c2b52e85-6b3a-47ea-a420-de7ff5237d84</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>02c20274-afa3-43ac-93b2-ad7937b4ffbb</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>AddMessageToAggregatorList</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>3a5c2a6a-5bc3-47ce-9ebe-e20971b8c799</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Batch Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>WhileShape</shapeType>      <ShapeID>97920d87-3bf6-44ef-86f9-f27c3470fad7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loop Inbound Messages</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ListenShape</shapeType>      <ShapeID>48ae31de-02aa-4ce9-bc18-c14273606f16</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Listen Messages or Timeout</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ListenBranchShape</shapeType>      <ShapeID>fa084a99-a60c-494e-b5e6-84791de3d57b</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>ListenBranch_1</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>75fdb16f-c1b1-4c2c-b6f6-0aa0a08057b4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>AddMessageToAggregatorList</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>7dce68d9-93b8-4e4f-9be7-7ce16b38d91c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Continue Original Message Itinerary?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ae16f327-10e7-4359-90e2-eebbb997bdf8</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>ca9ae6be-e05b-4740-bd3e-37503ca64cbc</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start AdvanceItineraryBatch</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>90653528-4d46-4475-af7a-2c976662d8f0</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>InboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>cf0b2ad9-e4e9-4874-aac9-193efbe238e1</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>64393a50-8fc0-41d2-8abc-8b91ba883a83</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get IsLastMessage</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>56b2ed26-b44a-45d4-b539-9fb17680c232</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>IsLastMessage Property exists</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>3a57a1ef-b55d-4e6b-b0c1-458f8c14fdd7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set isLastMessageInBatch</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>acf8a884-2918-4695-98e7-be972ed3d9a3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>767a56c4-0936-4413-b2c5-bc9d93b7ff7b</ShapeID>      <ParentLink>ListenBranch_Statement</ParentLink>                <shapeText>Receive Convoy Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ListenBranchShape</shapeType>      <ShapeID>b22e0c4b-c30d-4676-b736-63a5d5e62f39</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>ListenBranch_2</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>92d5ca8a-8057-490f-bbdb-dffe062761f6</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>throw?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>8b29aa3f-48a9-4f3a-8a7b-41cd45f47fa3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>9c40dbe0-21b0-4400-8594-0082f37c10e0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Throw Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>3a671189-67ee-407b-88f2-3711e98c4d8a</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>bd12af70-675c-4879-9325-cd6783fa4332</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set timeoutOccurred</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DelayShape</shapeType>      <ShapeID>20b8af8c-e14d-4b49-b9ac-2b188ddd3734</ShapeID>      <ParentLink>ListenBranch_Statement</ParentLink>                <shapeText>Timeout</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>LongRunningTransactionShape</shapeType>      <ShapeID>f29c0ba8-5e02-48dc-9692-2eeccf37ad80</ShapeID>      <ParentLink>Scope_Transaction</ParentLink>                <shapeText>TxBatch</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>60ff56fc-0fbb-4fc3-ae3c-6717c1027625</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>timeoutOccurred</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>0b514ef2-3aa3-4d71-832c-3abea2b8fbbf</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Batch TimeoutException</shapeText>                      <ExceptionType>Microsoft.XLANGs.BaseTypes.TimeoutException</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>0b3f960a-f19c-4d41-a098-6b254e39106c</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Throw?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>0c65e538-1e56-466d-971c-0fe08f6f9df0</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ThrowShape</shapeType>      <ShapeID>56acb8aa-7644-4f12-a597-48361d327368</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Throw BatchTimeoutException</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6029cb75-bf85-4ee8-bfee-e4010bf31ec0</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>ae52abf8-105e-4c87-ba0e-ff73ef5dae9f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Enumerator</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>WhileShape</shapeType>      <ShapeID>b86aa8df-2dbe-4c60-b3df-7ebcad4fcf74</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Move to InputMessages</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>4428468b-8c4b-4791-a83b-5e9103176918</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Add to InputMessages</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>8cc0f8a7-3bb1-4b84-b3cb-43c6cc9db604</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Decide Itinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>c04ae6d8-115f-43f9-96fe-c735403ac9ed</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>From 1st Resolver</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>c390b4ad-b64d-4a2b-88ac-65188bbe7d39</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Output Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>cd767de1-2fee-4af1-a8b7-f996c473e53c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Output Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>d6860a21-0106-40a4-8b9c-82474dc0ad73</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>0e760c0a-6645-43ac-940d-189cb8efac5d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>From Inbound Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>7ad9a4e7-9e6c-4f3c-82d9-1cd6b9d1aa53</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Output Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>6af7e2e6-c556-45e4-a817-27cbafef2aa3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Output Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>22b22c68-2ddd-4aa6-b279-2e6245c3be1c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>5c5a0bde-c418-4e7a-9c0e-9377a540663f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Outbound Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>5e998783-bb96-450f-9eb2-2905cc229d65</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>newItineraryString</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>7590e856-ba26-4c2a-8738-25d47fab1a24</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>msgList</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>87256771-c749-4717-9bc8-94e909e5a218</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>isLastMessageInBatch</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>00f7d34d-1da5-4585-b273-5c07f9d5fbb2</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>sortedMsgs</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>3c00ecd7-91fd-431f-bea1-a515f958f4d5</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolution</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>7d59eaa9-140f-4b60-b337-073f4ff06272</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>batchId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>LongRunningTransactionShape</shapeType>      <ShapeID>0258d68b-1f0a-4ee1-893d-46f531848a05</ShapeID>      <ParentLink>Scope_Transaction</ParentLink>                <shapeText>TxItinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>12d3e262-f0f4-44c5-af07-6c1b9178b2bc</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>fe0d0d70-2c30-4439-844e-cc8ac304eec0</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolutoin Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>0756573e-84b1-4ca4-ba93-c157ea569540</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>f01b675e-d6ea-4608-83c4-283680180a09</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>beaa2626-a355-41ba-8764-de5032d33aab</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>308a3ed9-395c-4589-934a-3c55e19203de</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'SendPipelineService'</ActionName><IsAtomic>0</IsAtomic><Line>684</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>707</Line><Position>255</Position><ShapeID>'e73d2df2-7f46-4cec-b9f8-4f0140c45b2c'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'TxItinerary'</ActionName><IsAtomic>0</IsAtomic><Line>715</Line><Position>13</Position><ShapeID>'1fac51c5-cec1-491f-bbb4-04e936232923'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>732</Line><Position>41</Position><ShapeID>'1d468c94-8080-41b8-99d0-6a42da94346c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>743</Line><Position>31</Position><ShapeID>'a3183035-9243-47fc-b78b-602cd99aab8f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>747</Line><Position>21</Position><ShapeID>'434f9c11-00ee-4920-a892-3bde09b016f7'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>750</Line><Position>26</Position><ShapeID>'3a9bfb93-b248-4f22-b224-bd5e37791905'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>754</Line><Position>39</Position><ShapeID>'7875dc61-8ec4-47bc-ad76-51cd5e85d8ec'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>764</Line><Position>21</Position><ShapeID>'6eeebd9b-00e6-43d9-a2d8-cb3c7d02d175'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>767</Line><Position>71</Position><ShapeID>'11791fe9-f969-4cff-a6ec-a61699966688'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>770</Line><Position>29</Position><ShapeID>'02c20274-afa3-43ac-93b2-ad7937b4ffbb'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'TxBatch'</ActionName><IsAtomic>0</IsAtomic><Line>773</Line><Position>21</Position><ShapeID>'3a5c2a6a-5bc3-47ce-9ebe-e20971b8c799'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>780</Line><Position>29</Position><ShapeID>'97920d87-3bf6-44ef-86f9-f27c3470fad7'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>784</Line><Position>33</Position><ShapeID>'48ae31de-02aa-4ce9-bc18-c14273606f16'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>786</Line><Position>43</Position><ShapeID>'767a56c4-0936-4413-b2c5-bc9d93b7ff7b'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>789</Line><Position>52</Position><ShapeID>'75fdb16f-c1b1-4c2c-b6f6-0aa0a08057b4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>791</Line><Position>41</Position><ShapeID>'7dce68d9-93b8-4e4f-9be7-7ce16b38d91c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>794</Line><Position>91</Position><ShapeID>'ca9ae6be-e05b-4740-bd3e-37503ca64cbc'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>797</Line><Position>41</Position><ShapeID>'64393a50-8fc0-41d2-8abc-8b91ba883a83'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>800</Line><Position>66</Position><ShapeID>'3a57a1ef-b55d-4e6b-b0c1-458f8c14fdd7'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>807</Line><Position>41</Position><ShapeID>'92d5ca8a-8057-490f-bbdb-dffe062761f6'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>810</Line><Position>45</Position><ShapeID>'9c40dbe0-21b0-4400-8594-0082f37c10e0'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>815</Line><Position>61</Position><ShapeID>'bd12af70-675c-4879-9325-cd6783fa4332'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>824</Line><Position>29</Position><ShapeID>'0b514ef2-3aa3-4d71-832c-3abea2b8fbbf'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>827</Line><Position>33</Position><ShapeID>'0b3f960a-f19c-4d41-a098-6b254e39106c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>830</Line><Position>37</Position><ShapeID>'56acb8aa-7644-4f12-a597-48361d327368'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>836</Line><Position>33</Position><ShapeID>'ae52abf8-105e-4c87-ba0e-ff73ef5dae9f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>839</Line><Position>21</Position><ShapeID>'b86aa8df-2dbe-4c60-b3df-7ebcad4fcf74'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>842</Line><Position>42</Position><ShapeID>'4428468b-8c4b-4791-a83b-5e9103176918'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>845</Line><Position>21</Position><ShapeID>'8cc0f8a7-3bb1-4b84-b3cb-43c6cc9db604'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>848</Line><Position>25</Position><ShapeID>'c390b4ad-b64d-4a2b-88ac-65188bbe7d39'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>863</Line><Position>25</Position><ShapeID>'7ad9a4e7-9e6c-4f3c-82d9-1cd6b9d1aa53'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>875</Line><Position>21</Position><ShapeID>'5c5a0bde-c418-4e7a-9c0e-9377a540663f'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>880</Line><Position>21</Position><ShapeID>'12d3e262-f0f4-44c5-af07-6c1b9178b2bc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>883</Line><Position>25</Position><ShapeID>'fe0d0d70-2c30-4439-844e-cc8ac304eec0'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>899</Line><Position>25</Position><ShapeID>'beaa2626-a355-41ba-8764-de5032d33aab'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>901</Line><Position>25</Position><ShapeID>'308a3ed9-395c-4589-934a-3c55e19203de'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='264c431c-153b-449e-9d78-6d14b1b9d97a' LowerBound='1.1' HigherBound='233.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='50e4ce85-6380-4ca8-a199-d65b4ac32fde' ParentLink='Module_ServiceDeclaration' LowerBound='8.1' HigherBound='232.1'>
            <om:Property Name='InitializedTransactionType' Value='True' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SendPipelineService' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='5e7f7fc1-6ed4-4975-9967-1ff11505a1f4' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='23.1' HigherBound='24.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.ResolverCollection' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='resolvers' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='eee4233b-d577-435b-91e4-da5a142a76e2' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='24.1' HigherBound='25.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='ESB.Extensions.Resolution.ResolutionDictionary' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='resolutionDictionary' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5715a7e2-919b-4d52-87a3-7cbaecf49ef3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='25.1' HigherBound='26.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='resolver' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='2586ae9d-09b2-44b9-8843-d276d72743cd' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='26.1' HigherBound='27.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='itineraryStep' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='cc718b09-a535-49e6-88a1-badd33820a9b' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='27.1' HigherBound='28.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='itinerary' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='d8acae6c-640a-42fd-aaf2-a6344a106ac7' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='28.1' HigherBound='29.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='Microsoft.XLANGs.Pipeline.SendPipelineInputMessages' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='inputMessages' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='LongRunningTransaction' OID='f33736ab-0edf-4453-b306-b9a8df261629' ParentLink='ServiceDeclaration_Transaction' LowerBound='9.21' HigherBound='9.65'>
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TxMain' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='CorrelationDeclaration' OID='4349c978-43dd-4b8f-a07f-bdaf5702cd8d' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='18.1' HigherBound='19.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.ItineraryAdvanceCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ItineraryAdvanceCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='0001b832-89d4-4d38-a534-504d918478af' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='200.74' HigherBound='200.103'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='5c5a0bde-c418-4e7a-9c0e-9377a540663f' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_3' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='CorrelationDeclaration' OID='ba6156e6-bf6d-42d8-88f0-9db61e8f3eb2' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='19.1' HigherBound='20.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.ConvoyCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ConvoyCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='56d959e0-ed08-44c0-97dc-cf1a3fb0fd45' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='111.100' HigherBound='111.108'>
                    <om:Property Name='Initializes' Value='False' />
                    <om:Property Name='Ref' Value='767a56c4-0936-4413-b2c5-bc9d93b7ff7b' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_2' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='StatementRef' OID='e9302dbf-8d7c-4661-b359-ac8e1a80aa16' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='32.312' HigherBound='32.331'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='e73d2df2-7f46-4cec-b9f8-4f0140c45b2c' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_1' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='36f16ab5-d603-4eb2-b0f3-5b193c7fe537' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='20.1' HigherBound='21.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='ec8cae46-6d03-4799-9608-3bad4bfad297' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='21.1' HigherBound='22.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='InboundMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='ae484bb3-3ab0-4c41-b8e4-8bf6023007ff' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='22.1' HigherBound='23.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='OutboundMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='04dc2719-d125-4135-abfb-eecca4049bc7' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='e73d2df2-7f46-4cec-b9f8-4f0140c45b2c' ParentLink='ServiceBody_Statement' LowerBound='31.1' HigherBound='39.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='DocumentProcessing' />
                    <om:Property Name='MessageName' Value='InboundMessage' />
                    <om:Property Name='OperationName' Value='XmlDocument' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive InboundMessage' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DNFPredicate' OID='66bb29b6-4e46-4ea1-8def-29b8be9a4ffc' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                        <om:Property Name='RHS' Value='&quot;SendPipelineService&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='23d9d983-a85c-4bc8-8afe-c8afcefb7871' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                        <om:Property Name='RHS' Value='&quot;Pending&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='3e55be0f-cc34-4124-823d-8408fb77e701' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType' />
                        <om:Property Name='RHS' Value='&quot;Orchestration&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='1fac51c5-cec1-491f-bbb4-04e936232923' ParentLink='ServiceBody_Statement' LowerBound='39.1' HigherBound='230.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Itinerary and Resolution' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='VariableAssignment' OID='1d468c94-8080-41b8-99d0-6a42da94346c' ParentLink='ComplexStatement_Statement' LowerBound='55.1' HigherBound='66.1'>
                        <om:Property Name='Expression' Value=' // Retrieve the current itinerary step&#xD;&#xA;itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(InboundMessage);&#xD;&#xA;itineraryStep.ItineraryStep = itinerary.Itinerary.GetItineraryStep(InboundMessage);&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceName: &quot; + itineraryStep.ItineraryStep.ServiceName);&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceType: &quot; + System.Convert.ToString(itineraryStep.ItineraryStep.ServiceType));&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;Itinerary: &quot; + itineraryStep.ItineraryStep.Itinerary.ToString());&#xD;&#xA;&#xD;&#xA;// Current BatchId&#xD;&#xA;batchId = InboundMessage(ESB.Extensions.Schemas.BatchId);' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Current Itinerary' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='a3183035-9243-47fc-b78b-602cd99aab8f' ParentLink='ComplexStatement_Statement' LowerBound='66.1' HigherBound='71.1'>
                        <om:Property Name='Expression' Value='//Retrieve the Resolvers associated with the itinerary&#xD;&#xA;resolvers = itineraryStep.ItineraryStep.ResolverCollection;&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;    Resolver Collection Count: &quot; + System.Convert.ToString(resolvers.Count));' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Retrieve Resolvers' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Decision' OID='434f9c11-00ee-4920-a892-3bde09b016f7' ParentLink='ComplexStatement_Statement' LowerBound='71.1' HigherBound='77.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Resolvers returned' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='a3680a86-c7c6-4dde-9ae1-de01fb09998a' ParentLink='ReallyComplexStatement_Branch' LowerBound='72.21' HigherBound='77.1'>
                            <om:Property Name='Expression' Value='resolvers.Count &lt;= 0' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='NO' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='3a9bfb93-b248-4f22-b224-bd5e37791905' ParentLink='ComplexStatement_Statement' LowerBound='74.1' HigherBound='76.1'>
                                <om:Property Name='Expression' Value=' throw new System.ApplicationException(&quot;No resolvers associated with this service config.&quot;);' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Throw Exception' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='1aef40a4-1833-4462-b6ea-c2d6424e124c' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='7875dc61-8ec4-47bc-ad76-51cd5e85d8ec' ParentLink='ComplexStatement_Statement' LowerBound='77.1' HigherBound='88.1'>
                        <om:Property Name='Expression' Value=' // Move to retrieve first resolver&#xD;&#xA;resolvers.MoveNext();&#xD;&#xA;resolver = resolvers.Current;&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;        Resolver : &quot; + resolver);&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;        Resolution structure&quot;);&#xD;&#xA;&#xD;&#xA;// Pass the resolver configuration to the Resolver mgr for resolution&#xD;&#xA;resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(InboundMessage, resolver);&#xD;&#xA;resolution = (ESB.Extensions.Resolutions.SendPipelineServiceResolution) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.SendPipelineServiceResolution&quot;);&#xD;&#xA;' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Resolve' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Decision' OID='6eeebd9b-00e6-43d9-a2d8-cb3c7d02d175' ParentLink='ComplexStatement_Statement' LowerBound='88.1' HigherBound='94.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Continue Original Message Itinerary?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='4809cfb9-cee1-4c63-948f-c9299f8cef65' ParentLink='ReallyComplexStatement_Branch' LowerBound='89.21' HigherBound='94.1'>
                            <om:Property Name='Expression' Value='!System.String.IsNullOrEmpty(resolutionDictionary.GetString(&quot;Microsoft.Practices.ESB.Itinerary.AsXml&quot;)) &amp;&amp; itinerary.Itinerary.HasNextService()' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='YES' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='Exec' OID='11791fe9-f969-4cff-a6ec-a61699966688' ParentLink='ComplexStatement_Statement' LowerBound='91.1' HigherBound='93.1'>
                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.AdvanceItinerary' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Start AdvanceItineraryBatch' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Parameter' OID='d5bc06ed-295d-42fb-b874-37292faae635' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='InboundMessage' />
                                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='c2b52e85-6b3a-47ea-a420-de7ff5237d84' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='02c20274-afa3-43ac-93b2-ad7937b4ffbb' ParentLink='ComplexStatement_Statement' LowerBound='94.1' HigherBound='97.1'>
                        <om:Property Name='Expression' Value='msgList = new ESB.Extensions.Components.XLANGMessageList();&#xD;&#xA;msgList.Add(InboundMessage);&#xD;&#xA;' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='AddMessageToAggregatorList' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Scope' OID='3a5c2a6a-5bc3-47ce-9ebe-e20971b8c799' ParentLink='ComplexStatement_Statement' LowerBound='97.1' HigherBound='160.1'>
                        <om:Property Name='InitializedTransactionType' Value='True' />
                        <om:Property Name='IsSynchronized' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Batch Scope' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='While' OID='97920d87-3bf6-44ef-86f9-f27c3470fad7' ParentLink='ComplexStatement_Statement' LowerBound='104.1' HigherBound='145.1'>
                            <om:Property Name='Expression' Value='!(timeoutOccurred || isLastMessageInBatch || ((resolution.MaxMessageCount &gt; 0) &amp;&amp; (msgList.Count &gt;= resolution.MaxMessageCount)))' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Loop Inbound Messages' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Listen' OID='48ae31de-02aa-4ce9-bc18-c14273606f16' ParentLink='ComplexStatement_Statement' LowerBound='107.1' HigherBound='144.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Listen Messages or Timeout' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='ListenBranch' OID='fa084a99-a60c-494e-b5e6-84791de3d57b' ParentLink='ReallyComplexStatement_Branch' LowerBound='107.1' HigherBound='107.1'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='ListenBranch_1' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='VariableAssignment' OID='75fdb16f-c1b1-4c2c-b6f6-0aa0a08057b4' ParentLink='ComplexStatement_Statement' LowerBound='113.1' HigherBound='115.1'>
                                        <om:Property Name='Expression' Value='msgList.Add(InboundMessage);&#xD;&#xA;' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='AddMessageToAggregatorList' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Decision' OID='7dce68d9-93b8-4e4f-9be7-7ce16b38d91c' ParentLink='ComplexStatement_Statement' LowerBound='115.1' HigherBound='121.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Continue Original Message Itinerary?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='ae16f327-10e7-4359-90e2-eebbb997bdf8' ParentLink='ReallyComplexStatement_Branch' LowerBound='116.41' HigherBound='121.1'>
                                            <om:Property Name='Expression' Value='!System.String.IsNullOrEmpty(resolutionDictionary.GetString(&quot;Microsoft.Practices.ESB.Itinerary.AsXml&quot;))' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='YES' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='Exec' OID='ca9ae6be-e05b-4740-bd3e-37503ca64cbc' ParentLink='ComplexStatement_Statement' LowerBound='118.1' HigherBound='120.1'>
                                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.AdvanceItinerary' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Start AdvanceItineraryBatch' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='Parameter' OID='90653528-4d46-4475-af7a-2c976662d8f0' ParentLink='InvokeStatement_Parameter'>
                                                    <om:Property Name='Direction' Value='In' />
                                                    <om:Property Name='Name' Value='InboundMessage' />
                                                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='cf0b2ad9-e4e9-4874-aac9-193efbe238e1' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Decision' OID='64393a50-8fc0-41d2-8abc-8b91ba883a83' ParentLink='ComplexStatement_Statement' LowerBound='121.1' HigherBound='127.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Get IsLastMessage' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='56b2ed26-b44a-45d4-b539-9fb17680c232' ParentLink='ReallyComplexStatement_Branch' LowerBound='122.41' HigherBound='127.1'>
                                            <om:Property Name='Expression' Value='(ESB.Extensions.Schemas.IsLastMessageInBatch exists InboundMessage)' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='IsLastMessage Property exists' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='VariableAssignment' OID='3a57a1ef-b55d-4e6b-b0c1-458f8c14fdd7' ParentLink='ComplexStatement_Statement' LowerBound='124.1' HigherBound='126.1'>
                                                <om:Property Name='Expression' Value='isLastMessageInBatch = System.Convert.ToBoolean(InboundMessage(ESB.Extensions.Schemas.IsLastMessageInBatch));' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Set isLastMessageInBatch' />
                                                <om:Property Name='Signal' Value='True' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='acf8a884-2918-4695-98e7-be972ed3d9a3' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Receive' OID='767a56c4-0936-4413-b2c5-bc9d93b7ff7b' ParentLink='ListenBranch_Statement' LowerBound='110.1' HigherBound='111.109'>
                                        <om:Property Name='Activate' Value='False' />
                                        <om:Property Name='PortName' Value='DocumentProcessing' />
                                        <om:Property Name='MessageName' Value='InboundMessage' />
                                        <om:Property Name='OperationName' Value='XmlDocument' />
                                        <om:Property Name='OperationMessageName' Value='Request' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Receive Convoy Message' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='ListenBranch' OID='b22e0c4b-c30d-4676-b736-63a5d5e62f39' ParentLink='ReallyComplexStatement_Branch' LowerBound='107.1' HigherBound='107.1'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='ListenBranch_2' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Decision' OID='92d5ca8a-8057-490f-bbdb-dffe062761f6' ParentLink='ComplexStatement_Statement' LowerBound='131.1' HigherBound='142.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='throw?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='8b29aa3f-48a9-4f3a-8a7b-41cd45f47fa3' ParentLink='ReallyComplexStatement_Branch' LowerBound='132.41' HigherBound='137.1'>
                                            <om:Property Name='Expression' Value='resolution.MessageTimeout.ThrowExceptionOnTimeout' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='YES' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='9c40dbe0-21b0-4400-8594-0082f37c10e0' ParentLink='ComplexStatement_Statement' LowerBound='134.1' HigherBound='136.1'>
                                                <om:Property Name='Expression' Value='throw new System.ApplicationException(&quot;Not all messages to be aggregated were received in the specified timeout window.&quot;);' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Throw Exception' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='3a671189-67ee-407b-88f2-3711e98c4d8a' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='bd12af70-675c-4879-9325-cd6783fa4332' ParentLink='ComplexStatement_Statement' LowerBound='139.1' HigherBound='141.1'>
                                                <om:Property Name='Expression' Value='timeoutOccurred = true;' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Set timeoutOccurred' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Delay' OID='20b8af8c-e14d-4b49-b9ac-2b188ddd3734' ParentLink='ListenBranch_Statement' LowerBound='128.1' HigherBound='129.83'>
                                        <om:Property Name='Timeout' Value='resolution.MessageTimeout.ToTimeSpan()' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Timeout' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='LongRunningTransaction' OID='f29c0ba8-5e02-48dc-9692-2eeccf37ad80' ParentLink='Scope_Transaction' LowerBound='98.26' HigherBound='98.103'>
                            <om:Property Name='TimeoutExpression' Value='resolution.BatchTimeout.ToTimeSpan()' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='TxBatch' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='VariableDeclaration' OID='60ff56fc-0fbb-4fc3-ae3c-6717c1027625' ParentLink='Scope_VariableDeclaration' LowerBound='100.1' HigherBound='101.1'>
                            <om:Property Name='InitialValue' Value='false' />
                            <om:Property Name='UseDefaultConstructor' Value='False' />
                            <om:Property Name='Type' Value='System.Boolean' />
                            <om:Property Name='ParamDirection' Value='In' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='timeoutOccurred' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Catch' OID='0b514ef2-3aa3-4d71-832c-3abea2b8fbbf' ParentLink='Scope_Catch' LowerBound='148.1' HigherBound='158.1'>
                            <om:Property Name='ExceptionName' Value='exc' />
                            <om:Property Name='ExceptionType' Value='Microsoft.XLANGs.BaseTypes.TimeoutException' />
                            <om:Property Name='IsFaultMessage' Value='False' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Catch Batch TimeoutException' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Decision' OID='0b3f960a-f19c-4d41-a098-6b254e39106c' ParentLink='Catch_Statement' LowerBound='151.1' HigherBound='157.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Throw?' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='DecisionBranch' OID='0c65e538-1e56-466d-971c-0fe08f6f9df0' ParentLink='ReallyComplexStatement_Branch' LowerBound='152.33' HigherBound='157.1'>
                                    <om:Property Name='Expression' Value='resolution.BatchTimeout.ThrowExceptionOnTimeout' />
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='YES' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Throw' OID='56acb8aa-7644-4f12-a597-48361d327368' ParentLink='ComplexStatement_Statement' LowerBound='154.1' HigherBound='156.1'>
                                        <om:Property Name='ThrownReference' Value='exc' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Throw BatchTimeoutException' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='DecisionBranch' OID='6029cb75-bf85-4ee8-bfee-e4010bf31ec0' ParentLink='ReallyComplexStatement_Branch'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Else' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='ae52abf8-105e-4c87-ba0e-ff73ef5dae9f' ParentLink='ComplexStatement_Statement' LowerBound='160.1' HigherBound='163.1'>
                        <om:Property Name='Expression' Value='msgList.Sort(resolution.XLANGMessageComparerInstance);&#xD;&#xA;sortedMsgs = msgList.GetXLANGMessageEnumerator();' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Enumerator' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='While' OID='b86aa8df-2dbe-4c60-b3df-7ebcad4fcf74' ParentLink='ComplexStatement_Statement' LowerBound='163.1' HigherBound='169.1'>
                        <om:Property Name='Expression' Value='sortedMsgs.MoveNext()' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Move to InputMessages' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='4428468b-8c4b-4791-a83b-5e9103176918' ParentLink='ComplexStatement_Statement' LowerBound='166.1' HigherBound='168.1'>
                            <om:Property Name='Expression' Value='inputMessages.Add(sortedMsgs.Current);' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Add to InputMessages' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Decision' OID='8cc0f8a7-3bb1-4b84-b3cb-43c6cc9db604' ParentLink='ComplexStatement_Statement' LowerBound='169.1' HigherBound='199.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Decide Itinerary' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='c04ae6d8-115f-43f9-96fe-c735403ac9ed' ParentLink='ReallyComplexStatement_Branch' LowerBound='170.21' HigherBound='185.1'>
                            <om:Property Name='Expression' Value='!System.String.IsNullOrEmpty(resolutionDictionary.GetString(&quot;Microsoft.Practices.ESB.Itinerary.AsXml&quot;))' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='From 1st Resolver' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Construct' OID='c390b4ad-b64d-4a2b-88ac-65188bbe7d39' ParentLink='ComplexStatement_Statement' LowerBound='172.1' HigherBound='184.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct Output Message' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageAssignment' OID='cd767de1-2fee-4af1-a8b7-f996c473e53c' ParentLink='ComplexStatement_Statement' LowerBound='175.1' HigherBound='183.1'>
                                    <om:Property Name='Expression' Value='OutboundMessage = null;&#xD;&#xA;Microsoft.XLANGs.Pipeline.XLANGPipelineManager.ExecuteSendPipeline(resolution.SendPipelineType, inputMessages, OutboundMessage);&#xD;&#xA;OutboundMessage(ESB.Extensions.Schemas.BatchId) = batchId;&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;Resolving new itinerary from 1st resolver.&quot;);&#xD;&#xA;newItineraryString = resolutionDictionary.GetString(&quot;Microsoft.Practices.ESB.Itinerary.AsXml&quot;);&#xD;&#xA;ESB.Extensions.Components.ItineraryHelper.Initialize(newItineraryString, OutboundMessage);' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Get Output Message' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageRef' OID='d6860a21-0106-40a4-8b9c-82474dc0ad73' ParentLink='Construct_MessageRef' LowerBound='173.35' HigherBound='173.50'>
                                    <om:Property Name='Ref' Value='OutboundMessage' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='0e760c0a-6645-43ac-940d-189cb8efac5d' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='From Inbound Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Construct' OID='7ad9a4e7-9e6c-4f3c-82d9-1cd6b9d1aa53' ParentLink='ComplexStatement_Statement' LowerBound='187.1' HigherBound='198.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct Output Message' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageAssignment' OID='6af7e2e6-c556-45e4-a817-27cbafef2aa3' ParentLink='ComplexStatement_Statement' LowerBound='190.1' HigherBound='197.1'>
                                    <om:Property Name='Expression' Value='OutboundMessage = null;&#xD;&#xA;Microsoft.XLANGs.Pipeline.XLANGPipelineManager.ExecuteSendPipeline(resolution.SendPipelineType, inputMessages, OutboundMessage);&#xD;&#xA;OutboundMessage(ESB.Extensions.Schemas.BatchId) = batchId;&#xD;&#xA;&#xD;&#xA;itinerary.Itinerary.Write(OutboundMessage);&#xD;&#xA;Microsoft.Practices.ESB.Itinerary.ItineraryHelper.AdvanceItinerary(OutboundMessage);&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Get Output Message' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageRef' OID='22b22c68-2ddd-4aa6-b279-2e6245c3be1c' ParentLink='Construct_MessageRef' LowerBound='188.35' HigherBound='188.50'>
                                    <om:Property Name='Ref' Value='OutboundMessage' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Send' OID='5c5a0bde-c418-4e7a-9c0e-9377a540663f' ParentLink='ComplexStatement_Statement' LowerBound='199.1' HigherBound='201.1'>
                        <om:Property Name='PortName' Value='PublishingDirect' />
                        <om:Property Name='MessageName' Value='OutboundMessage' />
                        <om:Property Name='OperationName' Value='XmlDocument' />
                        <om:Property Name='OperationMessageName' Value='Request' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Send Outbound Message' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='5e998783-bb96-450f-9eb2-2905cc229d65' ParentLink='Scope_VariableDeclaration' LowerBound='42.1' HigherBound='43.1'>
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.String' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='newItineraryString' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='7590e856-ba26-4c2a-8738-25d47fab1a24' ParentLink='Scope_VariableDeclaration' LowerBound='43.1' HigherBound='44.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='ESB.Extensions.Components.XLANGMessageList' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='msgList' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='87256771-c749-4717-9bc8-94e909e5a218' ParentLink='Scope_VariableDeclaration' LowerBound='44.1' HigherBound='45.1'>
                        <om:Property Name='InitialValue' Value='false' />
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.Boolean' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='isLastMessageInBatch' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='00f7d34d-1da5-4585-b273-5c07f9d5fbb2' ParentLink='Scope_VariableDeclaration' LowerBound='45.1' HigherBound='46.1'>
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='ESB.Extensions.Components.XLANGMessageEnumerator' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='sortedMsgs' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='3c00ecd7-91fd-431f-bea1-a515f958f4d5' ParentLink='Scope_VariableDeclaration' LowerBound='46.1' HigherBound='47.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='ESB.Extensions.Resolutions.SendPipelineServiceResolution' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolution' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='7d59eaa9-140f-4b60-b337-073f4ff06272' ParentLink='Scope_VariableDeclaration' LowerBound='47.1' HigherBound='48.1'>
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.String' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='batchId' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='LongRunningTransaction' OID='0258d68b-1f0a-4ee1-893d-46f531848a05' ParentLink='Scope_Transaction' LowerBound='40.18' HigherBound='40.54'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='TxItinerary' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Catch' OID='12d3e262-f0f4-44c5-af07-6c1b9178b2bc' ParentLink='Scope_Catch' LowerBound='204.1' HigherBound='228.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='fe0d0d70-2c30-4439-844e-cc8ac304eec0' ParentLink='Catch_Statement' LowerBound='207.1' HigherBound='223.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolutoin Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='0756573e-84b1-4ca4-ba93-c157ea569540' ParentLink='Construct_MessageRef' LowerBound='208.35' HigherBound='208.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='f01b675e-d6ea-4608-83c4-283680180a09' ParentLink='ComplexStatement_Statement' LowerBound='210.1' HigherBound='222.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, InboundMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='beaa2626-a355-41ba-8764-de5032d33aab' ParentLink='Catch_Statement' LowerBound='223.1' HigherBound='225.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='308a3ed9-395c-4589-934a-3c55e19203de' ParentLink='Catch_Statement' LowerBound='225.1' HigherBound='227.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='c87a22ad-2990-44ce-97c1-0a100d4ad26f' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='11.1' HigherBound='14.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='True' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='bb42c424-bea6-4b67-9209-9a52fdfeafd1' ParentLink='PortDeclaration_CLRAttribute' LowerBound='11.1' HigherBound='12.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='0b3f232f-41ac-4ad7-a444-d0ec4f08f487' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='14.1' HigherBound='16.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PublishingDirect' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='86316fde-f3c4-4dbc-8912-f9611ff8cf42' ParentLink='PortDeclaration_CLRAttribute' LowerBound='14.1' HigherBound='15.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='30d551c4-9ae9-405a-a2b9-913c551fde09' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='16.1' HigherBound='18.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='70' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='b234c8d0-2fb9-42cd-8d82-49405499b990' ParentLink='PortDeclaration_CLRAttribute' LowerBound='16.1' HigherBound='17.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='CorrelationType' OID='5627c345-2036-4aa6-965a-e31498cde2f0' ParentLink='Module_CorrelationType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ConvoyCT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PropertyRef' OID='622cc20b-1f35-4202-9ca1-11e313d77d3e' ParentLink='CorrelationType_PropertyRef' LowerBound='6.9' HigherBound='6.39'>
                <om:Property Name='Ref' Value='ESB.Extensions.Schemas.BatchId' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='88157b40-d7bc-4f2e-bc55-2aca06273252' ParentLink='CorrelationType_PropertyRef' LowerBound='6.41' HigherBound='6.94'>
                <om:Property Name='Ref' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='637702ef-989a-487a-8f13-c1dd11bd6017' ParentLink='CorrelationType_PropertyRef' LowerBound='6.96' HigherBound='6.150'>
                <om:Property Name='Ref' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __SendPipelineService_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __SendPipelineService_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "SendPipelineService")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                SendPipelineService __svc__ = (SendPipelineService)_service;
                __SendPipelineService_root_0 __ctx0__ = (__SendPipelineService_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                if (__svc__.DocumentProcessing != null)
                {
                    __svc__.DocumentProcessing.Close(this, null);
                    __svc__.DocumentProcessing = null;
                }
                if (__svc__.PublishingDirect != null)
                {
                    __svc__.PublishingDirect.Close(this, null);
                    __svc__.PublishingDirect = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper1;
        }


        [System.SerializableAttribute]
        public class __SendPipelineService_1 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __SendPipelineService_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "SendPipelineService")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                SendPipelineService __svc__ = (SendPipelineService)_service;
                __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)(__svc__._stateMgrs[1]);
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolver = null;
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                if (__ctx1__ != null && __ctx1__.__OutboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__resolutionDictionary = null;
                if (__ctx1__ != null)
                    __ctx1__.__inputMessages = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolver = null;
                if (__ctx1__ != null)
                    __ctx1__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__resolvers = null;
                if (__ctx1__ != null)
                    __ctx1__.__itineraryStep = null;
                if (__ctx1__ != null && __ctx1__.__ConvoyCS != null)
                    __ctx1__.__ConvoyCS = null;
                if (__ctx2__ != null && __ctx2__.__OutboundMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__OutboundMessage);
                    __ctx2__.__OutboundMessage = null;
                }
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__inputMessages = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("InboundMessage")]
            public __messagetype_System_Xml_XmlDocument __InboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("OutboundMessage")]
            public __messagetype_System_Xml_XmlDocument __OutboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ItineraryAdvanceCS")]
            internal Microsoft.XLANGs.Core.Correlation __ItineraryAdvanceCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ConvoyCS")]
            internal Microsoft.XLANGs.Core.Correlation __ConvoyCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolvers")]
            internal Microsoft.Practices.ESB.Itinerary.ResolverCollection __resolvers;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolver")]
            internal System.String __resolver;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryStep")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper __itineraryStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("inputMessages")]
            internal Microsoft.XLANGs.Pipeline.SendPipelineInputMessages __inputMessages;
        }


        [System.SerializableAttribute]
        public class __TxItinerary_2 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __TxItinerary_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "TxItinerary")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[5];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                SendPipelineService __svc__ = (SendPipelineService)_service;
                __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)(__svc__._stateMgrs[1]);
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);
                __TxBatch_3 __ctx3__ = (__TxBatch_3)(__svc__._stateMgrs[3]);

                __ctx1__.__itinerary = __ctx2__.__itinerary;
                __ctx1__.__itineraryStep = __ctx2__.__itineraryStep;
                __ctx1__.__resolvers = __ctx2__.__resolvers;
                __ctx1__.__resolver = __ctx2__.__resolver;
                __ctx1__.__resolutionDictionary = __ctx2__.__resolutionDictionary;
                __ctx1__.__inputMessages = __ctx2__.__inputMessages;
                if (__ctx1__.__OutboundMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                __ctx1__.__OutboundMessage = __ctx2__.__OutboundMessage;
                if (__ctx2__.__OutboundMessage != null)
                    __ctx1__.RefMessage(__ctx1__.__OutboundMessage);
                if (__ctx1__.__FaultMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                __ctx1__.__FaultMessage = __ctx2__.__FaultMessage;
                if (__ctx2__.__FaultMessage != null)
                    __ctx1__.RefMessage(__ctx1__.__FaultMessage);
                if (__ctx2__ != null)
                    __ctx2__.__sortedMsgs = null;
                if (__ctx3__ != null && __ctx3__.__InboundMessage != null)
                {
                    __ctx3__.UnrefMessage(__ctx3__.__InboundMessage);
                    __ctx3__.__InboundMessage = null;
                }
                if (__ctx3__ != null)
                    __ctx3__.__msgList = null;
                if (__ctx3__ != null)
                    __ctx3__.__resolutionDictionary = null;
                if (__ctx2__ != null)
                    __ctx2__.__newItineraryString = null;
                if (__ctx2__ != null)
                    __ctx2__.__msgList = null;
                if (__ctx2__ != null)
                    __ctx2__.__batchId = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolution = null;
                if (__ctx1__ != null && __ctx1__.__ItineraryAdvanceCS != null)
                    __ctx1__.__ItineraryAdvanceCS = null;
                if (__ctx3__ != null)
                    __ctx3__.__resolution = null;
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("OutboundMessage")]
            public __messagetype_System_Xml_XmlDocument __OutboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolvers")]
            internal Microsoft.Practices.ESB.Itinerary.ResolverCollection __resolvers;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolver")]
            internal System.String __resolver;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryStep")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper __itineraryStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("inputMessages")]
            internal Microsoft.XLANGs.Pipeline.SendPipelineInputMessages __inputMessages;
            [Microsoft.XLANGs.Core.UserVariableAttribute("newItineraryString")]
            internal System.String __newItineraryString;
            [Microsoft.XLANGs.Core.UserVariableAttribute("msgList")]
            internal ESB.Extensions.Components.XLANGMessageList __msgList;
            [Microsoft.XLANGs.Core.UserVariableAttribute("isLastMessageInBatch")]
            internal System.Boolean __isLastMessageInBatch;
            [Microsoft.XLANGs.Core.UserVariableAttribute("sortedMsgs")]
            internal ESB.Extensions.Components.XLANGMessageEnumerator __sortedMsgs;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolution")]
            internal ESB.Extensions.Resolutions.SendPipelineServiceResolution __resolution;
            [Microsoft.XLANGs.Core.UserVariableAttribute("batchId")]
            internal System.String __batchId;
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class __TxBatch_3 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __TxBatch_3(Microsoft.XLANGs.Core.Service svc, System.DateTime timeout)
                : base(svc, "TxBatch", timeout)
            {
            }

            public override int Index { get { return 3; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[3]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[3]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is Microsoft.XLANGs.BaseTypes.TimeoutException))
                    {
                        __seg__ = _service._segments[4];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                SendPipelineService __svc__ = (SendPipelineService)_service;
                __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)(__svc__._stateMgrs[1]);
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);
                __TxBatch_3 __ctx3__ = (__TxBatch_3)(__svc__._stateMgrs[3]);

                if (__ctx1__.__InboundMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                __ctx1__.__InboundMessage = __ctx3__.__InboundMessage;
                if (__ctx3__.__InboundMessage != null)
                    __ctx1__.RefMessage(__ctx1__.__InboundMessage);
                __ctx2__.__msgList = __ctx3__.__msgList;
                __ctx2__.__resolutionDictionary = __ctx3__.__resolutionDictionary;
                __ctx2__.__isLastMessageInBatch = __ctx3__.__isLastMessageInBatch;
                __ctx2__.__resolution = __ctx3__.__resolution;
                if (__ctx3__ != null)
                    __ctx3__.__exc_0 = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("InboundMessage")]
            public __messagetype_System_Xml_XmlDocument __InboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("msgList")]
            internal ESB.Extensions.Components.XLANGMessageList __msgList;
            [Microsoft.XLANGs.Core.UserVariableAttribute("isLastMessageInBatch")]
            internal System.Boolean __isLastMessageInBatch;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolution")]
            internal ESB.Extensions.Resolutions.SendPipelineServiceResolution __resolution;
            [Microsoft.XLANGs.Core.UserVariableAttribute("timeoutOccurred")]
            internal System.Boolean __timeoutOccurred;
            internal object __exv__;
            internal Microsoft.XLANGs.BaseTypes.TimeoutException __exc_0
            {
                get { return (Microsoft.XLANGs.BaseTypes.TimeoutException)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = new Microsoft.XLANGs.Core.CorrelationType[] { new ItineraryAdvanceCT(), new ConvoyCT() };
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return new object[] {
                    new Microsoft.XLANGs.Core.CorrelationType[] { _correlationTypes[1] }
                };
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.OrderedDeliveryAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentProcessing")]
        internal XmlDocumentPortType DocumentProcessing;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("PublishingDirect")]
        internal XmlDocumentPortType PublishingDirect;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType();

        sealed private class PredicateSet0_0 : Microsoft.XLANGs.Core.PredicateGroup
        {
            public PredicateSet0_0() : base(3)
            {
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "SendPipelineService"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Pending"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Orchestration"));
            }
        }


        private static Microsoft.XLANGs.Core.PredicateGroup[] _predicates0 = {
            new PredicateSet0_0()
        };

        System.Guid __timeout0__;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(SendPipelineService).GetField("DocumentProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(SendPipelineService), "DocumentProcessing"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(SendPipelineService).GetField("PublishingDirect", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(SendPipelineService), "PublishingDirect"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(SendPipelineService).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(SendPipelineService), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                h[_portInfo[2].Name] = _portInfo[2];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(ESB.Extensions.Services.AdvanceItinerary)                    
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[2]{
                     new object[5] { _portInfo[0], 0, _predicates0 , 0, true }
                    , new object[5] { _portInfo[0], 0, null , 0, false }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "e73d2df2-7f46-4cec-b9f8-4f0140c45b2c", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "e73d2df2-7f46-4cec-b9f8-4f0140c45b2c", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "1fac51c5-cec1-491f-bbb4-04e936232923", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "1d468c94-8080-41b8-99d0-6a42da94346c", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "1d468c94-8080-41b8-99d0-6a42da94346c", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "a3183035-9243-47fc-b78b-602cd99aab8f", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "a3183035-9243-47fc-b78b-602cd99aab8f", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "434f9c11-00ee-4920-a892-3bde09b016f7", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "3a9bfb93-b248-4f22-b224-bd5e37791905", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "434f9c11-00ee-4920-a892-3bde09b016f7", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "7875dc61-8ec4-47bc-ad76-51cd5e85d8ec", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "7875dc61-8ec4-47bc-ad76-51cd5e85d8ec", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "6eeebd9b-00e6-43d9-a2d8-cb3c7d02d175", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "11791fe9-f969-4cff-a6ec-a61699966688", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "11791fe9-f969-4cff-a6ec-a61699966688", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "6eeebd9b-00e6-43d9-a2d8-cb3c7d02d175", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "02c20274-afa3-43ac-93b2-ad7937b4ffbb", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "02c20274-afa3-43ac-93b2-ad7937b4ffbb", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "3a5c2a6a-5bc3-47ce-9ebe-e20971b8c799", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "00000000-0000-0000-0000-000000000000", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "00000000-0000-0000-0000-000000000000", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "97920d87-3bf6-44ef-86f9-f27c3470fad7", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "48ae31de-02aa-4ce9-bc18-c14273606f16", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(27, "767a56c4-0936-4413-b2c5-bc9d93b7ff7b", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(28, "767a56c4-0936-4413-b2c5-bc9d93b7ff7b", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(29, "75fdb16f-c1b1-4c2c-b6f6-0aa0a08057b4", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(30, "75fdb16f-c1b1-4c2c-b6f6-0aa0a08057b4", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(31, "7dce68d9-93b8-4e4f-9be7-7ce16b38d91c", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(32, "ca9ae6be-e05b-4740-bd3e-37503ca64cbc", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(33, "ca9ae6be-e05b-4740-bd3e-37503ca64cbc", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(34, "7dce68d9-93b8-4e4f-9be7-7ce16b38d91c", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(35, "64393a50-8fc0-41d2-8abc-8b91ba883a83", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(36, "3a57a1ef-b55d-4e6b-b0c1-458f8c14fdd7", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(37, "3a57a1ef-b55d-4e6b-b0c1-458f8c14fdd7", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(38, "64393a50-8fc0-41d2-8abc-8b91ba883a83", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(39, "20b8af8c-e14d-4b49-b9ac-2b188ddd3734", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(40, "20b8af8c-e14d-4b49-b9ac-2b188ddd3734", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(41, "92d5ca8a-8057-490f-bbdb-dffe062761f6", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(42, "9c40dbe0-21b0-4400-8594-0082f37c10e0", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(43, "bd12af70-675c-4879-9325-cd6783fa4332", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(44, "bd12af70-675c-4879-9325-cd6783fa4332", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(45, "92d5ca8a-8057-490f-bbdb-dffe062761f6", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(46, "48ae31de-02aa-4ce9-bc18-c14273606f16", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(47, "97920d87-3bf6-44ef-86f9-f27c3470fad7", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(48, "0b514ef2-3aa3-4d71-832c-3abea2b8fbbf", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(49, "0b3f960a-f19c-4d41-a098-6b254e39106c", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(50, "56acb8aa-7644-4f12-a597-48361d327368", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(51, "0b3f960a-f19c-4d41-a098-6b254e39106c", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(52, "0b514ef2-3aa3-4d71-832c-3abea2b8fbbf", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(53, "3a5c2a6a-5bc3-47ce-9ebe-e20971b8c799", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(54, "ae52abf8-105e-4c87-ba0e-ff73ef5dae9f", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(55, "ae52abf8-105e-4c87-ba0e-ff73ef5dae9f", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(56, "b86aa8df-2dbe-4c60-b3df-7ebcad4fcf74", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(57, "4428468b-8c4b-4791-a83b-5e9103176918", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(58, "4428468b-8c4b-4791-a83b-5e9103176918", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(59, "b86aa8df-2dbe-4c60-b3df-7ebcad4fcf74", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(60, "8cc0f8a7-3bb1-4b84-b3cb-43c6cc9db604", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(61, "c390b4ad-b64d-4a2b-88ac-65188bbe7d39", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(62, "c390b4ad-b64d-4a2b-88ac-65188bbe7d39", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(63, "7ad9a4e7-9e6c-4f3c-82d9-1cd6b9d1aa53", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(64, "7ad9a4e7-9e6c-4f3c-82d9-1cd6b9d1aa53", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(65, "8cc0f8a7-3bb1-4b84-b3cb-43c6cc9db604", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(66, "5c5a0bde-c418-4e7a-9c0e-9377a540663f", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(67, "5c5a0bde-c418-4e7a-9c0e-9377a540663f", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(68, "12d3e262-f0f4-44c5-af07-6c1b9178b2bc", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(69, "fe0d0d70-2c30-4439-844e-cc8ac304eec0", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(70, "fe0d0d70-2c30-4439-844e-cc8ac304eec0", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(71, "beaa2626-a355-41ba-8764-de5032d33aab", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(72, "beaa2626-a355-41ba-8764-de5032d33aab", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(73, "308a3ed9-395c-4589-934a-3c55e19203de", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(74, "12d3e262-f0f4-44c5-af07-6c1b9178b2bc", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(75, "1fac51c5-cec1-491f-bbb4-04e936232923", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Listen),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Delay),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Delay),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Listen),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,3,3,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,2,2,2,2,2,2,4,4,4,75,3,3,3,3,};
        public static int[] __progressLocation2 = new int[] { 7,7,7,7,7,7,7,7,8,8,8,8,8,8,9,9,10,10,11,11,12,12,13,14,14,15,15,15,15,15,15,16,16,17,17,18,18,19,20,20,21,21,22,22,22,53,54,54,55,55,56,56,56,57,57,58,59,59,59,60,60,61,61,62,60,63,63,64,65,66,66,66,67,67,67,67,};
        public static int[] __progressLocation3 = new int[] { 25,25,25,25,25,26,26,26,27,28,29,29,30,31,31,32,32,33,33,34,35,35,36,36,37,38,26,39,40,41,41,42,42,41,43,43,44,45,26,26,46,47,47,47,47,47,47,};
        public static int[] __progressLocation4 = new int[] { 48,48,49,49,50,50,51,52,52,};
        public static int[] __progressLocation5 = new int[] { 68,68,69,69,70,71,71,71,72,73,73,74,74,};

        public static int[][] __progressLocations = new int[6] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3,__progressLocation4,__progressLocation5};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)_stateMgrs[1];
            __SendPipelineService_root_0 __ctx0__ = (__SendPipelineService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                DocumentProcessing = new XmlDocumentPortType(0, this);
                PublishingDirect = new XmlDocumentPortType(1, this);
                FaultProcessing = new FaultProcessingType(2, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], DocumentProcessing, this);
                __ctx0__.__subWrapper1 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[1], DocumentProcessing, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __SendPipelineService_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __SendPipelineService_root_0 __ctx0__ = (__SendPipelineService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__resolvers = default(Microsoft.Practices.ESB.Itinerary.ResolverCollection);
                __ctx1__.__resolutionDictionary = default(ESB.Extensions.Resolution.ResolutionDictionary);
                __ctx1__.__resolver = default(System.String);
                __ctx1__.__itineraryStep = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper);
                __ctx1__.__itinerary = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper);
                __ctx1__.__inputMessages = default(Microsoft.XLANGs.Pipeline.SendPipelineInputMessages);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.__ConvoyCS = new Microsoft.XLANGs.Core.Correlation(this, 1, 0);
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!DocumentProcessing.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__InboundMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                __ctx1__.__InboundMessage = new __messagetype_System_Xml_XmlDocument("InboundMessage", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__InboundMessage);
                DocumentProcessing.ReceiveMessage(0, __msgEnv__, __ctx1__.__InboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ConvoyCS }, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    __edata.PortName = @"DocumentProcessing";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__resolvers = new Microsoft.Practices.ESB.Itinerary.ResolverCollection();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__resolutionDictionary = new ESB.Extensions.Resolution.ResolutionDictionary();
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__resolver = "";
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__itineraryStep = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx1__.__itinerary = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx1__.__inputMessages = new Microsoft.XLANGs.Pipeline.SendPipelineInputMessages();
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__ = new __TxItinerary_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__ConvoyCS != null)
                    __ctx1__.__ConvoyCS = null;
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                if (PublishingDirect != null)
                {
                    PublishingDirect.Close(__ctx1__, __seg__);
                    PublishingDirect = null;
                }
                if (DocumentProcessing != null)
                {
                    DocumentProcessing.Close(__ctx1__, __seg__);
                    DocumentProcessing = null;
                }
                Tracker.FireEvent(__eventLocations[75],__eventData[20],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (__ctx2__ != null)
                    __ctx2__.__inputMessages = null;
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolver = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null && __ctx2__.__OutboundMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__OutboundMessage);
                    __ctx2__.__OutboundMessage = null;
                }
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__inputMessages = null;
                if (__ctx1__ != null)
                    __ctx1__.__itinerary = null;
                if (__ctx1__ != null)
                    __ctx1__.__itineraryStep = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolver = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolutionDictionary = null;
                if (__ctx1__ != null)
                    __ctx1__.__resolvers = null;
                if (__ctx1__ != null && __ctx1__.__OutboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = null;
                }
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[24],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 18;
            case 18:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __TxBatch_3 __ctx3__ = (__TxBatch_3)_stateMgrs[3];
            __SendPipelineService_root_0 __ctx0__ = (__SendPipelineService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__newItineraryString = default(System.String);
                __ctx2__.__msgList = default(ESB.Extensions.Components.XLANGMessageList);
                __ctx2__.__isLastMessageInBatch = default(System.Boolean);
                __ctx2__.__sortedMsgs = default(ESB.Extensions.Components.XLANGMessageEnumerator);
                __ctx2__.__resolution = default(ESB.Extensions.Resolutions.SendPipelineServiceResolution);
                __ctx2__.__batchId = default(System.String);
                __ctx2__.__itinerary = __ctx1__.__itinerary;
                __ctx2__.__itineraryStep = __ctx1__.__itineraryStep;
                __ctx2__.__resolvers = __ctx1__.__resolvers;
                __ctx2__.__resolver = __ctx1__.__resolver;
                __ctx2__.__resolutionDictionary = __ctx1__.__resolutionDictionary;
                __ctx2__.__inputMessages = __ctx1__.__inputMessages;
                __ctx2__.__OutboundMessage = __ctx1__.__OutboundMessage;
                if (__ctx2__.__OutboundMessage != null)
                    __ctx2__.RefMessage(__ctx2__.__OutboundMessage);
                __ctx2__.__FaultMessage = __ctx1__.__FaultMessage;
                if (__ctx2__.__FaultMessage != null)
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__newItineraryString = "";
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.__msgList = new ESB.Extensions.Components.XLANGMessageList();
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx2__.__isLastMessageInBatch = false;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx2__.__resolution = new ESB.Extensions.Resolutions.SendPipelineServiceResolution();
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx2__.__batchId = "";
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx2__.__itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx2__.__itineraryStep.ItineraryStep = __ctx2__.__itinerary.Itinerary.GetItineraryStep(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                System.Diagnostics.Trace.WriteLine("ServiceName: " + __ctx2__.__itineraryStep.ItineraryStep.ServiceName);
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                System.Diagnostics.Trace.WriteLine("ServiceType: " + System.Convert.ToString(__ctx2__.__itineraryStep.ItineraryStep.ServiceType));
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                System.Diagnostics.Trace.WriteLine("Itinerary: " + __ctx2__.__itineraryStep.ItineraryStep.Itinerary.ToString());
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                __ctx2__.__batchId = (System.String)__ctx1__.__InboundMessage.GetPropertyValueThrows(typeof(ESB.Extensions.Schemas.BatchId));
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                __ctx2__.__resolvers = __ctx2__.__itineraryStep.ItineraryStep.ResolverCollection;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                System.Diagnostics.Trace.WriteLine("    Resolver Collection Count: " + System.Convert.ToString(__ctx2__.__resolvers.Count));
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __condition__ = __ctx2__.__resolvers.Count <= 0;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 22;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                throw new System.ApplicationException("No resolvers associated with this service config.");
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                __ctx2__.__resolvers.MoveNext();
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                __ctx2__.__resolver = __ctx2__.__resolvers.Current;
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                System.Diagnostics.Trace.WriteLine("        Resolver : " + __ctx2__.__resolver);
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                System.Diagnostics.Trace.WriteLine("        Resolution structure");
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                __ctx2__.__resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage), __ctx2__.__resolver);
                if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 30;
            case 30:
                __ctx2__.__resolution = (ESB.Extensions.Resolutions.SendPipelineServiceResolution)__ctx2__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.SendPipelineServiceResolution");
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                __condition__ = !System.String.IsNullOrEmpty(__ctx2__.__resolutionDictionary.GetString("Microsoft.Practices.ESB.Itinerary.AsXml")) && __ctx2__.__itinerary.Itinerary.HasNextService();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 37;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                if ( !PreProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx2__, typeof(ESB.Extensions.Services.AdvanceItinerary), new object[] {__ctx1__.__InboundMessage});
                goto case 36;
            case 36:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    Tracker.FireEvent(__eventLocations[18],__edata,_stateMgrs[2].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                if ( !PreProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 38;
            case 38:
                if ( !PreProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 39;
            case 39:
                __ctx2__.__msgList = new ESB.Extensions.Components.XLANGMessageList();
                if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 40;
            case 40:
                if ( !PreProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 41;
            case 41:
                __ctx2__.__msgList.Add(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 42;
            case 42:
                if ( !PreProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 43;
            case 43:
                __ctx3__ = new __TxBatch_3(this, System.DateTime.UtcNow.Add(__ctx2__.__resolution.BatchTimeout.ToTimeSpan()));
                _stateMgrs[3] = __ctx3__;
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                __ctx2__.StartContext(__seg__, __ctx3__);
                if ( !PostProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 45:
                if ( !PreProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[53],__eventData[20],_stateMgrs[2].TrackDataStream );
                __ctx3__.Finally();
                if (__ctx3__ != null)
                    __ctx3__.__resolution = null;
                if (__ctx3__ != null)
                    __ctx3__.__msgList = null;
                if (__ctx3__ != null)
                    __ctx3__.__resolutionDictionary = null;
                if (__ctx3__ != null && __ctx3__.__InboundMessage != null)
                {
                    __ctx3__.UnrefMessage(__ctx3__.__InboundMessage);
                    __ctx3__.__InboundMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 46;
            case 46:
                if ( !PreProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[54],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 47;
            case 47:
                __ctx2__.__msgList.Sort(__ctx2__.__resolution.XLANGMessageComparerInstance);
                if ( !PostProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 48;
            case 48:
                if ( !PreProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[55],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 49;
            case 49:
                __ctx2__.__sortedMsgs = __ctx2__.__msgList.GetXLANGMessageEnumerator();
                if (__ctx2__ != null)
                    __ctx2__.__msgList = null;
                if ( !PostProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 50;
            case 50:
                if ( !PreProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[56],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 51;
            case 51:
                __condition__ = __ctx2__.__sortedMsgs.MoveNext();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 58;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 52;
            case 52:
                if ( !PreProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[56],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 53;
            case 53:
                if ( !PreProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[57],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 54;
            case 54:
                __ctx2__.__inputMessages.Add(__ctx2__.__sortedMsgs.Current);
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                if ( !PreProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[58],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 56;
            case 56:
                if ( !PreProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[59],__eventData[16],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 57;
            case 57:
                if ( !PostProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 51;
            case 58:
                if ( !PreProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__sortedMsgs = null;
                Tracker.FireEvent(__eventLocations[59],__eventData[17],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 59;
            case 59:
                if ( !PreProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[60],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 60;
            case 60:
                __condition__ = !System.String.IsNullOrEmpty(__ctx2__.__resolutionDictionary.GetString("Microsoft.Practices.ESB.Itinerary.AsXml"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 65 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 65;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 61;
            case 61:
                if ( !PreProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[61],__eventData[21],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 62;
            case 62:
                {
                    __messagetype_System_Xml_XmlDocument __OutboundMessage = new __messagetype_System_Xml_XmlDocument("OutboundMessage", __ctx2__);

                    __OutboundMessage.part.LoadFrom(null);
                    Microsoft.XLANGs.Pipeline.XLANGPipelineManager.ExecuteSendPipeline(__ctx2__.__resolution.SendPipelineType, __ctx2__.__inputMessages, CreateMessageWrapperForUserCode(__OutboundMessage));
                    __OutboundMessage.SetPropertyValue(typeof(ESB.Extensions.Schemas.BatchId), __ctx2__.__batchId);
                    System.Diagnostics.Trace.WriteLine("Resolving new itinerary from 1st resolver.");
                    __ctx2__.__newItineraryString = __ctx2__.__resolutionDictionary.GetString("Microsoft.Practices.ESB.Itinerary.AsXml");
                    ESB.Extensions.Components.ItineraryHelper.Initialize(__ctx2__.__newItineraryString, CreateMessageWrapperForUserCode(__OutboundMessage));

                    if (__ctx2__.__OutboundMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__OutboundMessage);
                    __ctx2__.__OutboundMessage = __OutboundMessage;
                    __ctx2__.RefMessage(__ctx2__.__OutboundMessage);
                }
                __ctx2__.__OutboundMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 63 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 63;
            case 63:
                if ( !PreProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__OutboundMessage);
                    Tracker.FireEvent(__eventLocations[62],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 64;
            case 64:
                if ( !PostProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 68;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[63],__eventData[21],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                {
                    __messagetype_System_Xml_XmlDocument __OutboundMessage = new __messagetype_System_Xml_XmlDocument("OutboundMessage", __ctx2__);

                    __OutboundMessage.part.LoadFrom(null);
                    Microsoft.XLANGs.Pipeline.XLANGPipelineManager.ExecuteSendPipeline(__ctx2__.__resolution.SendPipelineType, __ctx2__.__inputMessages, CreateMessageWrapperForUserCode(__OutboundMessage));
                    __OutboundMessage.SetPropertyValue(typeof(ESB.Extensions.Schemas.BatchId), __ctx2__.__batchId);
                    __ctx2__.__itinerary.Itinerary.Write(CreateMessageWrapperForUserCode(__OutboundMessage));
                    Microsoft.Practices.ESB.Itinerary.ItineraryHelper.AdvanceItinerary(CreateMessageWrapperForUserCode(__OutboundMessage));

                    if (__ctx2__.__OutboundMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__OutboundMessage);
                    __ctx2__.__OutboundMessage = __OutboundMessage;
                    __ctx2__.RefMessage(__ctx2__.__OutboundMessage);
                }
                __ctx2__.__OutboundMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 67 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 67;
            case 67:
                if ( !PreProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__OutboundMessage);
                    Tracker.FireEvent(__eventLocations[64],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 68;
            case 68:
                if ( !PreProgressInc( __seg__, __ctx__, 69 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__batchId = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolution = null;
                if (__ctx2__ != null)
                    __ctx2__.__newItineraryString = null;
                Tracker.FireEvent(__eventLocations[65],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 69;
            case 69:
                if ( !PreProgressInc( __seg__, __ctx__, 70 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[66],__eventData[22],_stateMgrs[2].TrackDataStream );
                __ctx1__.__ItineraryAdvanceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 70;
            case 70:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 71;
            case 71:
                if ( !PreProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                PublishingDirect.SendMessage(0, __ctx2__.__OutboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ItineraryAdvanceCS }, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if (__ctx1__ != null && __ctx1__.__ItineraryAdvanceCS != null)
                    __ctx1__.__ItineraryAdvanceCS = null;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 72;
            case 72:
                if ( !PreProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx2__.__OutboundMessage);
                    __edata.PortName = @"PublishingDirect";
                    Tracker.FireEvent(__eventLocations[67],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 73;
            case 73:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 74;
            case 74:
                if ( !PreProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 75;
            case 75:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __TxBatch_3 __ctx3__ = (__TxBatch_3)_stateMgrs[3];
            __SendPipelineService_root_0 __ctx0__ = (__SendPipelineService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx3__.__timeoutOccurred = default(System.Boolean);
                __ctx3__.__InboundMessage = __ctx1__.__InboundMessage;
                if (__ctx3__.__InboundMessage != null)
                    __ctx3__.RefMessage(__ctx3__.__InboundMessage);
                __ctx3__.__msgList = __ctx2__.__msgList;
                __ctx3__.__resolutionDictionary = __ctx2__.__resolutionDictionary;
                __ctx3__.__isLastMessageInBatch = __ctx2__.__isLastMessageInBatch;
                __ctx3__.__resolution = __ctx2__.__resolution;
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx3__.__timeoutOccurred = false;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[25],__eventData[10],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __condition__ = !(__ctx3__.__timeoutOccurred || __ctx3__.__isLastMessageInBatch || ((__ctx3__.__resolution.MaxMessageCount > 0) && (__ctx3__.__msgList.Count >= __ctx3__.__resolution.MaxMessageCount)));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 43 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 43;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[25],__eventData[11],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[26],__eventData[12],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __timeout0__ = __ctx3__.PostTimeout(System.DateTime.UtcNow.Add(__ctx3__.__resolution.MessageTimeout.ToTimeSpan()));
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                {
                    int idx = Microsoft.XLANGs.Core.PortBase.ListenForMessageId(new Microsoft.XLANGs.Core.Subscription[] { LookupSubscription( __timeout0__ ), __ctx0__.__subWrapper1.getSubscription(this) }, __seg__, __ctx3__, out __msgEnv__ , _locations[0]);
                    if (idx < 0) {
                        return Microsoft.XLANGs.Core.StopConditions.Blocked;
                    }
                    else if (idx == 0) {
                        if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                            return Microsoft.XLANGs.Core.StopConditions.Paused;
                        goto case 27;
                    }
                    else if (idx == 1) {
                        if (__ctx3__.__InboundMessage != null)
                            __ctx3__.UnrefMessage(__ctx3__.__InboundMessage);
                        __ctx3__.__InboundMessage = new __messagetype_System_Xml_XmlDocument("InboundMessage", __ctx3__);
                        __ctx3__.RefMessage(__ctx3__.__InboundMessage);
                        DocumentProcessing.ReceiveMessage(0, __msgEnv__, __ctx3__.__InboundMessage, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[3], __seg__);
                        if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                            return Microsoft.XLANGs.Core.StopConditions.Paused;
                        goto case 8;
                    }
                }
                break;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[27],__eventData[1],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx3__.__InboundMessage);
                    __edata.PortName = @"DocumentProcessing";
                    Tracker.FireEvent(__eventLocations[28],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[29],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                __ctx3__.__msgList.Add(CreateMessageWrapperForUserCode(__ctx3__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[30],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[31],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __condition__ = !System.String.IsNullOrEmpty(__ctx3__.__resolutionDictionary.GetString("Microsoft.Practices.ESB.Itinerary.AsXml"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 19;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[32],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.AdvanceItinerary), new object[] {__ctx3__.__InboundMessage});
                goto case 18;
            case 18:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx3__.__InboundMessage);
                    Tracker.FireEvent(__eventLocations[33],__edata,_stateMgrs[3].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[34],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[35],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                __condition__ = ((__ctx3__.__InboundMessage.GetPropertyValueNoThrow(typeof(ESB.Extensions.Schemas.IsLastMessageInBatch)) != null));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 25;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[36],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                __ctx3__.__isLastMessageInBatch = System.Convert.ToBoolean((System.String)__ctx3__.__InboundMessage.GetPropertyValueThrows(typeof(ESB.Extensions.Schemas.IsLastMessageInBatch)));
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                Tracker.FireEvent(__eventLocations[37],__eventData[4],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[38],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[39],__eventData[13],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[40],__eventData[14],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[41],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                __condition__ = __ctx3__.__resolution.MessageTimeout.ThrowExceptionOnTimeout;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 34 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 34;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[42],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                throw new System.ApplicationException("Not all messages to be aggregated were received in the specified timeout window.");
            case 33:
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 34:
                if ( !PreProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[43],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 35;
            case 35:
                __ctx3__.__timeoutOccurred = true;
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 36;
            case 36:
                Tracker.FireEvent(__eventLocations[44],__eventData[4],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                if ( !PreProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[45],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 38;
            case 38:
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                DeleteTimeout(LookupSubscription(__timeout0__));
                if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 40;
            case 40:
                if ( !PreProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[46],__eventData[15],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 41;
            case 41:
                if ( !PreProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[47],__eventData[16],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 42;
            case 42:
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 43:
                if ( !PreProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[47],__eventData[17],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 44;
            case 44:
                if (!__ctx3__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 45;
            case 45:
                if ( !PreProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx3__.OnCommit();
                goto case 46;
            case 46:
                __seg__.SegmentDone();
                _segments[2].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment4(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[4];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            __TxBatch_3 __ctx3__ = (__TxBatch_3)_stateMgrs[3];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(3);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[48],__eventData[18],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[49],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __condition__ = __ctx3__.__resolution.BatchTimeout.ThrowExceptionOnTimeout;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 6;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[50],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                throw __ctx3__.__exc_0;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx3__ != null)
                    __ctx3__.__exc_0 = null;
                Tracker.FireEvent(__eventLocations[51],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[52],__eventData[19],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx3__.__exv__ = null;
                OnEndCatchHandler(3, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment5(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[5];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __SendPipelineService_1 __ctx1__ = (__SendPipelineService_1)_stateMgrs[1];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __SendPipelineService_root_0 __ctx0__ = (__SendPipelineService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[68],__eventData[18],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[69],__eventData[21],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx2__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));

                    if (__ctx2__.__FaultMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = __FaultMessage;
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                }
                __ctx2__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[70],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[71],__eventData[22],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx2__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[72],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[73],__eventData[23],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[74],__eventData[19],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{5319AA52-4828-40E0-8636-70AFFCBAA103}"))
        };

    }
    //#line 279 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\ResequencerService.odx"
    [Microsoft.XLANGs.BaseTypes.StaticConvoyAttribute(
        0,
        new System.Type[] { typeof(SequenceCT) }
    )]
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "SequenceMsgInPort", "XmlDocument", 0, 0, true
    )]
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        1, "GoMsgInPort", "GoMsg", -1, 0, true
    )]
    [Microsoft.XLANGs.BaseTypes.ActivationPredicateAttribute(
        0,
        new bool[] {
            true,
            false,
            false
        },
        new System.Type[] {
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType)
        },
        new Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator[] {
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual
        },
        new System.Object[] {
            "ResequencerService",
            "Pending",
            "Orchestration"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.GoMsgPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "SequenceMsgInPort",
            "GoMsgInPort",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class ResequencerService : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(ResequencerService));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static ResequencerService()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 1, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 1, 3),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment4), 1, 2, 4),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment5), 1, 2, 5)
            };

            _Locks = 0;
            _rootContext = new __ResequencerService_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[3];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public ResequencerService(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "ResequencerService", tracker)
        {
            ConstructorHelper();
        }

        public ResequencerService(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "ResequencerService")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>4c347a36-c5ff-4ca9-b87d-dc1401a65367</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ParallelShape</shapeType>      <ShapeID>83581500-5720-4de4-b5dc-f7b1ee22c6b9</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive Sequence &amp; Go Messages</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParallelBranchShape</shapeType>      <ShapeID>50540e59-4942-4829-aa82-1158809f02ee</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>ParallelBranch_1</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>9af94de3-a9c3-4b9d-ae1a-dcb2c318f0c0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Sequence Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>0ebfc62d-84c6-44f2-8802-fa7d5b098a47</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>11eda632-20bc-4c92-ab23-9751d2a6c7d1</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>3ed83af1-3373-4c72-896f-6eb068181a39</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParallelBranchShape</shapeType>      <ShapeID>d71b60bb-54a8-4cfe-ae4a-6796c43d6f09</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>ParallelBranch_2</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>559d2104-4492-4da2-a865-5ab33ed3d4f6</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Go Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>9ed13563-8582-4083-ba83-e8820c5ca2a5</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Itinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>8d1a8390-2cae-4d73-85f4-3e0251da4789</ShapeID>      <ParentLink>Scope_MessageDeclaration</ParentLink>                <shapeText>FaultMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>955119cf-ef73-439a-bdb3-81cfa0411e06</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>StartAdvanceItinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>70b5b3bd-7abe-434f-8f4b-5fce118e5c2e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SequenceMsgIn</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>28b73584-a29b-4d56-a555-5cd1f6f07dd9</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>c209a71a-ebc3-48d5-bf8c-c48eda0668e2</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolution Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>b4e77439-3cde-4422-8eae-753bb2b98fa2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>ed59438e-a5f9-40ef-86db-b0c43c791a4b</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>abbcfc4f-80bf-4321-9ddd-b0d011f6e9b0</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>5ef2df6f-a593-423d-9f58-4e5c66041894</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'ResequencerService'</ActionName><IsAtomic>0</IsAtomic><Line>279</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>293</Line><Position>13</Position><ShapeID>'83581500-5720-4de4-b5dc-f7b1ee22c6b9'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>298</Line><Position>262</Position><ShapeID>'9af94de3-a9c3-4b9d-ae1a-dcb2c318f0c0'</ShapeID>
<Messages>
	<MsgInfo><name>SequenceMsgIn</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>303</Line><Position>30</Position><ShapeID>'559d2104-4492-4da2-a865-5ab33ed3d4f6'</ShapeID>
<Messages>
	<MsgInfo><name>GoMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.Go</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope60'</ActionName><IsAtomic>0</IsAtomic><Line>307</Line><Position>13</Position><ShapeID>'9ed13563-8582-4083-ba83-e8820c5ca2a5'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>313</Line><Position>67</Position><ShapeID>'955119cf-ef73-439a-bdb3-81cfa0411e06'</ShapeID>
<Messages>
	<MsgInfo><name>SequenceMsgIn</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>318</Line><Position>21</Position><ShapeID>'28b73584-a29b-4d56-a555-5cd1f6f07dd9'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>321</Line><Position>25</Position><ShapeID>'c209a71a-ebc3-48d5-bf8c-c48eda0668e2'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>337</Line><Position>25</Position><ShapeID>'abbcfc4f-80bf-4321-9ddd-b0d011f6e9b0'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>339</Line><Position>25</Position><ShapeID>'5ef2df6f-a593-423d-9f58-4e5c66041894'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='06751afd-b78e-4170-a131-bab2b80aec6d' LowerBound='1.1' HigherBound='83.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='812b2dec-dcb4-4b70-a361-87c9e3cd4d0a' ParentLink='Module_ServiceDeclaration' LowerBound='15.1' HigherBound='82.1'>
            <om:Property Name='InitializedTransactionType' Value='True' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ResequencerService' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='CorrelationDeclaration' OID='e939b227-11a0-4e63-95f5-9c3bf60f4c08' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='24.1' HigherBound='25.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.SequenceCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='2f451110-077b-4045-b4a1-83c43e4caad6' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='35.317' HigherBound='35.338'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='9af94de3-a9c3-4b9d-ae1a-dcb2c318f0c0' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_1' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='StatementRef' OID='5e86e9fe-f0c6-4034-b6aa-05bed34335cc' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='40.65' HigherBound='40.86'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='559d2104-4492-4da2-a865-5ab33ed3d4f6' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_4' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='418aadb8-6391-413a-8a89-8c5d7c5f34bb' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='25.1' HigherBound='26.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceMsgIn' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='3f948d53-f0e5-4d57-b00e-7aefe6ad35ea' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='26.1' HigherBound='27.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.GoMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GoMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='4c347a36-c5ff-4ca9-b87d-dc1401a65367' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Parallel' OID='83581500-5720-4de4-b5dc-f7b1ee22c6b9' ParentLink='ServiceBody_Statement' LowerBound='29.1' HigherBound='43.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive Sequence &amp; Go Messages' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='ParallelBranch' OID='50540e59-4942-4829-aa82-1158809f02ee' ParentLink='ReallyComplexStatement_Branch' LowerBound='34.1' HigherBound='36.1'>
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='ParallelBranch_1' />
                        <om:Property Name='Signal' Value='False' />
                        <om:Element Type='Receive' OID='9af94de3-a9c3-4b9d-ae1a-dcb2c318f0c0' ParentLink='ComplexStatement_Statement' LowerBound='34.1' HigherBound='36.1'>
                            <om:Property Name='Activate' Value='True' />
                            <om:Property Name='PortName' Value='SequenceMsgInPort' />
                            <om:Property Name='MessageName' Value='SequenceMsgIn' />
                            <om:Property Name='OperationName' Value='XmlDocument' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Receive Sequence Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DNFPredicate' OID='0ebfc62d-84c6-44f2-8802-fa7d5b098a47' ParentLink='Receive_DNFPredicate'>
                                <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                                <om:Property Name='RHS' Value='&quot;ResequencerService&quot;' />
                                <om:Property Name='Grouping' Value='AND' />
                                <om:Property Name='Operator' Value='Equals' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='DNFPredicate' OID='11eda632-20bc-4c92-ab23-9751d2a6c7d1' ParentLink='Receive_DNFPredicate'>
                                <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                                <om:Property Name='RHS' Value='&quot;Pending&quot;' />
                                <om:Property Name='Grouping' Value='AND' />
                                <om:Property Name='Operator' Value='Equals' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='DNFPredicate' OID='3ed83af1-3373-4c72-896f-6eb068181a39' ParentLink='Receive_DNFPredicate'>
                                <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType' />
                                <om:Property Name='RHS' Value='&quot;Orchestration&quot;' />
                                <om:Property Name='Grouping' Value='AND' />
                                <om:Property Name='Operator' Value='Equals' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='ParallelBranch' OID='d71b60bb-54a8-4cfe-ae4a-6796c43d6f09' ParentLink='ReallyComplexStatement_Branch' LowerBound='39.1' HigherBound='41.1'>
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='ParallelBranch_2' />
                        <om:Property Name='Signal' Value='False' />
                        <om:Element Type='Receive' OID='559d2104-4492-4da2-a865-5ab33ed3d4f6' ParentLink='ComplexStatement_Statement' LowerBound='39.1' HigherBound='41.1'>
                            <om:Property Name='Activate' Value='True' />
                            <om:Property Name='PortName' Value='GoMsgInPort' />
                            <om:Property Name='MessageName' Value='GoMsg' />
                            <om:Property Name='OperationName' Value='GoMsg' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Receive Go Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='9ed13563-8582-4083-ba83-e8820c5ca2a5' ParentLink='ServiceBody_Statement' LowerBound='43.1' HigherBound='80.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Itinerary' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='MessageDeclaration' OID='8d1a8390-2cae-4d73-85f4-3e0251da4789' ParentLink='Scope_MessageDeclaration' LowerBound='46.1' HigherBound='47.1'>
                        <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='FaultMessage' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Exec' OID='955119cf-ef73-439a-bdb3-81cfa0411e06' ParentLink='ComplexStatement_Statement' LowerBound='49.1' HigherBound='51.1'>
                        <om:Property Name='Invokee' Value='ESB.Extensions.Services.AdvanceItinerary' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='StartAdvanceItinerary' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Parameter' OID='70b5b3bd-7abe-434f-8f4b-5fce118e5c2e' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='SequenceMsgIn' />
                            <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='28b73584-a29b-4d56-a555-5cd1f6f07dd9' ParentLink='Scope_Catch' LowerBound='54.1' HigherBound='78.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='c209a71a-ebc3-48d5-bf8c-c48eda0668e2' ParentLink='Catch_Statement' LowerBound='57.1' HigherBound='73.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolution Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageAssignment' OID='b4e77439-3cde-4422-8eae-753bb2b98fa2' ParentLink='ComplexStatement_Statement' LowerBound='60.1' HigherBound='72.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, SequenceMsgIn);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='ed59438e-a5f9-40ef-86db-b0c43c791a4b' ParentLink='Construct_MessageRef' LowerBound='58.35' HigherBound='58.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='abbcfc4f-80bf-4321-9ddd-b0d011f6e9b0' ParentLink='Catch_Statement' LowerBound='73.1' HigherBound='75.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='5ef2df6f-a593-423d-9f58-4e5c66041894' ParentLink='Catch_Statement' LowerBound='75.1' HigherBound='77.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='27cd950c-5a0c-4352-8c40-0d0fd5cdfa06' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='18.1' HigherBound='20.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceMsgInPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='4efcd8e3-11f5-42d8-bfec-90c0bf570f4b' ParentLink='PortDeclaration_CLRAttribute' LowerBound='18.1' HigherBound='19.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='c0e13cf0-a72d-4429-ab13-fc3f9a9c629d' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='20.1' HigherBound='22.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.GoMsgPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GoMsgInPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='38fdbdbf-4f30-46d9-a708-12282bd722c9' ParentLink='PortDeclaration_CLRAttribute' LowerBound='20.1' HigherBound='21.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='f5175288-1580-4641-9e69-40be27638b9a' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='22.1' HigherBound='24.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='45' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='19d6f34b-ae39-409e-a6ba-df0247065ac9' ParentLink='PortDeclaration_CLRAttribute' LowerBound='22.1' HigherBound='23.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='dc164b3b-d27a-4534-97ec-e15fc6c3ad35' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='GoMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='556fe6c1-090b-4d94-9ab0-4a0b2d4a6f91' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='ESB.Extensions.Schemas.Go' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='4190a28f-6a7d-4012-951b-1bfaabc2285f' ParentLink='Module_PortType' LowerBound='8.1' HigherBound='15.1'>
            <om:Property Name='Synchronous' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='GoMsgPortType' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='OperationDeclaration' OID='2c959514-be46-427b-b7b3-bc649dcdb4e0' ParentLink='PortType_OperationDeclaration' LowerBound='10.1' HigherBound='14.1'>
                <om:Property Name='OperationType' Value='OneWay' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GoMsg' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='7c249a72-8139-4d11-9b5e-71c16281e941' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='12.13' HigherBound='12.22'>
                    <om:Property Name='Ref' Value='ESB.Extensions.Services.GoMsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __ResequencerService_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __ResequencerService_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ResequencerService")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ResequencerService __svc__ = (ResequencerService)_service;
                __ResequencerService_root_0 __ctx0__ = (__ResequencerService_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.GoMsgInPort != null)
                {
                    __svc__.GoMsgInPort.Close(this, null);
                    __svc__.GoMsgInPort = null;
                }
                if (__svc__.SequenceMsgInPort != null)
                {
                    __svc__.SequenceMsgInPort.Close(this, null);
                    __svc__.SequenceMsgInPort = null;
                }
                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper1;
        }


        [System.SerializableAttribute]
        public class __ResequencerService_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __ResequencerService_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ResequencerService")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ResequencerService __svc__ = (ResequencerService)_service;
                __ResequencerService_1 __ctx1__ = (__ResequencerService_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                if (__ctx1__ != null && __ctx1__.__SequenceMsgIn != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SequenceMsgIn);
                    __ctx1__.__SequenceMsgIn = null;
                }
                if (__ctx1__ != null && __ctx1__.__GoMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GoMsg);
                    __ctx1__.__GoMsg = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceMsgIn")]
            public __messagetype_System_Xml_XmlDocument __SequenceMsgIn;
            [Microsoft.XLANGs.Core.UserVariableAttribute("GoMsg")]
            internal GoMsgType __GoMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceCS")]
            internal Microsoft.XLANGs.Core.Correlation __SequenceCS;
        }


        [System.SerializableAttribute]
        public class ____scope60_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope60_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope60")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[4]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[4]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[5];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ResequencerService __svc__ = (ResequencerService)_service;
                ____scope60_2 __ctx2__ = (____scope60_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = new Microsoft.XLANGs.Core.CorrelationType[] { new SequenceCT() };
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return new object[] {
                    new Microsoft.XLANGs.Core.CorrelationType[] { _correlationTypes[0] }
                };
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceMsgInPort")]
        internal XmlDocumentPortType SequenceMsgInPort;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("GoMsgInPort")]
        internal GoMsgPortType GoMsgInPort;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType();

        sealed private class PredicateSet0_0 : Microsoft.XLANGs.Core.PredicateGroup
        {
            public PredicateSet0_0() : base(3)
            {
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "ResequencerService"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Pending"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Orchestration"));
            }
        }


        private static Microsoft.XLANGs.Core.PredicateGroup[] _predicates0 = {
            new PredicateSet0_0()
        };


        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(ResequencerService).GetField("SequenceMsgInPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ResequencerService), "SequenceMsgInPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {GoMsgPortType.GoMsg},
                                               typeof(ResequencerService).GetField("GoMsgInPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ResequencerService), "GoMsgInPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(ResequencerService).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ResequencerService), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                h[_portInfo[2].Name] = _portInfo[2];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(ESB.Extensions.Services.AdvanceItinerary)                    
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[2]{
                     new object[5] { _portInfo[0], 0, _predicates0 , 0, true }
                    , new object[5] { _portInfo[1], 0, null , 0, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "83581500-5720-4de4-b5dc-f7b1ee22c6b9", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "83581500-5720-4de4-b5dc-f7b1ee22c6b9", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "9af94de3-a9c3-4b9d-ae1a-dcb2c318f0c0", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "9af94de3-a9c3-4b9d-ae1a-dcb2c318f0c0", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "559d2104-4492-4da2-a865-5ab33ed3d4f6", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "559d2104-4492-4da2-a865-5ab33ed3d4f6", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "9ed13563-8582-4083-ba83-e8820c5ca2a5", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "00000000-0000-0000-0000-000000000000", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "955119cf-ef73-439a-bdb3-81cfa0411e06", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "955119cf-ef73-439a-bdb3-81cfa0411e06", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "28b73584-a29b-4d56-a555-5cd1f6f07dd9", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "c209a71a-ebc3-48d5-bf8c-c48eda0668e2", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "c209a71a-ebc3-48d5-bf8c-c48eda0668e2", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "abbcfc4f-80bf-4321-9ddd-b0d011f6e9b0", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "abbcfc4f-80bf-4321-9ddd-b0d011f6e9b0", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "5ef2df6f-a593-423d-9f58-4e5c66041894", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "28b73584-a29b-4d56-a555-5cd1f6f07dd9", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "9ed13563-8582-4083-ba83-e8820c5ca2a5", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "00000000-0000-0000-0000-000000000000", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Parallel),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Parallel),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,19,19,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,3,2,2,7,7,7,18,19,19,19,19,};
        public static int[] __progressLocation2 = new int[] { 3,3,4,2,};
        public static int[] __progressLocation3 = new int[] { 5,5,6,2,};
        public static int[] __progressLocation4 = new int[] { 9,9,9,10,10,10,10,10,};
        public static int[] __progressLocation5 = new int[] { 11,11,12,12,13,14,14,14,15,16,16,17,17,};

        public static int[][] __progressLocations = new int[6] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3,__progressLocation4,__progressLocation5};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __ResequencerService_1 __ctx1__ = (__ResequencerService_1)_stateMgrs[1];
            __ResequencerService_root_0 __ctx0__ = (__ResequencerService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                SequenceMsgInPort = new XmlDocumentPortType(0, this);
                GoMsgInPort = new GoMsgPortType(1, this);
                FaultProcessing = new FaultProcessingType(2, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], SequenceMsgInPort, this);
                __ctx0__.__subWrapper1 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[1], GoMsgInPort, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __ResequencerService_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            ____scope60_2 __ctx2__ = (____scope60_2)_stateMgrs[2];
            __ResequencerService_1 __ctx1__ = (__ResequencerService_1)_stateMgrs[1];
            __ResequencerService_root_0 __ctx0__ = (__ResequencerService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__SequenceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __seg__.RunSegments(new Microsoft.XLANGs.Core.Segment[] {_segments[2], _segments[3]}, this);
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                if (GoMsgInPort != null)
                {
                    GoMsgInPort.Close(__ctx1__, __seg__);
                    GoMsgInPort = null;
                }
                if (SequenceMsgInPort != null)
                {
                    SequenceMsgInPort.Close(__ctx1__, __seg__);
                    SequenceMsgInPort = null;
                }
                Tracker.FireEvent(__eventLocations[2],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx2__ = new ____scope60_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__SequenceMsgIn != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SequenceMsgIn);
                    __ctx1__.__SequenceMsgIn = null;
                }
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                Tracker.FireEvent(__eventLocations[18],__eventData[12],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[13],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 13;
            case 13:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __ResequencerService_1 __ctx1__ = (__ResequencerService_1)_stateMgrs[1];
            __ResequencerService_root_0 __ctx0__ = (__ResequencerService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                if ( !PreProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 1;
            case 1:
                if (!SequenceMsgInPort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__SequenceMsgIn != null)
                    __ctx1__.UnrefMessage(__ctx1__.__SequenceMsgIn);
                __ctx1__.__SequenceMsgIn = new __messagetype_System_Xml_XmlDocument("SequenceMsgIn", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__SequenceMsgIn);
                SequenceMsgInPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__SequenceMsgIn, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__SequenceCS }, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__SequenceMsgIn);
                    __edata.PortName = @"SequenceMsgInPort";
                    Tracker.FireEvent(__eventLocations[4],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __ResequencerService_1 __ctx1__ = (__ResequencerService_1)_stateMgrs[1];
            __ResequencerService_root_0 __ctx0__ = (__ResequencerService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                if ( !PreProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 1;
            case 1:
                if (!GoMsgInPort.GetMessageId(__ctx0__.__subWrapper1.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__GoMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__GoMsg);
                __ctx1__.__GoMsg = new GoMsgType("GoMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__GoMsg);
                GoMsgInPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__GoMsg, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__SequenceCS }, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__GoMsg);
                    __edata.PortName = @"GoMsgInPort";
                    Tracker.FireEvent(__eventLocations[6],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__GoMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GoMsg);
                    __ctx1__.__GoMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment4(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[4];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope60_2 __ctx2__ = (____scope60_2)_stateMgrs[2];
            __ResequencerService_1 __ctx1__ = (__ResequencerService_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx2__, typeof(ESB.Extensions.Services.AdvanceItinerary), new object[] {__ctx1__.__SequenceMsgIn});
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx1__.__SequenceMsgIn);
                    Tracker.FireEvent(__eventLocations[10],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 7;
            case 7:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment5(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[5];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope60_2 __ctx2__ = (____scope60_2)_stateMgrs[2];
            __ResequencerService_1 __ctx1__ = (__ResequencerService_1)_stateMgrs[1];
            __ResequencerService_root_0 __ctx0__ = (__ResequencerService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx2__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__SequenceMsgIn));

                    if (__ctx2__.__FaultMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = __FaultMessage;
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                }
                __ctx2__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[13],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx2__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[15],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 355 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\ResequencerGoService.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "SequenceMsgInPort", "XmlDocument", 0, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ActivationPredicateAttribute(
        0,
        new bool[] {
            true,
            false,
            false
        },
        new System.Type[] {
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType)
        },
        new Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator[] {
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual
        },
        new System.Object[] {
            "ResequencerGoService",
            "Pending",
            "Orchestration"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "SequenceMsgInPort",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eLongRunning
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class ResequencerGoService : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(ResequencerGoService));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static ResequencerGoService()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 3, 3),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment4), 1, 2, 4)
            };

            _Locks = 3;
            _rootContext = new __ResequencerGoService_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[4];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public ResequencerGoService(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "ResequencerGoService", tracker)
        {
            ConstructorHelper();
        }

        public ResequencerGoService(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "ResequencerGoService")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>e45f1a51-a071-4dab-82aa-f7101d1199a2</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>af35d228-1b87-4ed1-b8c6-baf5b552cb02</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive Sequence Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>2e0fd11d-6af5-4df0-85e6-dc9b4ca76fb1</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>87ad778f-d063-48c6-8448-fb7e6ebd9b44</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>4799402b-bb8f-4291-bd42-d14290649c14</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>d2754a7c-b47b-41d3-8f0f-e7aa5d87e0b3</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Itinerary and Resolution</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>dc58ecd6-3cc7-4dc5-8922-e1355e0b21b6</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>98cc6653-bddb-420d-971c-c2b74c87aebb</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolutionDictionary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>1ded9e9b-ac7b-457b-8987-4169852ed971</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolver</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>88d2660b-ab00-4239-97ce-75f218fd232e</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>itineraryStep</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>6e2286bb-54a1-483f-a1c5-cd6fd95fab6f</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>6cee12c2-3553-4cfa-b1bc-a2d8a09b3ed2</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>LongRunningTransactionShape</shapeType>      <ShapeID>336f9b12-213c-4e51-8cce-fb6db0c693bf</ShapeID>      <ParentLink>Scope_Transaction</ParentLink>                <shapeText>TxItinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>5f0f799a-1b54-4e5f-86da-c55e50049c4d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Current Itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>e3dce0f3-1e0a-40e8-b3ca-96d744edecaf</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Retrieve Resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>826c4149-2111-4aa1-bbe8-a3fed977689c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolvers returned</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>4f10f75d-823d-4675-9cfb-bf1984901ead</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>467043f9-9218-4b4f-9061-2fe1670531f4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolve</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>9c77eacd-c8e6-40e1-9f20-1db25b49ae96</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7934df79-696c-4946-8296-bf9acb88c6b1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Throw Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>dc6007e5-79fa-4573-b648-53c55477b188</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get IsLastMessage</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>d793a398-e2b5-46e3-a38b-b66df216896c</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>IsLastMessage Property exists</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>e255dd9a-44c1-4d4f-a0c1-4bec15f0fe1a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set shouldGenerateGoMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>287ac0ca-9320-456b-afd4-4f2fee31cffd</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>37e79fb3-57ed-494c-9c4e-843657eeb32b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>AtomicTransactionShape</shapeType>      <ShapeID>eaa19a54-ecc4-424a-acda-ac75c48a1232</ShapeID>      <ParentLink>Scope_Transaction</ParentLink>                <shapeText>TxSend</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>4071eea2-a13f-4a15-9b8c-b9444478fa05</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>HasNextStep?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>fafd55a6-b870-4bbe-b47d-6941abe88eb3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>4c15108b-3077-47a4-8c4e-6829345ef606</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start AdvanceItinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>5404fad4-37b9-4e41-8a49-5f914cdfac2f</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SequenceMsgIn</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>34f9ccd3-31e2-4990-b15e-c1b046eb3857</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>9064bd7e-6a7c-4d91-bc50-f433fd366f1e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Generate GoMsg?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>0278f8e9-ee7c-4504-b477-9cdff446bf4e</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>3c32b44c-8339-45d2-a335-48d805c77c5a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start PublishGoMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>43f8ca9a-a9c4-4997-81ab-b51f13573cfe</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>e32eb060-8524-49c6-928a-c30e61e6eb54</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransactionAttributeShape</shapeType>      <ShapeID>fcae6d49-baa4-4a5c-b20a-e44cb5eca91c</ShapeID>      <ParentLink>Statement_CLRAttribute</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>2546d89c-8a14-4d62-9a67-8ea5b595ad59</ShapeID>      <ParentLink>Scope_MessageDeclaration</ParentLink>                <shapeText>FaultMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>51e1175e-c0c4-4681-beb2-5f14a2f77e1a</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>995720ff-6cb1-4f2e-bb79-16ab1e1f1b40</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolutoin Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>54fc5c29-7b1a-4d22-9902-176a07500c6a</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>a25b8f27-adbd-44e2-b721-861ab5aa6f9f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>15f10a3c-08f0-408e-a8bc-c3e6c49714a4</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>35e35efb-825e-4515-aff2-84751348a49e</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'ResequencerGoService'</ActionName><IsAtomic>0</IsAtomic><Line>355</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>365</Line><Position>256</Position><ShapeID>'af35d228-1b87-4ed1-b8c6-baf5b552cb02'</ShapeID>
<Messages>
	<MsgInfo><name>SequenceMsgIn</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'TxItinerary'</ActionName><IsAtomic>0</IsAtomic><Line>367</Line><Position>13</Position><ShapeID>'d2754a7c-b47b-41d3-8f0f-e7aa5d87e0b3'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>386</Line><Position>41</Position><ShapeID>'5f0f799a-1b54-4e5f-86da-c55e50049c4d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>394</Line><Position>31</Position><ShapeID>'e3dce0f3-1e0a-40e8-b3ca-96d744edecaf'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>398</Line><Position>21</Position><ShapeID>'826c4149-2111-4aa1-bbe8-a3fed977689c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>402</Line><Position>43</Position><ShapeID>'467043f9-9218-4b4f-9061-2fe1670531f4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>417</Line><Position>25</Position><ShapeID>'7934df79-696c-4946-8296-bf9acb88c6b1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>420</Line><Position>21</Position><ShapeID>'dc6007e5-79fa-4573-b648-53c55477b188'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>423</Line><Position>48</Position><ShapeID>'e255dd9a-44c1-4d4f-a0c1-4bec15f0fe1a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'TxSend'</ActionName><IsAtomic>1</IsAtomic><Line>427</Line><Position>21</Position><ShapeID>'37e79fb3-57ed-494c-9c4e-843657eeb32b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>432</Line><Position>29</Position><ShapeID>'4071eea2-a13f-4a15-9b8c-b9444478fa05'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>435</Line><Position>79</Position><ShapeID>'4c15108b-3077-47a4-8c4e-6829345ef606'</ShapeID>
<Messages>
	<MsgInfo><name>SequenceMsgIn</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>438</Line><Position>29</Position><ShapeID>'9064bd7e-6a7c-4d91-bc50-f433fd366f1e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>441</Line><Position>75</Position><ShapeID>'3c32b44c-8339-45d2-a335-48d805c77c5a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>449</Line><Position>21</Position><ShapeID>'51e1175e-c0c4-4681-beb2-5f14a2f77e1a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>452</Line><Position>25</Position><ShapeID>'995720ff-6cb1-4f2e-bb79-16ab1e1f1b40'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>468</Line><Position>25</Position><ShapeID>'15f10a3c-08f0-408e-a8bc-c3e6c49714a4'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>470</Line><Position>25</Position><ShapeID>'35e35efb-825e-4515-aff2-84751348a49e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='73cffda8-692e-4208-80b8-643581bd9c8c' LowerBound='1.1' HigherBound='127.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='54799efb-8182-4790-9e98-940b2bdbc997' ParentLink='Module_ServiceDeclaration' LowerBound='4.1' HigherBound='126.1'>
            <om:Property Name='InitializedTransactionType' Value='True' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ResequencerGoService' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='LongRunningTransaction' OID='792f81f8-2b5d-4233-9be4-ffdd7ab8cec0' ParentLink='ServiceDeclaration_Transaction' LowerBound='5.21' HigherBound='5.66'>
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TxMain' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='eeb1102d-472a-43f1-a216-140627f7ee62' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='11.1' HigherBound='12.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceMsgIn' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='e45f1a51-a071-4dab-82aa-f7101d1199a2' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='af35d228-1b87-4ed1-b8c6-baf5b552cb02' ParentLink='ServiceBody_Statement' LowerBound='14.1' HigherBound='16.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='SequenceMsgInPort' />
                    <om:Property Name='MessageName' Value='SequenceMsgIn' />
                    <om:Property Name='OperationName' Value='XmlDocument' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive Sequence Message' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DNFPredicate' OID='2e0fd11d-6af5-4df0-85e6-dc9b4ca76fb1' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                        <om:Property Name='RHS' Value='&quot;ResequencerGoService&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='87ad778f-d063-48c6-8448-fb7e6ebd9b44' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                        <om:Property Name='RHS' Value='&quot;Pending&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='4799402b-bb8f-4291-bd42-d14290649c14' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType' />
                        <om:Property Name='RHS' Value='&quot;Orchestration&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='d2754a7c-b47b-41d3-8f0f-e7aa5d87e0b3' ParentLink='ServiceBody_Statement' LowerBound='16.1' HigherBound='124.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Itinerary and Resolution' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='VariableDeclaration' OID='dc58ecd6-3cc7-4dc5-8922-e1355e0b21b6' ParentLink='Scope_VariableDeclaration' LowerBound='20.1' HigherBound='21.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.ResolverCollection' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolvers' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='98cc6653-bddb-420d-971c-c2b74c87aebb' ParentLink='Scope_VariableDeclaration' LowerBound='21.1' HigherBound='22.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='ESB.Extensions.Resolution.ResolutionDictionary' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolutionDictionary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='1ded9e9b-ac7b-457b-8987-4169852ed971' ParentLink='Scope_VariableDeclaration' LowerBound='22.1' HigherBound='23.1'>
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.String' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolver' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='88d2660b-ab00-4239-97ce-75f218fd232e' ParentLink='Scope_VariableDeclaration' LowerBound='23.1' HigherBound='24.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='itineraryStep' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='6e2286bb-54a1-483f-a1c5-cd6fd95fab6f' ParentLink='Scope_VariableDeclaration' LowerBound='24.1' HigherBound='25.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='itinerary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='6cee12c2-3553-4cfa-b1bc-a2d8a09b3ed2' ParentLink='Scope_VariableDeclaration' LowerBound='25.1' HigherBound='26.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='go' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='LongRunningTransaction' OID='336f9b12-213c-4e51-8cce-fb6db0c693bf' ParentLink='Scope_Transaction' LowerBound='17.18' HigherBound='17.54'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='TxItinerary' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='5f0f799a-1b54-4e5f-86da-c55e50049c4d' ParentLink='ComplexStatement_Statement' LowerBound='34.1' HigherBound='42.1'>
                        <om:Property Name='Expression' Value='// Retrieve the current itinerary step&#xD;&#xA;itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(SequenceMsgIn);&#xD;&#xA;itineraryStep.ItineraryStep = itinerary.Itinerary.GetItineraryStep(SequenceMsgIn);&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceName: &quot; + itineraryStep.ItineraryStep.ServiceName);&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceType: &quot; + System.Convert.ToString(itineraryStep.ItineraryStep.ServiceType));&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;Itinerary: &quot; + itineraryStep.ItineraryStep.Itinerary.ToString());' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Current Itinerary' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='e3dce0f3-1e0a-40e8-b3ca-96d744edecaf' ParentLink='ComplexStatement_Statement' LowerBound='42.1' HigherBound='47.1'>
                        <om:Property Name='Expression' Value='//Retrieve the Resolvers associated with the itinerary&#xD;&#xA;resolvers = itineraryStep.ItineraryStep.ResolverCollection;&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;    Resolver Collection Count: &quot; + System.Convert.ToString(resolvers.Count));' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Retrieve Resolvers' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Decision' OID='826c4149-2111-4aa1-bbe8-a3fed977689c' ParentLink='ComplexStatement_Statement' LowerBound='47.1' HigherBound='69.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Resolvers returned' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='4f10f75d-823d-4675-9cfb-bf1984901ead' ParentLink='ReallyComplexStatement_Branch' LowerBound='48.21' HigherBound='64.1'>
                            <om:Property Name='Expression' Value='resolvers.Count &gt; 0' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='YES' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='467043f9-9218-4b4f-9061-2fe1670531f4' ParentLink='ComplexStatement_Statement' LowerBound='50.1' HigherBound='63.1'>
                                <om:Property Name='Expression' Value='// Move to retrieve first resolver&#xD;&#xA;resolvers.MoveNext();&#xD;&#xA;resolver = resolvers.Current;&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;        Resolver : &quot; + resolver);&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;        Resolution structure&quot;);&#xD;&#xA;&#xD;&#xA;// Pass the resolver configuration to the Resolver mgr for resolution&#xD;&#xA;resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(SequenceMsgIn, resolver);&#xD;&#xA;go = (ESB.Extensions.Resolutions.Go) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.Go&quot;);&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(go.ToString());' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Resolve' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='9c77eacd-c8e6-40e1-9f20-1db25b49ae96' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='VariableAssignment' OID='7934df79-696c-4946-8296-bf9acb88c6b1' ParentLink='ComplexStatement_Statement' LowerBound='66.1' HigherBound='68.1'>
                                <om:Property Name='Expression' Value='throw new System.ApplicationException(&quot;There were no resolvers associated with this service config.&quot;);' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Throw Exception' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Decision' OID='dc6007e5-79fa-4573-b648-53c55477b188' ParentLink='ComplexStatement_Statement' LowerBound='69.1' HigherBound='75.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get IsLastMessage' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='d793a398-e2b5-46e3-a38b-b66df216896c' ParentLink='ReallyComplexStatement_Branch' LowerBound='70.21' HigherBound='75.1'>
                            <om:Property Name='Expression' Value='(ESB.Extensions.Schemas.IsLastMessageInBatch exists SequenceMsgIn) &amp;&amp; (SequenceMsgIn(ESB.Extensions.Schemas.IsLastMessageInBatch) == &quot;true&quot;)' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='IsLastMessage Property exists' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='VariableAssignment' OID='e255dd9a-44c1-4d4f-a0c1-4bec15f0fe1a' ParentLink='ComplexStatement_Statement' LowerBound='72.1' HigherBound='74.1'>
                                <om:Property Name='Expression' Value='go.ShouldGenerateGoMsg = false;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Set shouldGenerateGoMsg' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='287ac0ca-9320-456b-afd4-4f2fee31cffd' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Scope' OID='37e79fb3-57ed-494c-9c4e-843657eeb32b' ParentLink='ComplexStatement_Statement' LowerBound='75.1' HigherBound='95.1'>
                        <om:Property Name='InitializedTransactionType' Value='True' />
                        <om:Property Name='IsSynchronized' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Send Scope' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='AtomicTransaction' OID='eaa19a54-ecc4-424a-acda-ac75c48a1232' ParentLink='Scope_Transaction' LowerBound='77.26' HigherBound='77.52'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='TxSend' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Decision' OID='4071eea2-a13f-4a15-9b8c-b9444478fa05' ParentLink='ComplexStatement_Statement' LowerBound='81.1' HigherBound='87.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='HasNextStep?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='fafd55a6-b870-4bbe-b47d-6941abe88eb3' ParentLink='ReallyComplexStatement_Branch' LowerBound='82.29' HigherBound='87.1'>
                                <om:Property Name='Expression' Value='itinerary.Itinerary.HasNextService()' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='YES' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Exec' OID='4c15108b-3077-47a4-8c4e-6829345ef606' ParentLink='ComplexStatement_Statement' LowerBound='84.1' HigherBound='86.1'>
                                    <om:Property Name='Invokee' Value='ESB.Extensions.Services.AdvanceItinerary' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Start AdvanceItinerary' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='Parameter' OID='5404fad4-37b9-4e41-8a49-5f914cdfac2f' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='SequenceMsgIn' />
                                        <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='34f9ccd3-31e2-4990-b15e-c1b046eb3857' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='9064bd7e-6a7c-4d91-bc50-f433fd366f1e' ParentLink='ComplexStatement_Statement' LowerBound='87.1' HigherBound='93.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Generate GoMsg?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='0278f8e9-ee7c-4504-b477-9cdff446bf4e' ParentLink='ReallyComplexStatement_Branch' LowerBound='88.29' HigherBound='93.1'>
                                <om:Property Name='Expression' Value='go.ShouldGenerateGoMsg' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='YES' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Exec' OID='3c32b44c-8339-45d2-a335-48d805c77c5a' ParentLink='ComplexStatement_Statement' LowerBound='90.1' HigherBound='92.1'>
                                    <om:Property Name='Invokee' Value='ESB.Extensions.Services.PublishGoMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Start PublishGoMsg' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='Parameter' OID='43f8ca9a-a9c4-4997-81ab-b51f13573cfe' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='go' />
                                        <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='e32eb060-8524-49c6-928a-c30e61e6eb54' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='TransactionAttribute' OID='fcae6d49-baa4-4a5c-b20a-e44cb5eca91c' ParentLink='Statement_CLRAttribute' LowerBound='76.1' HigherBound='77.1'>
                            <om:Property Name='Batch' Value='True' />
                            <om:Property Name='Retry' Value='True' />
                            <om:Property Name='Timeout' Value='60' />
                            <om:Property Name='Isolation' Value='Serializable' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='MessageDeclaration' OID='2546d89c-8a14-4d62-9a67-8ea5b595ad59' ParentLink='Scope_MessageDeclaration' LowerBound='19.1' HigherBound='20.1'>
                        <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='FaultMessage' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Catch' OID='51e1175e-c0c4-4681-beb2-5f14a2f77e1a' ParentLink='Scope_Catch' LowerBound='98.1' HigherBound='122.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='995720ff-6cb1-4f2e-bb79-16ab1e1f1b40' ParentLink='Catch_Statement' LowerBound='101.1' HigherBound='117.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolutoin Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='54fc5c29-7b1a-4d22-9902-176a07500c6a' ParentLink='Construct_MessageRef' LowerBound='102.35' HigherBound='102.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='a25b8f27-adbd-44e2-b721-861ab5aa6f9f' ParentLink='ComplexStatement_Statement' LowerBound='104.1' HigherBound='116.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, SequenceMsgIn);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='15f10a3c-08f0-408e-a8bc-c3e6c49714a4' ParentLink='Catch_Statement' LowerBound='117.1' HigherBound='119.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='35e35efb-825e-4515-aff2-84751348a49e' ParentLink='Catch_Statement' LowerBound='119.1' HigherBound='121.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='a88b1692-2aa2-4917-92d1-37a5f0819c21' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='7.1' HigherBound='9.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceMsgInPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='205f4a79-cc30-4734-bb46-eae555a9cf5a' ParentLink='PortDeclaration_CLRAttribute' LowerBound='7.1' HigherBound='8.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='be3019a2-1683-44c1-8f89-9af02368b425' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='9.1' HigherBound='11.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='45' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='35e11c92-1ba5-4ef1-9e7e-7d0d52da3d71' ParentLink='PortDeclaration_CLRAttribute' LowerBound='9.1' HigherBound='10.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __ResequencerGoService_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __ResequencerGoService_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ResequencerGoService")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ResequencerGoService __svc__ = (ResequencerGoService)_service;
                __ResequencerGoService_root_0 __ctx0__ = (__ResequencerGoService_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.SequenceMsgInPort != null)
                {
                    __svc__.SequenceMsgInPort.Close(this, null);
                    __svc__.SequenceMsgInPort = null;
                }
                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __ResequencerGoService_1 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __ResequencerGoService_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ResequencerGoService")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ResequencerGoService __svc__ = (ResequencerGoService)_service;
                __ResequencerGoService_1 __ctx1__ = (__ResequencerGoService_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__SequenceMsgIn != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SequenceMsgIn);
                    __ctx1__.__SequenceMsgIn = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceMsgIn")]
            public __messagetype_System_Xml_XmlDocument __SequenceMsgIn;  // lock index = 1
        }


        [System.SerializableAttribute]
        public class __TxItinerary_2 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __TxItinerary_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "TxItinerary")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[4];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ResequencerGoService __svc__ = (ResequencerGoService)_service;
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);
                __TxSend_3 __ctx3__ = (__TxSend_3)(__svc__._stateMgrs[3]);

                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                if (__ctx2__ != null)
                    __ctx2__.__go = null;
                if (__ctx3__ != null)
                    __ctx3__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolver = null;
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolvers")]
            internal Microsoft.Practices.ESB.Itinerary.ResolverCollection __resolvers;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolver")]
            internal System.String __resolver;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryStep")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper __itineraryStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;  // lock index = 0
            [Microsoft.XLANGs.Core.UserVariableAttribute("go")]
            internal ESB.Extensions.Resolutions.Go __go;  // lock index = 2
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class __TxSend_3 : Microsoft.XLANGs.Core.AtomicTransaction
        {
            public __TxSend_3(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "TxSend")
            {
                Retry = true;
                Batch = true;
                Timeout = 60;
                TranIsolationLevel = System.Data.IsolationLevel.Serializable;
            }

            public override int Index { get { return 3; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[3]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[3]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ResequencerGoService __svc__ = (ResequencerGoService)_service;
                __TxItinerary_2 __ctx2__ = (__TxItinerary_2)(__svc__._stateMgrs[2]);
                __TxSend_3 __ctx3__ = (__TxSend_3)(__svc__._stateMgrs[3]);

                if (this.Succeeded)
                {
                    __ctx2__.__itinerary = __ctx3__.__itinerary;
                }
                else if (_PrologueCompleted)
                {
                    __ctx2__.__itinerary = (Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper)__ctx3__.RestoreObject(__ctx3__.__itinerary, 0);
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceMsgInPort")]
        internal XmlDocumentPortType SequenceMsgInPort;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType();

        sealed private class PredicateSet0_0 : Microsoft.XLANGs.Core.PredicateGroup
        {
            public PredicateSet0_0() : base(3)
            {
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "ResequencerGoService"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Pending"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Orchestration"));
            }
        }


        private static Microsoft.XLANGs.Core.PredicateGroup[] _predicates0 = {
            new PredicateSet0_0()
        };


        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(ResequencerGoService).GetField("SequenceMsgInPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ResequencerGoService), "SequenceMsgInPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(ResequencerGoService).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ResequencerGoService), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(ESB.Extensions.Services.AdvanceItinerary),
                    typeof(ESB.Extensions.Services.PublishGoMsg)                    
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, _predicates0 , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "af35d228-1b87-4ed1-b8c6-baf5b552cb02", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "af35d228-1b87-4ed1-b8c6-baf5b552cb02", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "d2754a7c-b47b-41d3-8f0f-e7aa5d87e0b3", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "5f0f799a-1b54-4e5f-86da-c55e50049c4d", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "5f0f799a-1b54-4e5f-86da-c55e50049c4d", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "e3dce0f3-1e0a-40e8-b3ca-96d744edecaf", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "e3dce0f3-1e0a-40e8-b3ca-96d744edecaf", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "826c4149-2111-4aa1-bbe8-a3fed977689c", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "467043f9-9218-4b4f-9061-2fe1670531f4", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "467043f9-9218-4b4f-9061-2fe1670531f4", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "7934df79-696c-4946-8296-bf9acb88c6b1", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "826c4149-2111-4aa1-bbe8-a3fed977689c", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "dc6007e5-79fa-4573-b648-53c55477b188", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "e255dd9a-44c1-4d4f-a0c1-4bec15f0fe1a", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "e255dd9a-44c1-4d4f-a0c1-4bec15f0fe1a", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "dc6007e5-79fa-4573-b648-53c55477b188", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "37e79fb3-57ed-494c-9c4e-843657eeb32b", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "00000000-0000-0000-0000-000000000000", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "4071eea2-a13f-4a15-9b8c-b9444478fa05", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "4c15108b-3077-47a4-8c4e-6829345ef606", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "4c15108b-3077-47a4-8c4e-6829345ef606", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "4071eea2-a13f-4a15-9b8c-b9444478fa05", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "9064bd7e-6a7c-4d91-bc50-f433fd366f1e", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "3c32b44c-8339-45d2-a335-48d805c77c5a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(27, "3c32b44c-8339-45d2-a335-48d805c77c5a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(28, "9064bd7e-6a7c-4d91-bc50-f433fd366f1e", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(29, "37e79fb3-57ed-494c-9c4e-843657eeb32b", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(30, "51e1175e-c0c4-4681-beb2-5f14a2f77e1a", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(31, "995720ff-6cb1-4f2e-bb79-16ab1e1f1b40", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(32, "995720ff-6cb1-4f2e-bb79-16ab1e1f1b40", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(33, "15f10a3c-08f0-408e-a8bc-c3e6c49714a4", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(34, "15f10a3c-08f0-408e-a8bc-c3e6c49714a4", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(35, "35e35efb-825e-4515-aff2-84751348a49e", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(36, "51e1175e-c0c4-4681-beb2-5f14a2f77e1a", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(37, "d2754a7c-b47b-41d3-8f0f-e7aa5d87e0b3", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(38, "00000000-0000-0000-0000-000000000000", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,38,38,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,3,3,3,37,38,38,38,38,};
        public static int[] __progressLocation2 = new int[] { 6,6,6,6,6,6,6,6,6,7,7,7,7,7,8,8,9,9,10,10,11,11,12,12,12,12,12,12,12,10,13,13,14,15,15,16,16,17,18,19,19,19,29,29,29,29,};
        public static int[] __progressLocation3 = new int[] { 21,21,21,21,21,21,22,22,23,23,24,25,25,26,26,27,27,28,28,28,28,};
        public static int[] __progressLocation4 = new int[] { 30,30,31,31,32,33,33,33,34,35,35,36,36,};

        public static int[][] __progressLocations = new int[5] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3,__progressLocation4};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __ResequencerGoService_root_0 __ctx0__ = (__ResequencerGoService_root_0)_stateMgrs[0];
            __ResequencerGoService_1 __ctx1__ = (__ResequencerGoService_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                SequenceMsgInPort = new XmlDocumentPortType(0, this);
                FaultProcessing = new FaultProcessingType(1, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], SequenceMsgInPort, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __ResequencerGoService_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __ResequencerGoService_root_0 __ctx0__ = (__ResequencerGoService_root_0)_stateMgrs[0];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __ResequencerGoService_1 __ctx1__ = (__ResequencerGoService_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!SequenceMsgInPort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__SequenceMsgIn != null)
                    __ctx1__.UnrefMessage(__ctx1__.__SequenceMsgIn);
                __ctx1__.__SequenceMsgIn = new __messagetype_System_Xml_XmlDocument("SequenceMsgIn", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__SequenceMsgIn);
                SequenceMsgInPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__SequenceMsgIn, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (SequenceMsgInPort != null)
                {
                    SequenceMsgInPort.Close(__ctx1__, __seg__);
                    SequenceMsgInPort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__SequenceMsgIn);
                    __edata.PortName = @"SequenceMsgInPort";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx2__ = new __TxItinerary_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__SequenceMsgIn != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SequenceMsgIn);
                    __ctx1__.__SequenceMsgIn = null;
                }
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                Tracker.FireEvent(__eventLocations[37],__eventData[10],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[38],__eventData[16],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 12;
            case 12:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __ResequencerGoService_1 __ctx1__ = (__ResequencerGoService_1)_stateMgrs[1];
            __TxSend_3 __ctx3__ = (__TxSend_3)_stateMgrs[3];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__resolvers = default(Microsoft.Practices.ESB.Itinerary.ResolverCollection);
                __ctx2__.__resolutionDictionary = default(ESB.Extensions.Resolution.ResolutionDictionary);
                __ctx2__.__resolver = default(System.String);
                __ctx2__.__itineraryStep = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper);
                __ctx2__.__itinerary = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper);
                __ctx2__.__go = default(ESB.Extensions.Resolutions.Go);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__resolvers = new Microsoft.Practices.ESB.Itinerary.ResolverCollection();
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.__resolutionDictionary = new ESB.Extensions.Resolution.ResolutionDictionary();
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx2__.__resolver = "";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx2__.__itineraryStep = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx2__.__itinerary = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx2__.__go = new ESB.Extensions.Resolutions.Go();
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx2__.__itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(CreateMessageWrapperForUserCode(__ctx1__.__SequenceMsgIn));
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                __ctx2__.__itineraryStep.ItineraryStep = __ctx2__.__itinerary.Itinerary.GetItineraryStep(CreateMessageWrapperForUserCode(__ctx1__.__SequenceMsgIn));
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                System.Diagnostics.Trace.WriteLine("ServiceName: " + __ctx2__.__itineraryStep.ItineraryStep.ServiceName);
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                System.Diagnostics.Trace.WriteLine("ServiceType: " + System.Convert.ToString(__ctx2__.__itineraryStep.ItineraryStep.ServiceType));
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                System.Diagnostics.Trace.WriteLine("Itinerary: " + __ctx2__.__itineraryStep.ItineraryStep.Itinerary.ToString());
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                __ctx2__.__resolvers = __ctx2__.__itineraryStep.ItineraryStep.ResolverCollection;
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                System.Diagnostics.Trace.WriteLine("    Resolver Collection Count: " + System.Convert.ToString(__ctx2__.__resolvers.Count));
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __condition__ = __ctx2__.__resolvers.Count > 0;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 30;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                __ctx2__.__resolvers.MoveNext();
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                __ctx2__.__resolver = __ctx2__.__resolvers.Current;
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                System.Diagnostics.Trace.WriteLine("        Resolver : " + __ctx2__.__resolver);
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                System.Diagnostics.Trace.WriteLine("        Resolution structure");
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                __ctx2__.__resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(CreateMessageWrapperForUserCode(__ctx1__.__SequenceMsgIn), __ctx2__.__resolver);
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                __ctx2__.__go = (ESB.Extensions.Resolutions.Go)__ctx2__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.Go");
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                System.Diagnostics.Trace.WriteLine(__ctx2__.__go.ToString());
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                throw new System.ApplicationException("There were no resolvers associated with this service config.");
            case 32:
                if ( !PreProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__resolver = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                Tracker.FireEvent(__eventLocations[14],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 33;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                __condition__ = ((__ctx1__.__SequenceMsgIn.GetPropertyValueNoThrow(typeof(ESB.Extensions.Schemas.IsLastMessageInBatch)) != null)) && ((System.String)__ctx1__.__SequenceMsgIn.GetPropertyValueThrows(typeof(ESB.Extensions.Schemas.IsLastMessageInBatch)) == "true");
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 38;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                if ( !PreProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 36;
            case 36:
                __ctx2__.__go.ShouldGenerateGoMsg = false;
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                Tracker.FireEvent(__eventLocations[17],__eventData[4],_stateMgrs[2].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                if ( !PreProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 39;
            case 39:
                if ( !PreProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 40;
            case 40:
                __ctx3__ = new __TxSend_3(this);
                _stateMgrs[3] = __ctx3__;
                if ( !PostProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 41;
            case 41:
                __ctx2__.StartContext(__seg__, __ctx3__);
                if ( !PostProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 42:
                if ( !PreProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__go = null;
                Tracker.FireEvent(__eventLocations[29],__eventData[10],_stateMgrs[2].TrackDataStream );
                __ctx3__.Finally();
                if (__ctx3__ != null)
                    __ctx3__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 43;
            case 43:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                if ( !PreProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 45;
            case 45:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __ResequencerGoService_1 __ctx1__ = (__ResequencerGoService_1)_stateMgrs[1];
            __TxSend_3 __ctx3__ = (__TxSend_3)_stateMgrs[3];

            switch (__seg__.Progress)
            {
            case 0:
                if (__ctx3__.LockWrite(0, _segments[3]) == false)  // __TxItinerary_2.__itinerary
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if (__ctx3__.LockRead(1, _segments[3]) == false)  // __ResequencerGoService_1.__SequenceMsgIn
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if (__ctx3__.LockRead(2, _segments[3]) == false)  // __TxItinerary_2.__go
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx3__.__itinerary = (Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper)__ctx3__.SaveObject(__ctx2__.__itinerary, 0);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __condition__ = __ctx3__.__itinerary.Itinerary.HasNextService();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 10;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.AdvanceItinerary), new object[] {__ctx1__.__SequenceMsgIn});
                goto case 9;
            case 9:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx1__.__SequenceMsgIn);
                    Tracker.FireEvent(__eventLocations[23],__edata,_stateMgrs[3].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[25],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __condition__ = __ctx2__.__go.ShouldGenerateGoMsg;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 17;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[26],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx3__, typeof(ESB.Extensions.Services.PublishGoMsg), new object[] {__ctx2__.__go});
                goto case 16;
            case 16:
                Tracker.FireEvent(__eventLocations[27],__eventData[9],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[28],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if (!__ctx3__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx3__.OnCommit();
                goto case 20;
            case 20:
                __seg__.SegmentDone();
                _segments[2].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment4(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[4];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __ResequencerGoService_root_0 __ctx0__ = (__ResequencerGoService_root_0)_stateMgrs[0];
            __TxItinerary_2 __ctx2__ = (__TxItinerary_2)_stateMgrs[2];
            __ResequencerGoService_1 __ctx1__ = (__ResequencerGoService_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[30],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[31],__eventData[12],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx2__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__SequenceMsgIn));

                    if (__ctx2__.__FaultMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = __FaultMessage;
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                }
                __ctx2__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[32],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[33],__eventData[13],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx2__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[34],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[35],__eventData[14],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[36],__eventData[15],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 386 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\AdvanceItinerary.odx"
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "PublishDirectPort",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eCallable|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eExecable
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class AdvanceItinerary : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = true;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy(
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eMessage, "") ] System.Xml.XmlDocument InboundMessage)
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(AdvanceItinerary));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return false; } }

        internal bool IsExeced = false;

        static AdvanceItinerary()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 2, 3)
            };

            _Locks = 0;
            _rootContext = new __AdvanceItinerary_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[3];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public AdvanceItinerary(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "AdvanceItinerary", tracker)
        {
            ConstructorHelper();
        }

        public AdvanceItinerary(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "AdvanceItinerary")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>873f4197-8f9a-47be-8b2f-6c460ab2d15e</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>8f500bc5-c332-4875-9496-a58efd1fe3c9</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>InboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>ea175975-ea1e-431b-a207-b89e60e6f2dc</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Advance Itinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>32848f6e-5a6c-43b2-8d25-1ccced8e4b88</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Current Itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>fb8fddf3-13e4-4e56-a954-34fee82b40d1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Has Next Service?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>e14efc8e-6a01-4bda-a2cf-44c244b84535</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>fd8cd3d2-8e7d-4d14-a28b-e8f9ccd00cbd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct OutboundMessage</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>38ab81e7-c63b-48af-a24d-063329f3f39e</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>8b0074a4-5369-491a-9272-00083cd860bd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign OutboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>c68ef87a-9f71-46af-8288-f7c17a7e8137</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Decide Sequence, Batch or None?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>9e576805-ea54-4f1f-99aa-42b004d5e218</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>BatchId &amp;&amp; SequenceId</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>9317a6ff-1f10-44f6-a855-11e2a92854b0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Outbound Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>202e8a98-61e7-433b-9c32-fce7900fc8a4</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>BatchId</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>a16d5d19-e80a-4051-b40d-35b4b3781664</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Outbound Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>764cf7e5-b95a-4d18-a3f2-f5e93ab23c87</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>0be2f2e2-00a4-411b-896f-35b94225a6fe</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Outbound Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ff209b0e-dfb5-4f9f-91ab-27ed61295531</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>c31fd659-6be3-4c64-92d3-d5c4ca984449</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>51b2cb4d-6232-4a8f-98d0-4dd357efd599</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>batchIdExists</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>c7f061ed-bf46-4fe8-87f6-d4a7a0d6ac0a</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>sequenceIdExists</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>636d86c5-2f3b-4533-b4df-1c356806f550</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>10fa6ef3-1e98-4984-8884-6688c5db332a</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolutoin Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>63be0bde-e684-4b51-99bb-7b895d63bc71</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>7bbf3cd2-0444-4baf-b6ea-b1041e326dd3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>aa64bd10-5263-4606-b254-148c927c596f</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>33320ffa-6275-4f44-84a3-5b716719749d</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'AdvanceItinerary'</ActionName><IsAtomic>0</IsAtomic><Line>386</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope61'</ActionName><IsAtomic>0</IsAtomic><Line>400</Line><Position>13</Position><ShapeID>'ea175975-ea1e-431b-a207-b89e60e6f2dc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>411</Line><Position>41</Position><ShapeID>'32848f6e-5a6c-43b2-8d25-1ccced8e4b88'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>413</Line><Position>21</Position><ShapeID>'fb8fddf3-13e4-4e56-a954-34fee82b40d1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>416</Line><Position>25</Position><ShapeID>'fd8cd3d2-8e7d-4d14-a28b-e8f9ccd00cbd'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>427</Line><Position>25</Position><ShapeID>'c68ef87a-9f71-46af-8288-f7c17a7e8137'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>430</Line><Position>29</Position><ShapeID>'9317a6ff-1f10-44f6-a855-11e2a92854b0'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>435</Line><Position>29</Position><ShapeID>'a16d5d19-e80a-4051-b40d-35b4b3781664'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>440</Line><Position>29</Position><ShapeID>'0be2f2e2-00a4-411b-896f-35b94225a6fe'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>447</Line><Position>21</Position><ShapeID>'636d86c5-2f3b-4533-b4df-1c356806f550'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>450</Line><Position>25</Position><ShapeID>'10fa6ef3-1e98-4984-8884-6688c5db332a'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>466</Line><Position>25</Position><ShapeID>'aa64bd10-5263-4606-b254-148c927c596f'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>468</Line><Position>25</Position><ShapeID>'33320ffa-6275-4f44-84a3-5b716719749d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='263b43c0-2e00-4735-a537-fd95182032d3' LowerBound='1.1' HigherBound='106.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='572e9d8a-8840-41c8-a207-0725ca2119ac' ParentLink='Module_ServiceDeclaration' LowerBound='16.1' HigherBound='105.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='AdvanceItinerary' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='CorrelationDeclaration' OID='265a3b9a-7b5a-45c7-96e4-6a7058b8d30d' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='23.1' HigherBound='24.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.ItineraryAdvanceCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ItineraryAdvanceCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='2c236564-bf4b-419b-b54f-ee7990f65e8e' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='71.83' HigherBound='71.112'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='0be2f2e2-00a4-411b-896f-35b94225a6fe' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_1' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='StatementRef' OID='c2d95489-7409-469f-82a9-4b3fc49ba5b5' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='66.83' HigherBound='66.112'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='a16d5d19-e80a-4051-b40d-35b4b3781664' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_2' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='StatementRef' OID='49e4b284-dc19-4c04-ab43-89457d43eb72' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='61.83' HigherBound='61.112'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='9317a6ff-1f10-44f6-a855-11e2a92854b0' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_4' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='CorrelationDeclaration' OID='d556b2b3-4464-47f2-bb76-5ef716eb224a' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='24.1' HigherBound='25.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.BatchCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='BatchCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='7897c45c-36a3-4424-bad3-46ce08036906' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='66.114' HigherBound='66.132'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='a16d5d19-e80a-4051-b40d-35b4b3781664' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_3' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='CorrelationDeclaration' OID='39da0197-dca4-48d4-a612-2a7683bb315c' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='25.1' HigherBound='26.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.SequenceCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='a9aabe73-6d17-49dc-93d4-ec9c85547428' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='61.114' HigherBound='61.135'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='9317a6ff-1f10-44f6-a855-11e2a92854b0' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_5' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='358a19a1-1412-438c-ac0d-650d3b4972a8' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='26.1' HigherBound='27.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='975e377c-b980-404b-bd3f-f0b567bc3bd2' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='27.1' HigherBound='28.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='OutboundMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='873f4197-8f9a-47be-8b2f-6c460ab2d15e' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='MessageDeclaration' OID='8f500bc5-c332-4875-9496-a58efd1fe3c9' ParentLink='ServiceBody_Declaration' LowerBound='28.15' HigherBound='28.60'>
                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='InboundMessage' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Scope' OID='ea175975-ea1e-431b-a207-b89e60e6f2dc' ParentLink='ServiceBody_Statement' LowerBound='30.1' HigherBound='103.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Advance Itinerary' />
                    <om:Property Name='Signal' Value='False' />
                    <om:Element Type='VariableAssignment' OID='32848f6e-5a6c-43b2-8d25-1ccced8e4b88' ParentLink='ComplexStatement_Statement' LowerBound='41.1' HigherBound='43.1'>
                        <om:Property Name='Expression' Value='itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(InboundMessage);&#xD;&#xA;' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Current Itinerary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Decision' OID='fb8fddf3-13e4-4e56-a954-34fee82b40d1' ParentLink='ComplexStatement_Statement' LowerBound='43.1' HigherBound='74.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Has Next Service?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='e14efc8e-6a01-4bda-a2cf-44c244b84535' ParentLink='ReallyComplexStatement_Branch' LowerBound='44.21' HigherBound='74.1'>
                            <om:Property Name='Expression' Value='itinerary.Itinerary.HasNextService()' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='YES' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Construct' OID='fd8cd3d2-8e7d-4d14-a28b-e8f9ccd00cbd' ParentLink='ComplexStatement_Statement' LowerBound='46.1' HigherBound='57.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct OutboundMessage' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageRef' OID='38ab81e7-c63b-48af-a24d-063329f3f39e' ParentLink='Construct_MessageRef' LowerBound='47.35' HigherBound='47.50'>
                                    <om:Property Name='Ref' Value='OutboundMessage' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageAssignment' OID='8b0074a4-5369-491a-9272-00083cd860bd' ParentLink='ComplexStatement_Statement' LowerBound='49.1' HigherBound='56.1'>
                                    <om:Property Name='Expression' Value='OutboundMessage = InboundMessage;&#xD;&#xA;OutboundMessage(*) = InboundMessage(*);&#xD;&#xA;Microsoft.Practices.ESB.Itinerary.ItineraryHelper.AdvanceItinerary(OutboundMessage);&#xD;&#xA;&#xD;&#xA;batchIdExists = (ESB.Extensions.Schemas.BatchId exists InboundMessage);&#xD;&#xA;sequenceIdExists = (ESB.Extensions.Schemas.SequenceId exists InboundMessage);&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Assign OutboundMessage' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Decision' OID='c68ef87a-9f71-46af-8288-f7c17a7e8137' ParentLink='ComplexStatement_Statement' LowerBound='57.1' HigherBound='73.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Decide Sequence, Batch or None?' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='DecisionBranch' OID='9e576805-ea54-4f1f-99aa-42b004d5e218' ParentLink='ReallyComplexStatement_Branch' LowerBound='58.25' HigherBound='63.1'>
                                    <om:Property Name='Expression' Value='sequenceIdExists &amp;&amp; batchIdExists' />
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='BatchId &amp;&amp; SequenceId' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Send' OID='9317a6ff-1f10-44f6-a855-11e2a92854b0' ParentLink='ComplexStatement_Statement' LowerBound='60.1' HigherBound='62.1'>
                                        <om:Property Name='PortName' Value='PublishDirectPort' />
                                        <om:Property Name='MessageName' Value='OutboundMessage' />
                                        <om:Property Name='OperationName' Value='XmlDocument' />
                                        <om:Property Name='OperationMessageName' Value='Request' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Send Outbound Message' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='DecisionBranch' OID='202e8a98-61e7-433b-9c32-fce7900fc8a4' ParentLink='ReallyComplexStatement_Branch' LowerBound='63.30' HigherBound='68.1'>
                                    <om:Property Name='Expression' Value='batchIdExists' />
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='BatchId' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='Send' OID='a16d5d19-e80a-4051-b40d-35b4b3781664' ParentLink='ComplexStatement_Statement' LowerBound='65.1' HigherBound='67.1'>
                                        <om:Property Name='PortName' Value='PublishDirectPort' />
                                        <om:Property Name='MessageName' Value='OutboundMessage' />
                                        <om:Property Name='OperationName' Value='XmlDocument' />
                                        <om:Property Name='OperationMessageName' Value='Request' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Send Outbound Message' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='DecisionBranch' OID='764cf7e5-b95a-4d18-a3f2-f5e93ab23c87' ParentLink='ReallyComplexStatement_Branch'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Else' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='Send' OID='0be2f2e2-00a4-411b-896f-35b94225a6fe' ParentLink='ComplexStatement_Statement' LowerBound='70.1' HigherBound='72.1'>
                                        <om:Property Name='PortName' Value='PublishDirectPort' />
                                        <om:Property Name='MessageName' Value='OutboundMessage' />
                                        <om:Property Name='OperationName' Value='XmlDocument' />
                                        <om:Property Name='OperationMessageName' Value='Request' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Send Outbound Message' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='ff209b0e-dfb5-4f9f-91ab-27ed61295531' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='c31fd659-6be3-4c64-92d3-d5c4ca984449' ParentLink='Scope_VariableDeclaration' LowerBound='33.1' HigherBound='34.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='itinerary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='51b2cb4d-6232-4a8f-98d0-4dd357efd599' ParentLink='Scope_VariableDeclaration' LowerBound='34.1' HigherBound='35.1'>
                        <om:Property Name='InitialValue' Value='true' />
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.Boolean' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='batchIdExists' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='c7f061ed-bf46-4fe8-87f6-d4a7a0d6ac0a' ParentLink='Scope_VariableDeclaration' LowerBound='35.1' HigherBound='36.1'>
                        <om:Property Name='InitialValue' Value='true' />
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.Boolean' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='sequenceIdExists' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Catch' OID='636d86c5-2f3b-4533-b4df-1c356806f550' ParentLink='Scope_Catch' LowerBound='77.1' HigherBound='101.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='10fa6ef3-1e98-4984-8884-6688c5db332a' ParentLink='Catch_Statement' LowerBound='80.1' HigherBound='96.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolutoin Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='63be0bde-e684-4b51-99bb-7b895d63bc71' ParentLink='Construct_MessageRef' LowerBound='81.35' HigherBound='81.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='7bbf3cd2-0444-4baf-b6ea-b1041e326dd3' ParentLink='ComplexStatement_Statement' LowerBound='83.1' HigherBound='95.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, InboundMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='aa64bd10-5263-4606-b254-148c927c596f' ParentLink='Catch_Statement' LowerBound='96.1' HigherBound='98.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='33320ffa-6275-4f44-84a3-5b716719749d' ParentLink='Catch_Statement' LowerBound='98.1' HigherBound='100.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='f6223bc7-22f8-4224-bf43-1ee38ce94ee1' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='19.1' HigherBound='21.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PublishDirectPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='f01a025c-cec6-4fd3-bfc1-7ad50e29db81' ParentLink='PortDeclaration_CLRAttribute' LowerBound='19.1' HigherBound='20.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='6bfe5bb7-0eaa-4d12-8334-655ba54d5278' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='21.1' HigherBound='23.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='45' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='2ef83349-5402-47a8-a763-19889d0df22a' ParentLink='PortDeclaration_CLRAttribute' LowerBound='21.1' HigherBound='22.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='CorrelationType' OID='bea2cf4c-a0fa-4202-be12-dfddb32d5af1' ParentLink='Module_CorrelationType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ItineraryAdvanceCT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PropertyRef' OID='f935e21c-8590-4e08-be93-453a30d6a14d' ParentLink='CorrelationType_PropertyRef' LowerBound='6.9' HigherBound='6.38'>
                <om:Property Name='Ref' Value='BTS.OutboundTransportLocation' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='9d326494-e1a1-453b-8a18-6e20fc6343d3' ParentLink='CorrelationType_PropertyRef' LowerBound='6.40' HigherBound='6.65'>
                <om:Property Name='Ref' Value='BTS.OutboundTransportType' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='4a7cf80a-e7e6-4c42-a790-5a98b671132d' ParentLink='CorrelationType_PropertyRef' LowerBound='6.67' HigherBound='6.126'>
                <om:Property Name='Ref' Value='Microsoft.Practices.ESB.Itinerary.Schemas.IsRequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='f6bc5d99-4600-4fc7-8512-4879b011cc42' ParentLink='CorrelationType_PropertyRef' LowerBound='6.128' HigherBound='6.181'>
                <om:Property Name='Ref' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='9014d48b-5d42-4537-a120-e4c4a35d4141' ParentLink='CorrelationType_PropertyRef' LowerBound='6.183' HigherBound='6.237'>
                <om:Property Name='Ref' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='fc83f684-a424-4bf2-b005-9baf6f2c18cb' ParentLink='CorrelationType_PropertyRef' LowerBound='6.239' HigherBound='6.292'>
                <om:Property Name='Ref' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
        </om:Element>
        <om:Element Type='CorrelationType' OID='5485c49c-c347-42cc-a631-cf5ab35d1063' ParentLink='Module_CorrelationType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='BatchCT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PropertyRef' OID='b42318d3-95cf-41c7-8e50-7b180fdbe91c' ParentLink='CorrelationType_PropertyRef' LowerBound='10.9' HigherBound='10.39'>
                <om:Property Name='Ref' Value='ESB.Extensions.Schemas.BatchId' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
        </om:Element>
        <om:Element Type='CorrelationType' OID='ecc7fcab-452b-43cb-b440-7d57849f09a0' ParentLink='Module_CorrelationType' LowerBound='12.1' HigherBound='16.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SequenceCT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PropertyRef' OID='f2517491-cf07-49da-9072-d6e1f2e68ab8' ParentLink='CorrelationType_PropertyRef' LowerBound='14.9' HigherBound='14.39'>
                <om:Property Name='Ref' Value='ESB.Extensions.Schemas.BatchId' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='PropertyRef' OID='aaed341c-13b8-433d-9a6d-3fba6c0756ba' ParentLink='CorrelationType_PropertyRef' LowerBound='14.41' HigherBound='14.74'>
                <om:Property Name='Ref' Value='ESB.Extensions.Schemas.SequenceId' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyRef_1' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __AdvanceItinerary_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __AdvanceItinerary_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "AdvanceItinerary")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                AdvanceItinerary __svc__ = (AdvanceItinerary)_service;
                __AdvanceItinerary_root_0 __ctx0__ = (__AdvanceItinerary_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                if (__svc__.PublishDirectPort != null)
                {
                    __svc__.PublishDirectPort.Close(this, null);
                    __svc__.PublishDirectPort = null;
                }
                base.Finally();
            }

        }


        [System.SerializableAttribute]
        public class __AdvanceItinerary_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __AdvanceItinerary_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "AdvanceItinerary")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                AdvanceItinerary __svc__ = (AdvanceItinerary)_service;
                __AdvanceItinerary_1 __ctx1__ = (__AdvanceItinerary_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("OutboundMessage")]
            public __messagetype_System_Xml_XmlDocument __OutboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("InboundMessage")]
            public __messagetype_System_Xml_XmlDocument __InboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ItineraryAdvanceCS")]
            internal Microsoft.XLANGs.Core.Correlation __ItineraryAdvanceCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("BatchCS")]
            internal Microsoft.XLANGs.Core.Correlation __BatchCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceCS")]
            internal Microsoft.XLANGs.Core.Correlation __SequenceCS;
        }


        [System.SerializableAttribute]
        public class ____scope61_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope61_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope61")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[3];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                AdvanceItinerary __svc__ = (AdvanceItinerary)_service;
                __AdvanceItinerary_1 __ctx1__ = (__AdvanceItinerary_1)(__svc__._stateMgrs[1]);
                ____scope61_2 __ctx2__ = (____scope61_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx1__ != null && __ctx1__.__OutboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = null;
                }
                if (__ctx1__ != null && __ctx1__.__BatchCS != null)
                    __ctx1__.__BatchCS = null;
                if (__ctx1__ != null && __ctx1__.__ItineraryAdvanceCS != null)
                    __ctx1__.__ItineraryAdvanceCS = null;
                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("batchIdExists")]
            internal System.Boolean __batchIdExists;
            [Microsoft.XLANGs.Core.UserVariableAttribute("sequenceIdExists")]
            internal System.Boolean __sequenceIdExists;
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = new Microsoft.XLANGs.Core.CorrelationType[] { new ItineraryAdvanceCT(), new BatchCT(), new SequenceCT() };
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("PublishDirectPort")]
        internal XmlDocumentPortType PublishDirectPort;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(AdvanceItinerary).GetField("PublishDirectPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(AdvanceItinerary), "PublishDirectPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(AdvanceItinerary).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(AdvanceItinerary), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }


        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "ea175975-ea1e-431b-a207-b89e60e6f2dc", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "32848f6e-5a6c-43b2-8d25-1ccced8e4b88", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "32848f6e-5a6c-43b2-8d25-1ccced8e4b88", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "fb8fddf3-13e4-4e56-a954-34fee82b40d1", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "fd8cd3d2-8e7d-4d14-a28b-e8f9ccd00cbd", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "fd8cd3d2-8e7d-4d14-a28b-e8f9ccd00cbd", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "c68ef87a-9f71-46af-8288-f7c17a7e8137", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "9317a6ff-1f10-44f6-a855-11e2a92854b0", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "9317a6ff-1f10-44f6-a855-11e2a92854b0", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "a16d5d19-e80a-4051-b40d-35b4b3781664", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "a16d5d19-e80a-4051-b40d-35b4b3781664", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "0be2f2e2-00a4-411b-896f-35b94225a6fe", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "0be2f2e2-00a4-411b-896f-35b94225a6fe", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "c68ef87a-9f71-46af-8288-f7c17a7e8137", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "fb8fddf3-13e4-4e56-a954-34fee82b40d1", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "636d86c5-2f3b-4533-b4df-1c356806f550", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "10fa6ef3-1e98-4984-8884-6688c5db332a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "10fa6ef3-1e98-4984-8884-6688c5db332a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "aa64bd10-5263-4606-b254-148c927c596f", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "aa64bd10-5263-4606-b254-148c927c596f", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "33320ffa-6275-4f44-84a3-5b716719749d", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "636d86c5-2f3b-4533-b4df-1c356806f550", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "ea175975-ea1e-431b-a207-b89e60e6f2dc", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,1,1,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,2,2,2,26,1,1,1,1,};
        public static int[] __progressLocation2 = new int[] { 5,5,5,5,5,5,6,7,7,8,8,9,10,10,11,11,11,12,10,10,10,13,13,13,14,14,15,15,15,16,16,17,18,18,18,18,};
        public static int[] __progressLocation3 = new int[] { 19,19,20,20,21,22,22,22,23,24,24,25,25,};

        public static int[][] __progressLocations = new int[4] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __AdvanceItinerary_1 __ctx1__ = (__AdvanceItinerary_1)_stateMgrs[1];
            __AdvanceItinerary_root_0 __ctx0__ = (__AdvanceItinerary_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                PublishDirectPort = new XmlDocumentPortType(0, this);
                FaultProcessing = new FaultProcessingType(1, this);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __AdvanceItinerary_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __AdvanceItinerary_1 __ctx1__ = (__AdvanceItinerary_1)_stateMgrs[1];
            __AdvanceItinerary_root_0 __ctx0__ = (__AdvanceItinerary_root_0)_stateMgrs[0];
            ____scope61_2 __ctx2__ = (____scope61_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__InboundMessage = new __messagetype_System_Xml_XmlDocument("InboundMessage", __ctx1__);
                __ctx1__.__InboundMessage.CopyFrom((Microsoft.XLANGs.Core.XMessage)Args[0]);
                __ctx1__.RefMessage(__ctx1__.__InboundMessage);
                __ctx1__.__InboundMessage.ConstructionCompleteEvent();
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[2],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                __ctx2__ = new ____scope61_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                if (PublishDirectPort != null)
                {
                    PublishDirectPort.Close(__ctx1__, __seg__);
                    PublishDirectPort = null;
                }
                Tracker.FireEvent(__eventLocations[26],__eventData[12],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    Tracker.FireEvent(__eventLocations[0],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 10;
            case 10:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __AdvanceItinerary_1 __ctx1__ = (__AdvanceItinerary_1)_stateMgrs[1];
            __AdvanceItinerary_root_0 __ctx0__ = (__AdvanceItinerary_root_0)_stateMgrs[0];
            ____scope61_2 __ctx2__ = (____scope61_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__itinerary = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper);
                __ctx2__.__batchIdExists = default(System.Boolean);
                __ctx2__.__sequenceIdExists = default(System.Boolean);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__itinerary = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.__batchIdExists = true;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx2__.__sequenceIdExists = true;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx2__.__itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __condition__ = __ctx2__.__itinerary.Itinerary.HasNextService();
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 32;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                {
                    __messagetype_System_Xml_XmlDocument __OutboundMessage = new __messagetype_System_Xml_XmlDocument("OutboundMessage", __ctx1__);

                    __OutboundMessage.CopyFrom(__ctx1__.__InboundMessage);
                    __OutboundMessage.CopyContextPropertiesFrom(__ctx1__.__InboundMessage);
                    Microsoft.Practices.ESB.Itinerary.ItineraryHelper.AdvanceItinerary(CreateMessageWrapperForUserCode(__OutboundMessage));
                    __ctx2__.__batchIdExists = ((__ctx1__.__InboundMessage.GetPropertyValueNoThrow(typeof(ESB.Extensions.Schemas.BatchId)) != null));
                    __ctx2__.__sequenceIdExists = ((__ctx1__.__InboundMessage.GetPropertyValueNoThrow(typeof(ESB.Extensions.Schemas.SequenceId)) != null));

                    if (__ctx1__.__OutboundMessage != null)
                        __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = __OutboundMessage;
                    __ctx1__.RefMessage(__ctx1__.__OutboundMessage);
                }
                __ctx1__.__OutboundMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    Tracker.FireEvent(__eventLocations[9],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                __condition__ = __ctx2__.__sequenceIdExists && __ctx2__.__batchIdExists;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 19;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[7],_stateMgrs[2].TrackDataStream );
                __ctx1__.__ItineraryAdvanceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                __ctx1__.__SequenceCS = new Microsoft.XLANGs.Core.Correlation(this, 2, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                PublishDirectPort.SendMessage(0, __ctx1__.__OutboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ItineraryAdvanceCS, __ctx1__.__SequenceCS }, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    __edata.PortName = @"PublishDirectPort";
                    Tracker.FireEvent(__eventLocations[12],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                __condition__ = __ctx2__.__batchIdExists;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 26;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[7],_stateMgrs[2].TrackDataStream );
                __ctx1__.__ItineraryAdvanceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                __ctx1__.__BatchCS = new Microsoft.XLANGs.Core.Correlation(this, 1, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                PublishDirectPort.SendMessage(0, __ctx1__.__OutboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ItineraryAdvanceCS, __ctx1__.__BatchCS }, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if (__ctx1__ != null && __ctx1__.__BatchCS != null)
                    __ctx1__.__BatchCS = null;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    __edata.PortName = @"PublishDirectPort";
                    Tracker.FireEvent(__eventLocations[14],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 30;
            case 26:
                if ( !PreProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[7],_stateMgrs[2].TrackDataStream );
                __ctx1__.__ItineraryAdvanceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 27;
            case 27:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                PublishDirectPort.SendMessage(0, __ctx1__.__OutboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ItineraryAdvanceCS }, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    __edata.PortName = @"PublishDirectPort";
                    Tracker.FireEvent(__eventLocations[16],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__ItineraryAdvanceCS != null)
                    __ctx1__.__ItineraryAdvanceCS = null;
                if (__ctx1__ != null && __ctx1__.__OutboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = null;
                }
                Tracker.FireEvent(__eventLocations[17],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                if ( !PreProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 33;
            case 33:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 34;
            case 34:
                if ( !PreProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 35;
            case 35:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __AdvanceItinerary_1 __ctx1__ = (__AdvanceItinerary_1)_stateMgrs[1];
            __AdvanceItinerary_root_0 __ctx0__ = (__AdvanceItinerary_root_0)_stateMgrs[0];
            ____scope61_2 __ctx2__ = (____scope61_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx1__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));

                    if (__ctx1__.__FaultMessage != null)
                        __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = __FaultMessage;
                    __ctx1__.RefMessage(__ctx1__.__FaultMessage);
                }
                __ctx1__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[21],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx1__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[23],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[25],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 246 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\DynamicItineraryService.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "DocumentProcessing", "XmlDocument", 0, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ActivationPredicateAttribute(
        0,
        new bool[] {
            true,
            false,
            false
        },
        new System.Type[] {
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType)
        },
        new Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator[] {
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual
        },
        new System.Object[] {
            "DynamicItineraryService",
            "Pending",
            "Orchestration"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "DocumentProcessing",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class DynamicItineraryService : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(DynamicItineraryService));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static DynamicItineraryService()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 2, 3)
            };

            _Locks = 0;
            _rootContext = new __DynamicItineraryService_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[3];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public DynamicItineraryService(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "DynamicItineraryService", tracker)
        {
            ConstructorHelper();
        }

        public DynamicItineraryService(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "DynamicItineraryService")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>87ff6e05-998a-4e5d-b38e-13652c4360e2</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>45aa35f8-a8c7-42ce-a395-aa09054b3354</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>d4f5e8a1-a6ce-4197-9f6a-fb3d505b5e55</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>d29f7dfc-6340-46eb-9816-1303c72a59e8</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>eaa459a3-5522-4403-b70c-67da08e6594e</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>f224571d-896b-4436-9855-4e902c5dde2f</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Itinerary &amp; Resolution</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>b1ba8172-ddf4-4484-98af-fc2680d5cbd3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Current Itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d21ce64d-2e77-42b7-b1f9-12bb583c7da4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Retrieve Resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>7aa63c97-cfb7-4068-a495-e3c25f6069fb</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Any resolvers?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>041fcd27-303a-47f3-a886-8138207eb530</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>082b0fee-d1aa-46ce-aaa0-9e47d0b717f1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolve</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>2d0caf78-1e95-45d3-b810-86e11846a581</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>StartInitializeItinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>446d1b90-6acd-4f25-bcb5-a799dda5c0d5</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>InboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>cb87f091-28ee-40b6-93a8-44416d033939</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>newItineraryString</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>2e28a766-87ea-4d6b-b2c5-dfad51c19f13</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>b6e1e9cd-6c25-4fc1-a566-8b0dcd7eecef</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolutionDictionary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>11975fbe-0572-41c7-977e-dbf1c4139b1d</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>5f998f2e-6597-428d-be2d-ad3db55ce1e1</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>b24dbc7e-f9a7-46ae-898c-d5b5118718bd</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>itineraryStep</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>af75ddbb-865f-4e5f-b15f-ecd9e3de167a</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>newItineraryString</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>580a306a-0498-4b6e-ba3b-1b18a77cfab8</ShapeID>      <ParentLink>Scope_MessageDeclaration</ParentLink>                <shapeText>FaultMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>fb8ad8f8-676a-4868-9022-c8fcddb79f82</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>7b6167d1-f050-4709-a6dd-fcdae03ebb9c</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolution Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>8c55a9e6-6482-4799-9c9f-1cfd6b6eb98c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>1a5f7878-d648-4d17-9960-d52cfa523861</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>c31d348f-05f2-4f03-acb3-523553a312d7</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>0b231a1a-c45c-4c27-aa03-65456980c583</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'DynamicItineraryService'</ActionName><IsAtomic>0</IsAtomic><Line>246</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>256</Line><Position>259</Position><ShapeID>'45aa35f8-a8c7-42ce-a395-aa09054b3354'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope62'</ActionName><IsAtomic>0</IsAtomic><Line>258</Line><Position>13</Position><ShapeID>'f224571d-896b-4436-9855-4e902c5dde2f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>275</Line><Position>41</Position><ShapeID>'b1ba8172-ddf4-4484-98af-fc2680d5cbd3'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>282</Line><Position>31</Position><ShapeID>'d21ce64d-2e77-42b7-b1f9-12bb583c7da4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>285</Line><Position>21</Position><ShapeID>'7aa63c97-cfb7-4068-a495-e3c25f6069fb'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>288</Line><Position>46</Position><ShapeID>'082b0fee-d1aa-46ce-aaa0-9e47d0b717f1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>291</Line><Position>74</Position><ShapeID>'2d0caf78-1e95-45d3-b810-86e11846a581'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>297</Line><Position>21</Position><ShapeID>'fb8ad8f8-676a-4868-9022-c8fcddb79f82'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>300</Line><Position>25</Position><ShapeID>'7b6167d1-f050-4709-a6dd-fcdae03ebb9c'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>316</Line><Position>25</Position><ShapeID>'c31d348f-05f2-4f03-acb3-523553a312d7'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>318</Line><Position>25</Position><ShapeID>'0b231a1a-c45c-4c27-aa03-65456980c583'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='bf6928de-9530-4b74-81cd-e23ecbb68b96' LowerBound='1.1' HigherBound='84.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='d98c2db2-70b0-4927-aab8-e10b88fdc4ea' ParentLink='Module_ServiceDeclaration' LowerBound='4.1' HigherBound='83.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='DynamicItineraryService' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='MessageDeclaration' OID='52a14e6d-5e89-4c4c-9eff-dccaa320094b' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='11.1' HigherBound='12.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='InboundMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='87ff6e05-998a-4e5d-b38e-13652c4360e2' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='45aa35f8-a8c7-42ce-a395-aa09054b3354' ParentLink='ServiceBody_Statement' LowerBound='14.1' HigherBound='16.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='DocumentProcessing' />
                    <om:Property Name='MessageName' Value='InboundMessage' />
                    <om:Property Name='OperationName' Value='XmlDocument' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive Msg' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DNFPredicate' OID='d4f5e8a1-a6ce-4197-9f6a-fb3d505b5e55' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                        <om:Property Name='RHS' Value='&quot;DynamicItineraryService&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='d29f7dfc-6340-46eb-9816-1303c72a59e8' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                        <om:Property Name='RHS' Value='&quot;Pending&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='eaa459a3-5522-4403-b70c-67da08e6594e' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType' />
                        <om:Property Name='RHS' Value='&quot;Orchestration&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='f224571d-896b-4436-9855-4e902c5dde2f' ParentLink='ServiceBody_Statement' LowerBound='16.1' HigherBound='81.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Itinerary &amp; Resolution' />
                    <om:Property Name='Signal' Value='False' />
                    <om:Element Type='VariableAssignment' OID='b1ba8172-ddf4-4484-98af-fc2680d5cbd3' ParentLink='ComplexStatement_Statement' LowerBound='32.1' HigherBound='40.1'>
                        <om:Property Name='Expression' Value='// Retrieve the current itinerary step&#xD;&#xA;itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(InboundMessage);&#xD;&#xA;itineraryStep.ItineraryStep = itinerary.Itinerary.GetItineraryStep(InboundMessage);&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceName: &quot; + itineraryStep.ItineraryStep.ServiceName);&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceType: &quot; + System.Convert.ToString(itineraryStep.ItineraryStep.ServiceType));&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;Itinerary: &quot; + itineraryStep.ItineraryStep.Itinerary.ToString());' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Current Itinerary' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='d21ce64d-2e77-42b7-b1f9-12bb583c7da4' ParentLink='ComplexStatement_Statement' LowerBound='40.1' HigherBound='43.1'>
                        <om:Property Name='Expression' Value='resolvers = itineraryStep.ItineraryStep.ResolverCollection;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;    Resolver Collection Count: &quot; + System.Convert.ToString(resolvers.Count));' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Retrieve Resolvers' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Decision' OID='7aa63c97-cfb7-4068-a495-e3c25f6069fb' ParentLink='ComplexStatement_Statement' LowerBound='43.1' HigherBound='52.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Any resolvers?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='041fcd27-303a-47f3-a886-8138207eb530' ParentLink='ReallyComplexStatement_Branch' LowerBound='44.21' HigherBound='52.1'>
                            <om:Property Name='Expression' Value='resolvers.MoveNext()' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='YES' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='082b0fee-d1aa-46ce-aaa0-9e47d0b717f1' ParentLink='ComplexStatement_Statement' LowerBound='46.1' HigherBound='49.1'>
                                <om:Property Name='Expression' Value='resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(InboundMessage, resolvers.Current);&#xD;&#xA;newItineraryString = resolutionDictionary.GetString(&quot;Microsoft.Practices.ESB.Itinerary.AsXml&quot;);&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Resolve' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Exec' OID='2d0caf78-1e95-45d3-b810-86e11846a581' ParentLink='ComplexStatement_Statement' LowerBound='49.1' HigherBound='51.1'>
                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.InitializeItinerary' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='StartInitializeItinerary' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Parameter' OID='446d1b90-6acd-4f25-bcb5-a799dda5c0d5' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='InboundMessage' />
                                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='cb87f091-28ee-40b6-93a8-44416d033939' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='newItineraryString' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='2e28a766-87ea-4d6b-b2c5-dfad51c19f13' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='b6e1e9cd-6c25-4fc1-a566-8b0dcd7eecef' ParentLink='Scope_VariableDeclaration' LowerBound='20.1' HigherBound='21.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='ESB.Extensions.Resolution.ResolutionDictionary' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolutionDictionary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='11975fbe-0572-41c7-977e-dbf1c4139b1d' ParentLink='Scope_VariableDeclaration' LowerBound='21.1' HigherBound='22.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.ResolverCollection' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolvers' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='5f998f2e-6597-428d-be2d-ad3db55ce1e1' ParentLink='Scope_VariableDeclaration' LowerBound='22.1' HigherBound='23.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='itinerary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='b24dbc7e-f9a7-46ae-898c-d5b5118718bd' ParentLink='Scope_VariableDeclaration' LowerBound='23.1' HigherBound='24.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='itineraryStep' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='af75ddbb-865f-4e5f-b15f-ecd9e3de167a' ParentLink='Scope_VariableDeclaration' LowerBound='24.1' HigherBound='25.1'>
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.String' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='newItineraryString' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='MessageDeclaration' OID='580a306a-0498-4b6e-ba3b-1b18a77cfab8' ParentLink='Scope_MessageDeclaration' LowerBound='19.1' HigherBound='20.1'>
                        <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='FaultMessage' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Catch' OID='fb8ad8f8-676a-4868-9022-c8fcddb79f82' ParentLink='Scope_Catch' LowerBound='55.1' HigherBound='79.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='7b6167d1-f050-4709-a6dd-fcdae03ebb9c' ParentLink='Catch_Statement' LowerBound='58.1' HigherBound='74.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolution Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='8c55a9e6-6482-4799-9c9f-1cfd6b6eb98c' ParentLink='Construct_MessageRef' LowerBound='59.35' HigherBound='59.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='1a5f7878-d648-4d17-9960-d52cfa523861' ParentLink='ComplexStatement_Statement' LowerBound='61.1' HigherBound='73.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, InboundMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='c31d348f-05f2-4f03-acb3-523553a312d7' ParentLink='Catch_Statement' LowerBound='74.1' HigherBound='76.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='0b231a1a-c45c-4c27-aa03-65456980c583' ParentLink='Catch_Statement' LowerBound='76.1' HigherBound='78.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='3aa0fa6a-729c-408c-aa1e-50454cac3b7f' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='7.1' HigherBound='9.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='2' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentProcessing' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='f7f483cb-f0b7-49ba-9916-a2ad79dccb46' ParentLink='PortDeclaration_CLRAttribute' LowerBound='7.1' HigherBound='8.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='e1113c23-3702-4f29-9616-2f1165919204' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='9.1' HigherBound='11.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='20' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='50737f45-53cc-4135-abc6-d4b0a0cef107' ParentLink='PortDeclaration_CLRAttribute' LowerBound='9.1' HigherBound='10.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __DynamicItineraryService_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __DynamicItineraryService_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "DynamicItineraryService")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                DynamicItineraryService __svc__ = (DynamicItineraryService)_service;
                __DynamicItineraryService_root_0 __ctx0__ = (__DynamicItineraryService_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.DocumentProcessing != null)
                {
                    __svc__.DocumentProcessing.Close(this, null);
                    __svc__.DocumentProcessing = null;
                }
                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __DynamicItineraryService_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __DynamicItineraryService_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "DynamicItineraryService")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                DynamicItineraryService __svc__ = (DynamicItineraryService)_service;
                __DynamicItineraryService_1 __ctx1__ = (__DynamicItineraryService_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("InboundMessage")]
            public __messagetype_System_Xml_XmlDocument __InboundMessage;
        }


        [System.SerializableAttribute]
        public class ____scope62_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope62_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope62")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[3];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                DynamicItineraryService __svc__ = (DynamicItineraryService)_service;
                ____scope62_2 __ctx2__ = (____scope62_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__newItineraryString = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolvers")]
            internal Microsoft.Practices.ESB.Itinerary.ResolverCollection __resolvers;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryStep")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper __itineraryStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("newItineraryString")]
            internal System.String __newItineraryString;
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentProcessing")]
        internal XmlDocumentPortType DocumentProcessing;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType();

        sealed private class PredicateSet0_0 : Microsoft.XLANGs.Core.PredicateGroup
        {
            public PredicateSet0_0() : base(3)
            {
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "DynamicItineraryService"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Pending"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Orchestration"));
            }
        }


        private static Microsoft.XLANGs.Core.PredicateGroup[] _predicates0 = {
            new PredicateSet0_0()
        };


        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(DynamicItineraryService).GetField("DocumentProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(DynamicItineraryService), "DocumentProcessing"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(DynamicItineraryService).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(DynamicItineraryService), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(ESB.Extensions.Services.InitializeItinerary)                    
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, _predicates0 , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "45aa35f8-a8c7-42ce-a395-aa09054b3354", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "45aa35f8-a8c7-42ce-a395-aa09054b3354", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "f224571d-896b-4436-9855-4e902c5dde2f", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "b1ba8172-ddf4-4484-98af-fc2680d5cbd3", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "b1ba8172-ddf4-4484-98af-fc2680d5cbd3", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "d21ce64d-2e77-42b7-b1f9-12bb583c7da4", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "d21ce64d-2e77-42b7-b1f9-12bb583c7da4", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "7aa63c97-cfb7-4068-a495-e3c25f6069fb", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "082b0fee-d1aa-46ce-aaa0-9e47d0b717f1", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "082b0fee-d1aa-46ce-aaa0-9e47d0b717f1", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "2d0caf78-1e95-45d3-b810-86e11846a581", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "2d0caf78-1e95-45d3-b810-86e11846a581", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "7aa63c97-cfb7-4068-a495-e3c25f6069fb", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "fb8ad8f8-676a-4868-9022-c8fcddb79f82", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "7b6167d1-f050-4709-a6dd-fcdae03ebb9c", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "7b6167d1-f050-4709-a6dd-fcdae03ebb9c", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "c31d348f-05f2-4f03-acb3-523553a312d7", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "c31d348f-05f2-4f03-acb3-523553a312d7", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "0b231a1a-c45c-4c27-aa03-65456980c583", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "fb8ad8f8-676a-4868-9022-c8fcddb79f82", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "f224571d-896b-4436-9855-4e902c5dde2f", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "00000000-0000-0000-0000-000000000000", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,24,24,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,3,3,3,23,24,24,24,24,};
        public static int[] __progressLocation2 = new int[] { 6,6,6,6,6,6,6,6,7,7,7,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,};
        public static int[] __progressLocation3 = new int[] { 16,16,17,17,18,19,19,19,20,21,21,22,22,};

        public static int[][] __progressLocations = new int[4] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __DynamicItineraryService_1 __ctx1__ = (__DynamicItineraryService_1)_stateMgrs[1];
            __DynamicItineraryService_root_0 __ctx0__ = (__DynamicItineraryService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                DocumentProcessing = new XmlDocumentPortType(0, this);
                FaultProcessing = new FaultProcessingType(1, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], DocumentProcessing, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __DynamicItineraryService_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            ____scope62_2 __ctx2__ = (____scope62_2)_stateMgrs[2];
            __DynamicItineraryService_1 __ctx1__ = (__DynamicItineraryService_1)_stateMgrs[1];
            __DynamicItineraryService_root_0 __ctx0__ = (__DynamicItineraryService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!DocumentProcessing.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__InboundMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                __ctx1__.__InboundMessage = new __messagetype_System_Xml_XmlDocument("InboundMessage", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__InboundMessage);
                DocumentProcessing.ReceiveMessage(0, __msgEnv__, __ctx1__.__InboundMessage, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (DocumentProcessing != null)
                {
                    DocumentProcessing.Close(__ctx1__, __seg__);
                    DocumentProcessing = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    __edata.PortName = @"DocumentProcessing";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx2__ = new ____scope62_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                Tracker.FireEvent(__eventLocations[23],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[15],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 12;
            case 12:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope62_2 __ctx2__ = (____scope62_2)_stateMgrs[2];
            __DynamicItineraryService_1 __ctx1__ = (__DynamicItineraryService_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__resolutionDictionary = default(ESB.Extensions.Resolution.ResolutionDictionary);
                __ctx2__.__resolvers = default(Microsoft.Practices.ESB.Itinerary.ResolverCollection);
                __ctx2__.__itinerary = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper);
                __ctx2__.__itineraryStep = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper);
                __ctx2__.__newItineraryString = default(System.String);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__resolutionDictionary = new ESB.Extensions.Resolution.ResolutionDictionary();
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.__resolvers = new Microsoft.Practices.ESB.Itinerary.ResolverCollection();
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx2__.__itinerary = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx2__.__itineraryStep = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx2__.__newItineraryString = "";
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx2__.__itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx2__.__itineraryStep.ItineraryStep = __ctx2__.__itinerary.Itinerary.GetItineraryStep(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                System.Diagnostics.Trace.WriteLine("ServiceName: " + __ctx2__.__itineraryStep.ItineraryStep.ServiceName);
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                System.Diagnostics.Trace.WriteLine("ServiceType: " + System.Convert.ToString(__ctx2__.__itineraryStep.ItineraryStep.ServiceType));
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                System.Diagnostics.Trace.WriteLine("Itinerary: " + __ctx2__.__itineraryStep.ItineraryStep.Itinerary.ToString());
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __ctx2__.__resolvers = __ctx2__.__itineraryStep.ItineraryStep.ResolverCollection;
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                System.Diagnostics.Trace.WriteLine("    Resolver Collection Count: " + System.Convert.ToString(__ctx2__.__resolvers.Count));
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                __condition__ = __ctx2__.__resolvers.MoveNext();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 27;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                __ctx2__.__resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage), __ctx2__.__resolvers.Current);
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                __ctx2__.__newItineraryString = __ctx2__.__resolutionDictionary.GetString("Microsoft.Practices.ESB.Itinerary.AsXml");
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx2__, typeof(ESB.Extensions.Services.InitializeItinerary), new object[] {__ctx1__.__InboundMessage, __ctx2__.__newItineraryString});
                goto case 26;
            case 26:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    Tracker.FireEvent(__eventLocations[14],__edata,_stateMgrs[2].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__newItineraryString = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                Tracker.FireEvent(__eventLocations[15],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 30;
            case 30:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope62_2 __ctx2__ = (____scope62_2)_stateMgrs[2];
            __DynamicItineraryService_1 __ctx1__ = (__DynamicItineraryService_1)_stateMgrs[1];
            __DynamicItineraryService_root_0 __ctx0__ = (__DynamicItineraryService_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx2__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));

                    if (__ctx2__.__FaultMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = __FaultMessage;
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                }
                __ctx2__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[18],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx2__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[20],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[12],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[13],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 278 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\InitializeItinerary.odx"
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "PublishDirectPort",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eCallable|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eExecable
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class InitializeItinerary : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = true;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy(
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eMessage, "") ] System.Xml.XmlDocument InboundMessage,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String itineraryString)
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(InitializeItinerary));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return false; } }

        internal bool IsExeced = false;

        static InitializeItinerary()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 2, 3)
            };

            _Locks = 0;
            _rootContext = new __InitializeItinerary_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[3];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public InitializeItinerary(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "InitializeItinerary", tracker)
        {
            ConstructorHelper();
        }

        public InitializeItinerary(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "InitializeItinerary")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>873f4197-8f9a-47be-8b2f-6c460ab2d15e</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>8f500bc5-c332-4875-9496-a58efd1fe3c9</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>InboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>e04d3c31-72e1-4ea7-9489-699d27f81da1</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>itineraryString</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>ea175975-ea1e-431b-a207-b89e60e6f2dc</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Initialize Itinerary</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>51b2cb4d-6232-4a8f-98d0-4dd357efd599</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>batchIdExists</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>c7f061ed-bf46-4fe8-87f6-d4a7a0d6ac0a</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>sequenceIdExists</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>aec399bc-37d6-4a66-9230-86f94587ff31</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Outbound Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>9f589af1-4702-4eff-97c9-493743fef025</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>f8199ea5-0de9-4461-9f59-b8bb544d3f4a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign OutboundMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>c68ef87a-9f71-46af-8288-f7c17a7e8137</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Decide Sequence, Batch or None?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>9e576805-ea54-4f1f-99aa-42b004d5e218</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>BatchId &amp;&amp; SequenceId</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>9317a6ff-1f10-44f6-a855-11e2a92854b0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Outbound Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>202e8a98-61e7-433b-9c32-fce7900fc8a4</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>BatchId</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>a16d5d19-e80a-4051-b40d-35b4b3781664</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Outbound Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>764cf7e5-b95a-4d18-a3f2-f5e93ab23c87</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>0be2f2e2-00a4-411b-896f-35b94225a6fe</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Outbound Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>636d86c5-2f3b-4533-b4df-1c356806f550</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>10fa6ef3-1e98-4984-8884-6688c5db332a</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolutoin Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>63be0bde-e684-4b51-99bb-7b895d63bc71</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>7bbf3cd2-0444-4baf-b6ea-b1041e326dd3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>aa64bd10-5263-4606-b254-148c927c596f</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>33320ffa-6275-4f44-84a3-5b716719749d</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'InitializeItinerary'</ActionName><IsAtomic>0</IsAtomic><Line>278</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope63'</ActionName><IsAtomic>0</IsAtomic><Line>292</Line><Position>13</Position><ShapeID>'ea175975-ea1e-431b-a207-b89e60e6f2dc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>301</Line><Position>21</Position><ShapeID>'aec399bc-37d6-4a66-9230-86f94587ff31'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>312</Line><Position>21</Position><ShapeID>'c68ef87a-9f71-46af-8288-f7c17a7e8137'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>315</Line><Position>25</Position><ShapeID>'9317a6ff-1f10-44f6-a855-11e2a92854b0'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>320</Line><Position>25</Position><ShapeID>'a16d5d19-e80a-4051-b40d-35b4b3781664'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>325</Line><Position>25</Position><ShapeID>'0be2f2e2-00a4-411b-896f-35b94225a6fe'</ShapeID>
<Messages>
	<MsgInfo><name>OutboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>331</Line><Position>21</Position><ShapeID>'636d86c5-2f3b-4533-b4df-1c356806f550'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>334</Line><Position>25</Position><ShapeID>'10fa6ef3-1e98-4984-8884-6688c5db332a'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>350</Line><Position>25</Position><ShapeID>'aa64bd10-5263-4606-b254-148c927c596f'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>352</Line><Position>25</Position><ShapeID>'33320ffa-6275-4f44-84a3-5b716719749d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='263b43c0-2e00-4735-a537-fd95182032d3' LowerBound='1.1' HigherBound='86.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='572e9d8a-8840-41c8-a207-0725ca2119ac' ParentLink='Module_ServiceDeclaration' LowerBound='4.1' HigherBound='85.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='InitializeItinerary' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='CorrelationDeclaration' OID='265a3b9a-7b5a-45c7-96e4-6a7058b8d30d' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='11.1' HigherBound='12.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.ItineraryAdvanceCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ItineraryAdvanceCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='2c236564-bf4b-419b-b54f-ee7990f65e8e' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='52.79' HigherBound='52.108'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='0be2f2e2-00a4-411b-896f-35b94225a6fe' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_1' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='StatementRef' OID='c2d95489-7409-469f-82a9-4b3fc49ba5b5' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='47.79' HigherBound='47.108'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='a16d5d19-e80a-4051-b40d-35b4b3781664' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_2' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='StatementRef' OID='49e4b284-dc19-4c04-ab43-89457d43eb72' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='42.79' HigherBound='42.108'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='9317a6ff-1f10-44f6-a855-11e2a92854b0' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_4' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='CorrelationDeclaration' OID='d556b2b3-4464-47f2-bb76-5ef716eb224a' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='12.1' HigherBound='13.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.BatchCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='BatchCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='7897c45c-36a3-4424-bad3-46ce08036906' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='47.110' HigherBound='47.128'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='a16d5d19-e80a-4051-b40d-35b4b3781664' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_3' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='CorrelationDeclaration' OID='39da0197-dca4-48d4-a612-2a7683bb315c' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='13.1' HigherBound='14.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.SequenceCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='a9aabe73-6d17-49dc-93d4-ec9c85547428' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='42.110' HigherBound='42.131'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='9317a6ff-1f10-44f6-a855-11e2a92854b0' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_5' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='358a19a1-1412-438c-ac0d-650d3b4972a8' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='14.1' HigherBound='15.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='975e377c-b980-404b-bd3f-f0b567bc3bd2' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='15.1' HigherBound='16.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='OutboundMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='873f4197-8f9a-47be-8b2f-6c460ab2d15e' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='MessageDeclaration' OID='8f500bc5-c332-4875-9496-a58efd1fe3c9' ParentLink='ServiceBody_Declaration' LowerBound='16.15' HigherBound='16.60'>
                    <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='InboundMessage' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='e04d3c31-72e1-4ea7-9489-699d27f81da1' ParentLink='ServiceBody_Declaration' LowerBound='16.62' HigherBound='16.91'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='itineraryString' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Scope' OID='ea175975-ea1e-431b-a207-b89e60e6f2dc' ParentLink='ServiceBody_Statement' LowerBound='18.1' HigherBound='83.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Initialize Itinerary' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='VariableDeclaration' OID='51b2cb4d-6232-4a8f-98d0-4dd357efd599' ParentLink='Scope_VariableDeclaration' LowerBound='21.1' HigherBound='22.1'>
                        <om:Property Name='InitialValue' Value='true' />
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.Boolean' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='batchIdExists' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='c7f061ed-bf46-4fe8-87f6-d4a7a0d6ac0a' ParentLink='Scope_VariableDeclaration' LowerBound='22.1' HigherBound='23.1'>
                        <om:Property Name='InitialValue' Value='true' />
                        <om:Property Name='UseDefaultConstructor' Value='False' />
                        <om:Property Name='Type' Value='System.Boolean' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='sequenceIdExists' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Construct' OID='aec399bc-37d6-4a66-9230-86f94587ff31' ParentLink='ComplexStatement_Statement' LowerBound='27.1' HigherBound='38.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Construct Outbound Message' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='MessageRef' OID='9f589af1-4702-4eff-97c9-493743fef025' ParentLink='Construct_MessageRef' LowerBound='28.31' HigherBound='28.46'>
                            <om:Property Name='Ref' Value='OutboundMessage' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='MessageAssignment' OID='f8199ea5-0de9-4461-9f59-b8bb544d3f4a' ParentLink='ComplexStatement_Statement' LowerBound='30.1' HigherBound='37.1'>
                            <om:Property Name='Expression' Value='OutboundMessage = InboundMessage;&#xD;&#xA;OutboundMessage(*) = InboundMessage(*);&#xD;&#xA;ESB.Extensions.Components.ItineraryHelper.Initialize(itineraryString, OutboundMessage);&#xD;&#xA;&#xD;&#xA;batchIdExists = (ESB.Extensions.Schemas.BatchId exists InboundMessage);&#xD;&#xA;sequenceIdExists = (ESB.Extensions.Schemas.SequenceId exists InboundMessage);&#xD;&#xA;' />
                            <om:Property Name='ReportToAnalyst' Value='False' />
                            <om:Property Name='Name' Value='Assign OutboundMessage' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Decision' OID='c68ef87a-9f71-46af-8288-f7c17a7e8137' ParentLink='ComplexStatement_Statement' LowerBound='38.1' HigherBound='54.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Decide Sequence, Batch or None?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='9e576805-ea54-4f1f-99aa-42b004d5e218' ParentLink='ReallyComplexStatement_Branch' LowerBound='39.21' HigherBound='44.1'>
                            <om:Property Name='Expression' Value='sequenceIdExists &amp;&amp; batchIdExists' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='BatchId &amp;&amp; SequenceId' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Send' OID='9317a6ff-1f10-44f6-a855-11e2a92854b0' ParentLink='ComplexStatement_Statement' LowerBound='41.1' HigherBound='43.1'>
                                <om:Property Name='PortName' Value='PublishDirectPort' />
                                <om:Property Name='MessageName' Value='OutboundMessage' />
                                <om:Property Name='OperationName' Value='XmlDocument' />
                                <om:Property Name='OperationMessageName' Value='Request' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Send Outbound Message' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='202e8a98-61e7-433b-9c32-fce7900fc8a4' ParentLink='ReallyComplexStatement_Branch' LowerBound='44.26' HigherBound='49.1'>
                            <om:Property Name='Expression' Value='batchIdExists' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='BatchId' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='Send' OID='a16d5d19-e80a-4051-b40d-35b4b3781664' ParentLink='ComplexStatement_Statement' LowerBound='46.1' HigherBound='48.1'>
                                <om:Property Name='PortName' Value='PublishDirectPort' />
                                <om:Property Name='MessageName' Value='OutboundMessage' />
                                <om:Property Name='OperationName' Value='XmlDocument' />
                                <om:Property Name='OperationMessageName' Value='Request' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Send Outbound Message' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='764cf7e5-b95a-4d18-a3f2-f5e93ab23c87' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='Send' OID='0be2f2e2-00a4-411b-896f-35b94225a6fe' ParentLink='ComplexStatement_Statement' LowerBound='51.1' HigherBound='53.1'>
                                <om:Property Name='PortName' Value='PublishDirectPort' />
                                <om:Property Name='MessageName' Value='OutboundMessage' />
                                <om:Property Name='OperationName' Value='XmlDocument' />
                                <om:Property Name='OperationMessageName' Value='Request' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Send Outbound Message' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='636d86c5-2f3b-4533-b4df-1c356806f550' ParentLink='Scope_Catch' LowerBound='57.1' HigherBound='81.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='10fa6ef3-1e98-4984-8884-6688c5db332a' ParentLink='Catch_Statement' LowerBound='60.1' HigherBound='76.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolutoin Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='63be0bde-e684-4b51-99bb-7b895d63bc71' ParentLink='Construct_MessageRef' LowerBound='61.35' HigherBound='61.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='7bbf3cd2-0444-4baf-b6ea-b1041e326dd3' ParentLink='ComplexStatement_Statement' LowerBound='63.1' HigherBound='75.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, InboundMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='aa64bd10-5263-4606-b254-148c927c596f' ParentLink='Catch_Statement' LowerBound='76.1' HigherBound='78.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='33320ffa-6275-4f44-84a3-5b716719749d' ParentLink='Catch_Statement' LowerBound='78.1' HigherBound='80.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='f6223bc7-22f8-4224-bf43-1ee38ce94ee1' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='7.1' HigherBound='9.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PublishDirectPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='f01a025c-cec6-4fd3-bfc1-7ad50e29db81' ParentLink='PortDeclaration_CLRAttribute' LowerBound='7.1' HigherBound='8.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='6bfe5bb7-0eaa-4d12-8334-655ba54d5278' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='9.1' HigherBound='11.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='45' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='2ef83349-5402-47a8-a763-19889d0df22a' ParentLink='PortDeclaration_CLRAttribute' LowerBound='9.1' HigherBound='10.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __InitializeItinerary_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __InitializeItinerary_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "InitializeItinerary")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                InitializeItinerary __svc__ = (InitializeItinerary)_service;
                __InitializeItinerary_root_0 __ctx0__ = (__InitializeItinerary_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.PublishDirectPort != null)
                {
                    __svc__.PublishDirectPort.Close(this, null);
                    __svc__.PublishDirectPort = null;
                }
                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                base.Finally();
            }

        }


        [System.SerializableAttribute]
        public class __InitializeItinerary_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __InitializeItinerary_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "InitializeItinerary")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                InitializeItinerary __svc__ = (InitializeItinerary)_service;
                __InitializeItinerary_1 __ctx1__ = (__InitializeItinerary_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null)
                    __ctx1__.__itineraryString = null;
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("OutboundMessage")]
            public __messagetype_System_Xml_XmlDocument __OutboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("InboundMessage")]
            public __messagetype_System_Xml_XmlDocument __InboundMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ItineraryAdvanceCS")]
            internal Microsoft.XLANGs.Core.Correlation __ItineraryAdvanceCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("BatchCS")]
            internal Microsoft.XLANGs.Core.Correlation __BatchCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceCS")]
            internal Microsoft.XLANGs.Core.Correlation __SequenceCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryString")]
            internal System.String __itineraryString;
        }


        [System.SerializableAttribute]
        public class ____scope63_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope63_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope63")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[3];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                InitializeItinerary __svc__ = (InitializeItinerary)_service;
                __InitializeItinerary_1 __ctx1__ = (__InitializeItinerary_1)(__svc__._stateMgrs[1]);
                ____scope63_2 __ctx2__ = (____scope63_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                if (__ctx1__ != null && __ctx1__.__OutboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = null;
                }
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (__ctx1__ != null && __ctx1__.__BatchCS != null)
                    __ctx1__.__BatchCS = null;
                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                if (__ctx1__ != null && __ctx1__.__ItineraryAdvanceCS != null)
                    __ctx1__.__ItineraryAdvanceCS = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("batchIdExists")]
            internal System.Boolean __batchIdExists;
            [Microsoft.XLANGs.Core.UserVariableAttribute("sequenceIdExists")]
            internal System.Boolean __sequenceIdExists;
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = new Microsoft.XLANGs.Core.CorrelationType[] { new ItineraryAdvanceCT(), new BatchCT(), new SequenceCT() };
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("PublishDirectPort")]
        internal XmlDocumentPortType PublishDirectPort;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(InitializeItinerary).GetField("PublishDirectPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(InitializeItinerary), "PublishDirectPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(InitializeItinerary).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(InitializeItinerary), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }


        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "ea175975-ea1e-431b-a207-b89e60e6f2dc", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "aec399bc-37d6-4a66-9230-86f94587ff31", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "aec399bc-37d6-4a66-9230-86f94587ff31", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "c68ef87a-9f71-46af-8288-f7c17a7e8137", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "9317a6ff-1f10-44f6-a855-11e2a92854b0", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "9317a6ff-1f10-44f6-a855-11e2a92854b0", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "a16d5d19-e80a-4051-b40d-35b4b3781664", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "a16d5d19-e80a-4051-b40d-35b4b3781664", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "0be2f2e2-00a4-411b-896f-35b94225a6fe", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "0be2f2e2-00a4-411b-896f-35b94225a6fe", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "c68ef87a-9f71-46af-8288-f7c17a7e8137", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "636d86c5-2f3b-4533-b4df-1c356806f550", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "10fa6ef3-1e98-4984-8884-6688c5db332a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "10fa6ef3-1e98-4984-8884-6688c5db332a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "aa64bd10-5263-4606-b254-148c927c596f", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "aa64bd10-5263-4606-b254-148c927c596f", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "33320ffa-6275-4f44-84a3-5b716719749d", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "636d86c5-2f3b-4533-b4df-1c356806f550", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "ea175975-ea1e-431b-a207-b89e60e6f2dc", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,1,1,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,2,2,2,22,1,1,1,1,};
        public static int[] __progressLocation2 = new int[] { 5,5,5,5,5,6,7,7,8,8,8,9,7,7,7,10,10,10,11,11,12,12,12,13,13,14,14,14,14,};
        public static int[] __progressLocation3 = new int[] { 15,15,16,16,17,18,18,18,19,20,20,21,21,};

        public static int[][] __progressLocations = new int[4] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __InitializeItinerary_root_0 __ctx0__ = (__InitializeItinerary_root_0)_stateMgrs[0];
            __InitializeItinerary_1 __ctx1__ = (__InitializeItinerary_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                PublishDirectPort = new XmlDocumentPortType(0, this);
                FaultProcessing = new FaultProcessingType(1, this);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __InitializeItinerary_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __InitializeItinerary_root_0 __ctx0__ = (__InitializeItinerary_root_0)_stateMgrs[0];
            __InitializeItinerary_1 __ctx1__ = (__InitializeItinerary_1)_stateMgrs[1];
            ____scope63_2 __ctx2__ = (____scope63_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__itineraryString = (System.String)Args[1];
                __ctx1__.__InboundMessage = new __messagetype_System_Xml_XmlDocument("InboundMessage", __ctx1__);
                __ctx1__.__InboundMessage.CopyFrom((Microsoft.XLANGs.Core.XMessage)Args[0]);
                __ctx1__.RefMessage(__ctx1__.__InboundMessage);
                __ctx1__.__InboundMessage.ConstructionCompleteEvent();
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[2],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                __ctx2__ = new ____scope63_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__itineraryString = null;
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                if (PublishDirectPort != null)
                {
                    PublishDirectPort.Close(__ctx1__, __seg__);
                    PublishDirectPort = null;
                }
                Tracker.FireEvent(__eventLocations[22],__eventData[10],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    Tracker.FireEvent(__eventLocations[0],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 10;
            case 10:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __InitializeItinerary_root_0 __ctx0__ = (__InitializeItinerary_root_0)_stateMgrs[0];
            __InitializeItinerary_1 __ctx1__ = (__InitializeItinerary_1)_stateMgrs[1];
            ____scope63_2 __ctx2__ = (____scope63_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__batchIdExists = default(System.Boolean);
                __ctx2__.__sequenceIdExists = default(System.Boolean);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__batchIdExists = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.__sequenceIdExists = true;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                {
                    __messagetype_System_Xml_XmlDocument __OutboundMessage = new __messagetype_System_Xml_XmlDocument("OutboundMessage", __ctx1__);

                    __OutboundMessage.CopyFrom(__ctx1__.__InboundMessage);
                    __OutboundMessage.CopyContextPropertiesFrom(__ctx1__.__InboundMessage);
                    ESB.Extensions.Components.ItineraryHelper.Initialize(__ctx1__.__itineraryString, CreateMessageWrapperForUserCode(__OutboundMessage));
                    __ctx2__.__batchIdExists = ((__ctx1__.__InboundMessage.GetPropertyValueNoThrow(typeof(ESB.Extensions.Schemas.BatchId)) != null));
                    __ctx2__.__sequenceIdExists = ((__ctx1__.__InboundMessage.GetPropertyValueNoThrow(typeof(ESB.Extensions.Schemas.SequenceId)) != null));

                    if (__ctx1__.__OutboundMessage != null)
                        __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = __OutboundMessage;
                    __ctx1__.RefMessage(__ctx1__.__OutboundMessage);
                }
                __ctx1__.__OutboundMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    Tracker.FireEvent(__eventLocations[6],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __condition__ = __ctx2__.__sequenceIdExists && __ctx2__.__batchIdExists;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 13;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[5],_stateMgrs[2].TrackDataStream );
                __ctx1__.__ItineraryAdvanceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                __ctx1__.__SequenceCS = new Microsoft.XLANGs.Core.Correlation(this, 2, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                PublishDirectPort.SendMessage(0, __ctx1__.__OutboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ItineraryAdvanceCS, __ctx1__.__SequenceCS }, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    __edata.PortName = @"PublishDirectPort";
                    Tracker.FireEvent(__eventLocations[9],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __condition__ = __ctx2__.__batchIdExists;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 20;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[5],_stateMgrs[2].TrackDataStream );
                __ctx1__.__ItineraryAdvanceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                __ctx1__.__BatchCS = new Microsoft.XLANGs.Core.Correlation(this, 1, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                PublishDirectPort.SendMessage(0, __ctx1__.__OutboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ItineraryAdvanceCS, __ctx1__.__BatchCS }, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if (__ctx1__ != null && __ctx1__.__BatchCS != null)
                    __ctx1__.__BatchCS = null;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    __edata.PortName = @"PublishDirectPort";
                    Tracker.FireEvent(__eventLocations[11],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[5],_stateMgrs[2].TrackDataStream );
                __ctx1__.__ItineraryAdvanceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                PublishDirectPort.SendMessage(0, __ctx1__.__OutboundMessage, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__ItineraryAdvanceCS }, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__OutboundMessage);
                    __edata.PortName = @"PublishDirectPort";
                    Tracker.FireEvent(__eventLocations[13],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__ItineraryAdvanceCS != null)
                    __ctx1__.__ItineraryAdvanceCS = null;
                if (__ctx1__ != null && __ctx1__.__OutboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__OutboundMessage);
                    __ctx1__.__OutboundMessage = null;
                }
                Tracker.FireEvent(__eventLocations[14],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 28;
            case 28:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __InitializeItinerary_root_0 __ctx0__ = (__InitializeItinerary_root_0)_stateMgrs[0];
            __InitializeItinerary_1 __ctx1__ = (__InitializeItinerary_1)_stateMgrs[1];
            ____scope63_2 __ctx2__ = (____scope63_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx1__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));

                    if (__ctx1__.__FaultMessage != null)
                        __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = __FaultMessage;
                    __ctx1__.RefMessage(__ctx1__.__FaultMessage);
                }
                __ctx1__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[17],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx1__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[19],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__FaultMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__FaultMessage);
                    __ctx1__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 98 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\PublishGoMsg.odx"
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.GoMsgPortType)
        },
        new System.String[] {
            "GoMsgPort"
        },
        new System.Type[] {
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eCallable|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eExecable
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class PublishGoMsg : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = true;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy(
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] ESB.Extensions.Resolutions.Go go)
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(PublishGoMsg));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return false; } }

        internal bool IsExeced = false;

        static PublishGoMsg()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1)
            };

            _Locks = 0;
            _rootContext = new __PublishGoMsg_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[2];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public PublishGoMsg(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "PublishGoMsg", tracker)
        {
            ConstructorHelper();
        }

        public PublishGoMsg(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "PublishGoMsg")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>285d3d4c-3818-40bc-ac2c-01e8ecfd445f</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>766da166-5934-4b7b-aeca-25712490426c</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>22dd1d48-1abf-4d85-b9d2-711e78046389</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Construct Go Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>3c450a38-6504-4470-9c3e-5d58dff97bf8</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>8e624c94-a6df-47ed-81f9-c0a7f61d87ed</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign GoMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>51a4d72f-5960-42eb-b940-d50c24240f01</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Send Go Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'PublishGoMsg'</ActionName><IsAtomic>0</IsAtomic><Line>98</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>107</Line><Position>13</Position><ShapeID>'22dd1d48-1abf-4d85-b9d2-711e78046389'</ShapeID>
<Messages>
	<MsgInfo><name>GoMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.Go</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>115</Line><Position>13</Position><ShapeID>'51a4d72f-5960-42eb-b940-d50c24240f01'</ShapeID>
<Messages>
	<MsgInfo><name>GoMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.Go</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='009ec01a-22cc-435a-ae83-0e93afe1ab91' LowerBound='1.1' HigherBound='26.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='93f8f1a3-db84-464a-ae9d-a99df2270763' ParentLink='Module_ServiceDeclaration' LowerBound='4.1' HigherBound='25.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='PublishGoMsg' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='CorrelationDeclaration' OID='642f5fa3-e4d2-4a9d-a209-377952934379' ParentLink='ServiceDeclaration_CorrelationDeclaration' LowerBound='9.1' HigherBound='10.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.SequenceCT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SequenceCS' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='StatementRef' OID='c0b7b234-e7df-47fd-9918-9205643b9a2d' ParentLink='CorrelationDeclaration_StatementRef' LowerBound='22.43' HigherBound='22.64'>
                    <om:Property Name='Initializes' Value='True' />
                    <om:Property Name='Ref' Value='51a4d72f-5960-42eb-b940-d50c24240f01' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='StatementRef_1' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='02839a3e-5558-4728-aade-5fb68a4db569' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.GoMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GoMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='285d3d4c-3818-40bc-ac2c-01e8ecfd445f' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='VariableDeclaration' OID='766da166-5934-4b7b-aeca-25712490426c' ParentLink='ServiceBody_Declaration' LowerBound='11.15' HigherBound='11.47'>
                    <om:Property Name='UseDefaultConstructor' Value='True' />
                    <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='go' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Construct' OID='22dd1d48-1abf-4d85-b9d2-711e78046389' ParentLink='ServiceBody_Statement' LowerBound='13.1' HigherBound='21.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Construct Go Message' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='MessageRef' OID='3c450a38-6504-4470-9c3e-5d58dff97bf8' ParentLink='Construct_MessageRef' LowerBound='14.23' HigherBound='14.28'>
                        <om:Property Name='Ref' Value='GoMsg' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='MessageAssignment' OID='8e624c94-a6df-47ed-81f9-c0a7f61d87ed' ParentLink='ComplexStatement_Statement' LowerBound='16.1' HigherBound='20.1'>
                        <om:Property Name='Expression' Value='GoMsg.Body = go;&#xD;&#xA;GoMsg(ESB.Extensions.Schemas.BatchId) = go.BatchId;&#xD;&#xA;GoMsg(ESB.Extensions.Schemas.SequenceId) = go.SequenceId;' />
                        <om:Property Name='ReportToAnalyst' Value='False' />
                        <om:Property Name='Name' Value='Assign GoMsg' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Send' OID='51a4d72f-5960-42eb-b940-d50c24240f01' ParentLink='ServiceBody_Statement' LowerBound='21.1' HigherBound='23.1'>
                    <om:Property Name='PortName' Value='GoMsgPort' />
                    <om:Property Name='MessageName' Value='GoMsg' />
                    <om:Property Name='OperationName' Value='GoMsg' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Send Go Msg' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='296fdca4-e7a0-4a17-9c5a-f8f62317ccd1' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='7.1' HigherBound='9.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.GoMsgPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GoMsgPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='36554f51-a6a7-4268-83c5-b44d365dc080' ParentLink='PortDeclaration_CLRAttribute' LowerBound='7.1' HigherBound='8.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __PublishGoMsg_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __PublishGoMsg_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "PublishGoMsg")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                PublishGoMsg __svc__ = (PublishGoMsg)_service;
                __PublishGoMsg_root_0 __ctx0__ = (__PublishGoMsg_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.GoMsgPort != null)
                {
                    __svc__.GoMsgPort.Close(this, null);
                    __svc__.GoMsgPort = null;
                }
                base.Finally();
            }

        }


        [System.SerializableAttribute]
        public class __PublishGoMsg_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __PublishGoMsg_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "PublishGoMsg")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                PublishGoMsg __svc__ = (PublishGoMsg)_service;
                __PublishGoMsg_1 __ctx1__ = (__PublishGoMsg_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null)
                    __ctx1__.__go = null;
                if (__ctx1__ != null && __ctx1__.__GoMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GoMsg);
                    __ctx1__.__GoMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("GoMsg")]
            internal GoMsgType __GoMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SequenceCS")]
            internal Microsoft.XLANGs.Core.Correlation __SequenceCS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("go")]
            internal ESB.Extensions.Resolutions.Go __go;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = new Microsoft.XLANGs.Core.CorrelationType[] { new SequenceCT() };
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("GoMsgPort")]
        internal GoMsgPortType GoMsgPort;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {GoMsgPortType.GoMsg},
                                               typeof(PublishGoMsg).GetField("GoMsgPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(PublishGoMsg), "GoMsgPort"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }


        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "22dd1d48-1abf-4d85-b9d2-711e78046389", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "22dd1d48-1abf-4d85-b9d2-711e78046389", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "51a4d72f-5960-42eb-b940-d50c24240f01", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "51a4d72f-5960-42eb-b940-d50c24240f01", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,1,1,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,2,2,3,4,4,4,5,1,1,1,1,};

        public static int[][] __progressLocations = new int[2] [] {__progressLocation0,__progressLocation1};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __PublishGoMsg_1 __ctx1__ = (__PublishGoMsg_1)_stateMgrs[1];
            __PublishGoMsg_root_0 __ctx0__ = (__PublishGoMsg_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                GoMsgPort = new GoMsgPortType(0, this);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __PublishGoMsg_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __PublishGoMsg_1 __ctx1__ = (__PublishGoMsg_1)_stateMgrs[1];
            __PublishGoMsg_root_0 __ctx0__ = (__PublishGoMsg_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__go = (ESB.Extensions.Resolutions.Go)Args[0];
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[2],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                {
                    GoMsgType __GoMsg = new GoMsgType("GoMsg", __ctx1__);

                    __GoMsg.Body.LoadFrom(__ctx1__.__go);
                    __GoMsg.SetPropertyValue(typeof(ESB.Extensions.Schemas.BatchId), __ctx1__.__go.BatchId);
                    __GoMsg.SetPropertyValue(typeof(ESB.Extensions.Schemas.SequenceId), __ctx1__.__go.SequenceId);
                    if (__ctx1__ != null)
                        __ctx1__.__go = null;

                    if (__ctx1__.__GoMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__GoMsg);
                    __ctx1__.__GoMsg = __GoMsg;
                    __ctx1__.RefMessage(__ctx1__.__GoMsg);
                }
                __ctx1__.__GoMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__GoMsg);
                    Tracker.FireEvent(__eventLocations[3],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[3],_stateMgrs[1].TrackDataStream );
                __ctx1__.__SequenceCS = new Microsoft.XLANGs.Core.Correlation(this, 0, 0);
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                GoMsgPort.SendMessage(0, __ctx1__.__GoMsg, new Microsoft.XLANGs.Core.Correlation[] { __ctx1__.__SequenceCS }, null, __ctx1__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if (__ctx1__ != null && __ctx1__.__SequenceCS != null)
                    __ctx1__.__SequenceCS = null;
                if (GoMsgPort != null)
                {
                    GoMsgPort.Close(__ctx1__, __seg__);
                    GoMsgPort = null;
                }
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__GoMsg);
                    __edata.PortName = @"GoMsgPort";
                    Tracker.FireEvent(__eventLocations[5],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__GoMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GoMsg);
                    __ctx1__.__GoMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 13;
            case 13:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 166 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\RegisterBatch.odx"
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.MergeBatchSequencePortType)
        },
        new System.String[] {
            "MergeBatchSequencePort"
        },
        new System.Type[] {
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eCallable|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eExecable
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class RegisterBatch : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = true;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eHasRequestResponse
,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy(
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] ESB.Extensions.Resolutions.sp_MergeBatchSequence MergeBatchSequenceRequest)
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(RegisterBatch));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return false; } }

        internal bool IsExeced = false;

        static RegisterBatch()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1)
            };

            _Locks = 0;
            _rootContext = new __RegisterBatch_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[2];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public RegisterBatch(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "RegisterBatch", tracker)
        {
            ConstructorHelper();
        }

        public RegisterBatch(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "RegisterBatch")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>ad1b2b7f-03b8-4fa0-bf99-48ae3149e8c0</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>4c1dbe0e-9c0c-4095-91cd-2fcc1041f91c</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Construct CompositeBatchInsertRequestMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>7de14754-025a-4a56-9400-f0e1525befc3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign CompositeBatchInsertRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>86a88b62-490e-4888-9bfc-52edabee7357</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>ade6915b-e94e-4793-bd8a-98ccab833e1f</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Send CompositeBatchInsertRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>2c492164-da77-4c25-88a4-70f724f5d307</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive CompositeBatchInsertResponse</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>612d98ad-20c2-48a6-a3c5-492d4e72af7e</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>MergeBatchSequenceRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'RegisterBatch'</ActionName><IsAtomic>0</IsAtomic><Line>166</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>175</Line><Position>13</Position><ShapeID>'4c1dbe0e-9c0c-4095-91cd-2fcc1041f91c'</ShapeID>
<Messages>
	<MsgInfo><name>MergeBatchSequenceRequestMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1+sp_MergeBatchSequence</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>181</Line><Position>13</Position><ShapeID>'ade6915b-e94e-4793-bd8a-98ccab833e1f'</ShapeID>
<Messages>
	<MsgInfo><name>MergeBatchSequenceRequestMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1+sp_MergeBatchSequence</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>183</Line><Position>13</Position><ShapeID>'2c492164-da77-4c25-88a4-70f724f5d307'</ShapeID>
<Messages>
	<MsgInfo><name>MergeBatchSequenceResponseMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1+sp_MergeBatchSequenceResponse</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='1020acb2-3465-4940-b59b-815283b3733b' LowerBound='1.1' HigherBound='41.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='b2e7a639-7b95-44d8-887e-4bae96cbb710' ParentLink='Module_ServiceDeclaration' LowerBound='19.1' HigherBound='40.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RegisterBatch' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='MessageDeclaration' OID='8c2144b0-fa94-425a-bc6f-9ff544a3f32a' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='24.1' HigherBound='25.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.MergeBatchSequenceRequestMT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MergeBatchSequenceRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='71e89eb1-bc30-44e2-af6e-60b713bca9d5' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='25.1' HigherBound='26.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.MergeBatchSequenceResponseMT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MergeBatchSequenceResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='ad1b2b7f-03b8-4fa0-bf99-48ae3149e8c0' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Construct' OID='4c1dbe0e-9c0c-4095-91cd-2fcc1041f91c' ParentLink='ServiceBody_Statement' LowerBound='28.1' HigherBound='34.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Construct CompositeBatchInsertRequestMsg' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='MessageAssignment' OID='7de14754-025a-4a56-9400-f0e1525befc3' ParentLink='ComplexStatement_Statement' LowerBound='31.1' HigherBound='33.1'>
                        <om:Property Name='Expression' Value='MergeBatchSequenceRequestMsg.Body = MergeBatchSequenceRequest;' />
                        <om:Property Name='ReportToAnalyst' Value='False' />
                        <om:Property Name='Name' Value='Assign CompositeBatchInsertRequestMsg' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='MessageRef' OID='86a88b62-490e-4888-9bfc-52edabee7357' ParentLink='Construct_MessageRef' LowerBound='29.23' HigherBound='29.51'>
                        <om:Property Name='Ref' Value='MergeBatchSequenceRequestMsg' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Send' OID='ade6915b-e94e-4793-bd8a-98ccab833e1f' ParentLink='ServiceBody_Statement' LowerBound='34.1' HigherBound='36.1'>
                    <om:Property Name='PortName' Value='MergeBatchSequencePort' />
                    <om:Property Name='MessageName' Value='MergeBatchSequenceRequestMsg' />
                    <om:Property Name='OperationName' Value='MergeBatchSequence' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Send CompositeBatchInsertRequestMsg' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Receive' OID='2c492164-da77-4c25-88a4-70f724f5d307' ParentLink='ServiceBody_Statement' LowerBound='36.1' HigherBound='38.1'>
                    <om:Property Name='Activate' Value='False' />
                    <om:Property Name='PortName' Value='MergeBatchSequencePort' />
                    <om:Property Name='MessageName' Value='MergeBatchSequenceResponseMsg' />
                    <om:Property Name='OperationName' Value='MergeBatchSequence' />
                    <om:Property Name='OperationMessageName' Value='Response' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive CompositeBatchInsertResponse' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='612d98ad-20c2-48a6-a3c5-492d4e72af7e' ParentLink='ServiceBody_Declaration' LowerBound='26.15' HigherBound='26.89'>
                    <om:Property Name='UseDefaultConstructor' Value='True' />
                    <om:Property Name='Type' Value='ESB.Extensions.Resolutions.sp_MergeBatchSequence' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='MergeBatchSequenceRequest' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='10d8ef56-9f57-4c7a-9ec7-c0950018f23a' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='22.1' HigherBound='24.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.MergeBatchSequencePortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MergeBatchSequencePort' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='LogicalBindingAttribute' OID='41f9aa94-7972-4caa-9c1f-c9e6aa34d957' ParentLink='PortDeclaration_CLRAttribute' LowerBound='22.1' HigherBound='23.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='1c7e7bec-2dbc-43f1-87cd-4d3a1b7ef183' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='MergeBatchSequenceRequestMT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='3bd579a8-78f8-4487-843f-de2e6bb24509' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequence' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='d590fb2b-2a1a-4640-932e-192ab9bb6aa5' ParentLink='Module_MessageType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='MergeBatchSequenceResponseMT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='ec037348-f277-4d67-8fac-a946679e4341' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='ClassName' Value='ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo1.sp_MergeBatchSequenceResponse' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='6d978f3b-ab8c-43ef-90fd-a0c9444b4750' ParentLink='Module_PortType' LowerBound='12.1' HigherBound='19.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='MergeBatchSequencePortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='6d9b2fb0-e2b3-4237-915d-800ee709a364' ParentLink='PortType_OperationDeclaration' LowerBound='14.1' HigherBound='18.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MergeBatchSequence' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='db0c31d8-8b74-4989-a276-049dc832eab1' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='16.13' HigherBound='16.40'>
                    <om:Property Name='Ref' Value='ESB.Extensions.Services.MergeBatchSequenceRequestMT' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='MessageRef' OID='3df7b4da-be4e-4db7-b031-f40ced9cbaf6' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='16.42' HigherBound='16.70'>
                    <om:Property Name='Ref' Value='ESB.Extensions.Services.MergeBatchSequenceResponseMT' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __RegisterBatch_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __RegisterBatch_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "RegisterBatch")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                RegisterBatch __svc__ = (RegisterBatch)_service;
                __RegisterBatch_root_0 __ctx0__ = (__RegisterBatch_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.MergeBatchSequencePort != null)
                {
                    __svc__.MergeBatchSequencePort.Close(this, null);
                    __svc__.MergeBatchSequencePort = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __RegisterBatch_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __RegisterBatch_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "RegisterBatch")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                RegisterBatch __svc__ = (RegisterBatch)_service;
                __RegisterBatch_1 __ctx1__ = (__RegisterBatch_1)(__svc__._stateMgrs[1]);
                __RegisterBatch_root_0 __ctx0__ = (__RegisterBatch_root_0)(__svc__._stateMgrs[0]);

                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                if (__ctx1__ != null && __ctx1__.__MergeBatchSequenceResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__MergeBatchSequenceResponseMsg);
                    __ctx1__.__MergeBatchSequenceResponseMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__MergeBatchSequenceRequest = null;
                if (__ctx1__ != null && __ctx1__.__MergeBatchSequenceRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__MergeBatchSequenceRequestMsg);
                    __ctx1__.__MergeBatchSequenceRequestMsg = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("MergeBatchSequenceRequestMsg")]
            internal MergeBatchSequenceRequestMT __MergeBatchSequenceRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("MergeBatchSequenceResponseMsg")]
            internal MergeBatchSequenceResponseMT __MergeBatchSequenceResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("MergeBatchSequenceRequest")]
            internal ESB.Extensions.Resolutions.sp_MergeBatchSequence __MergeBatchSequenceRequest;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("MergeBatchSequencePort")]
        internal MergeBatchSequencePortType MergeBatchSequencePort;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {MergeBatchSequencePortType.MergeBatchSequence},
                                               typeof(RegisterBatch).GetField("MergeBatchSequencePort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(RegisterBatch), "MergeBatchSequencePort"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }


        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "4c1dbe0e-9c0c-4095-91cd-2fcc1041f91c", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "4c1dbe0e-9c0c-4095-91cd-2fcc1041f91c", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "ade6915b-e94e-4793-bd8a-98ccab833e1f", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "ade6915b-e94e-4793-bd8a-98ccab833e1f", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "2c492164-da77-4c25-88a4-70f724f5d307", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "2c492164-da77-4c25-88a4-70f724f5d307", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,1,1,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,2,2,3,4,4,4,5,6,6,7,1,1,1,1,};

        public static int[][] __progressLocations = new int[2] [] {__progressLocation0,__progressLocation1};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __RegisterBatch_1 __ctx1__ = (__RegisterBatch_1)_stateMgrs[1];
            __RegisterBatch_root_0 __ctx0__ = (__RegisterBatch_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                MergeBatchSequencePort = new MergeBatchSequencePortType(0, this);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __RegisterBatch_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __RegisterBatch_1 __ctx1__ = (__RegisterBatch_1)_stateMgrs[1];
            __RegisterBatch_root_0 __ctx0__ = (__RegisterBatch_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__MergeBatchSequenceRequest = (ESB.Extensions.Resolutions.sp_MergeBatchSequence)Args[0];
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[2],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                {
                    MergeBatchSequenceRequestMT __MergeBatchSequenceRequestMsg = new MergeBatchSequenceRequestMT("MergeBatchSequenceRequestMsg", __ctx1__);

                    __MergeBatchSequenceRequestMsg.Body.LoadFrom(__ctx1__.__MergeBatchSequenceRequest);
                    if (__ctx1__ != null)
                        __ctx1__.__MergeBatchSequenceRequest = null;

                    if (__ctx1__.__MergeBatchSequenceRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__MergeBatchSequenceRequestMsg);
                    __ctx1__.__MergeBatchSequenceRequestMsg = __MergeBatchSequenceRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__MergeBatchSequenceRequestMsg);
                }
                __ctx1__.__MergeBatchSequenceRequestMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__MergeBatchSequenceRequestMsg);
                    Tracker.FireEvent(__eventLocations[3],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                MergeBatchSequencePort.SendMessage(0, __ctx1__.__MergeBatchSequenceRequestMsg, null, null, out __ctx0__.__subWrapper0, __ctx1__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__MergeBatchSequenceRequestMsg);
                    __edata.PortName = @"MergeBatchSequencePort";
                    Tracker.FireEvent(__eventLocations[5],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__MergeBatchSequenceRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__MergeBatchSequenceRequestMsg);
                    __ctx1__.__MergeBatchSequenceRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if (!MergeBatchSequencePort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[0]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                if (__ctx1__.__MergeBatchSequenceResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__MergeBatchSequenceResponseMsg);
                __ctx1__.__MergeBatchSequenceResponseMsg = new MergeBatchSequenceResponseMT("MergeBatchSequenceResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__MergeBatchSequenceResponseMsg);
                MergeBatchSequencePort.ReceiveMessage(0, __msgEnv__, __ctx1__.__MergeBatchSequenceResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (MergeBatchSequencePort != null)
                {
                    MergeBatchSequencePort.Close(__ctx1__, __seg__);
                    MergeBatchSequencePort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__MergeBatchSequenceResponseMsg);
                    __edata.PortName = @"MergeBatchSequencePort";
                    Tracker.FireEvent(__eventLocations[7],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__MergeBatchSequenceResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__MergeBatchSequenceResponseMsg);
                    __ctx1__.__MergeBatchSequenceResponseMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 16;
            case 16:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{22A2656D-5DBC-4EF5-9DCA-175B18E407B6}"))
        };

    }
    //#line 240 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\RegisterBatchService.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "DocumentProcessing", "XmlDocument", 0, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ActivationPredicateAttribute(
        0,
        new bool[] {
            true,
            false,
            false
        },
        new System.Type[] {
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState),
            typeof(Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType)
        },
        new Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator[] {
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual,
            Microsoft.XLANGs.BaseTypes.EXLangPredicateOperator.eOpEqual
        },
        new System.Object[] {
            "RegisterBatchService",
            "Pending",
            "Orchestration"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.XmlDocumentPortType),
            typeof(ESB.Extensions.Services.FaultProcessingType)
        },
        new System.String[] {
            "DocumentProcessing",
            "FaultProcessing"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class RegisterBatchService : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(RegisterBatchService));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static RegisterBatchService()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 2, 3)
            };

            _Locks = 0;
            _rootContext = new __RegisterBatchService_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[3];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public RegisterBatchService(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "RegisterBatchService", tracker)
        {
            ConstructorHelper();
        }

        public RegisterBatchService(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "RegisterBatchService")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>87ff6e05-998a-4e5d-b38e-13652c4360e2</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>45aa35f8-a8c7-42ce-a395-aa09054b3354</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>cb804cf0-35fa-4731-8ce0-91d3928c4ace</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>e2c80518-c658-4878-9752-d259f87fe5a5</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DNFPredicateShape</shapeType>      <ShapeID>4973f46e-abf1-4b15-835e-bc5774ebcfa7</ShapeID>      <ParentLink>Receive_DNFPredicate</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>f224571d-896b-4436-9855-4e902c5dde2f</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Itinerary &amp; Resolution</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>b1ba8172-ddf4-4484-98af-fc2680d5cbd3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Current Itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d21ce64d-2e77-42b7-b1f9-12bb583c7da4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Retrieve Resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>7aa63c97-cfb7-4068-a495-e3c25f6069fb</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Any resolvers?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>041fcd27-303a-47f3-a886-8138207eb530</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>082b0fee-d1aa-46ce-aaa0-9e47d0b717f1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Resolve</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>2d0caf78-1e95-45d3-b810-86e11846a581</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start RegisterBatch</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>48b3f7c4-39f4-49eb-ac7c-ce98a067d726</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>mergeBatchSequenceRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>2e28a766-87ea-4d6b-b2c5-dfad51c19f13</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>b6e1e9cd-6c25-4fc1-a566-8b0dcd7eecef</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolutionDictionary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>11975fbe-0572-41c7-977e-dbf1c4139b1d</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>resolvers</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>5f998f2e-6597-428d-be2d-ad3db55ce1e1</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>itinerary</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>b24dbc7e-f9a7-46ae-898c-d5b5118718bd</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>itineraryStep</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>9afe12aa-7555-4406-8acf-d38cace104d5</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>mergeBatchSequenceRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>580a306a-0498-4b6e-ba3b-1b18a77cfab8</ShapeID>      <ParentLink>Scope_MessageDeclaration</ParentLink>                <shapeText>FaultMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>fb8ad8f8-676a-4868-9022-c8fcddb79f82</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Routing Resolution Exceptions</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>7b6167d1-f050-4709-a6dd-fcdae03ebb9c</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Routing and Resolution Fault Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>8c55a9e6-6482-4799-9c9f-1cfd6b6eb98c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>1a5f7878-d648-4d17-9960-d52cfa523861</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Routing and Resolutoin Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>c31d348f-05f2-4f03-acb3-523553a312d7</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Persist Fault Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>0b231a1a-c45c-4c27-aa03-65456980c583</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'RegisterBatchService'</ActionName><IsAtomic>0</IsAtomic><Line>240</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>250</Line><Position>256</Position><ShapeID>'45aa35f8-a8c7-42ce-a395-aa09054b3354'</ShapeID>
<Messages>
	<MsgInfo><name>InboundMessage</name><part>part</part><schema>Microsoft.XLANGs.BaseTypes.Any</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope64'</ActionName><IsAtomic>0</IsAtomic><Line>252</Line><Position>13</Position><ShapeID>'f224571d-896b-4436-9855-4e902c5dde2f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>269</Line><Position>41</Position><ShapeID>'b1ba8172-ddf4-4484-98af-fc2680d5cbd3'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>276</Line><Position>31</Position><ShapeID>'d21ce64d-2e77-42b7-b1f9-12bb583c7da4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>279</Line><Position>21</Position><ShapeID>'7aa63c97-cfb7-4068-a495-e3c25f6069fb'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>282</Line><Position>46</Position><ShapeID>'082b0fee-d1aa-46ce-aaa0-9e47d0b717f1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>285</Line><Position>68</Position><ShapeID>'2d0caf78-1e95-45d3-b810-86e11846a581'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>291</Line><Position>21</Position><ShapeID>'fb8ad8f8-676a-4868-9022-c8fcddb79f82'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>294</Line><Position>25</Position><ShapeID>'7b6167d1-f050-4709-a6dd-fcdae03ebb9c'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>310</Line><Position>25</Position><ShapeID>'c31d348f-05f2-4f03-acb3-523553a312d7'</ShapeID>
<Messages>
	<MsgInfo><name>FaultMessage</name><part>Body</part><schema>Microsoft.Practices.ESB.ExceptionHandling.Schemas.Faults.FaultMessage</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>312</Line><Position>25</Position><ShapeID>'0b231a1a-c45c-4c27-aa03-65456980c583'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='bf6928de-9530-4b74-81cd-e23ecbb68b96' LowerBound='1.1' HigherBound='84.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='d98c2db2-70b0-4927-aab8-e10b88fdc4ea' ParentLink='Module_ServiceDeclaration' LowerBound='4.1' HigherBound='83.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RegisterBatchService' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='MessageDeclaration' OID='52a14e6d-5e89-4c4c-9eff-dccaa320094b' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='11.1' HigherBound='12.1'>
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='InboundMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='87ff6e05-998a-4e5d-b38e-13652c4360e2' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='45aa35f8-a8c7-42ce-a395-aa09054b3354' ParentLink='ServiceBody_Statement' LowerBound='14.1' HigherBound='16.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='DocumentProcessing' />
                    <om:Property Name='MessageName' Value='InboundMessage' />
                    <om:Property Name='OperationName' Value='XmlDocument' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive Msg' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DNFPredicate' OID='cb804cf0-35fa-4731-8ce0-91d3928c4ace' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName' />
                        <om:Property Name='RHS' Value='&quot;RegisterBatchService&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='e2c80518-c658-4878-9752-d259f87fe5a5' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState' />
                        <om:Property Name='RHS' Value='&quot;Pending&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='DNFPredicate' OID='4973f46e-abf1-4b15-835e-bc5774ebcfa7' ParentLink='Receive_DNFPredicate'>
                        <om:Property Name='LHS' Value='Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType' />
                        <om:Property Name='RHS' Value='&quot;Orchestration&quot;' />
                        <om:Property Name='Grouping' Value='AND' />
                        <om:Property Name='Operator' Value='Equals' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='f224571d-896b-4436-9855-4e902c5dde2f' ParentLink='ServiceBody_Statement' LowerBound='16.1' HigherBound='81.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Itinerary &amp; Resolution' />
                    <om:Property Name='Signal' Value='False' />
                    <om:Element Type='VariableAssignment' OID='b1ba8172-ddf4-4484-98af-fc2680d5cbd3' ParentLink='ComplexStatement_Statement' LowerBound='32.1' HigherBound='40.1'>
                        <om:Property Name='Expression' Value='// Retrieve the current itinerary step&#xD;&#xA;itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(InboundMessage);&#xD;&#xA;itineraryStep.ItineraryStep = itinerary.Itinerary.GetItineraryStep(InboundMessage);&#xD;&#xA;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceName: &quot; + itineraryStep.ItineraryStep.ServiceName);&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;ServiceType: &quot; + System.Convert.ToString(itineraryStep.ItineraryStep.ServiceType));&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;Itinerary: &quot; + itineraryStep.ItineraryStep.Itinerary.ToString());' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Current Itinerary' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='d21ce64d-2e77-42b7-b1f9-12bb583c7da4' ParentLink='ComplexStatement_Statement' LowerBound='40.1' HigherBound='43.1'>
                        <om:Property Name='Expression' Value='resolvers = itineraryStep.ItineraryStep.ResolverCollection;&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;    Resolver Collection Count: &quot; + System.Convert.ToString(resolvers.Count));' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Retrieve Resolvers' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Decision' OID='7aa63c97-cfb7-4068-a495-e3c25f6069fb' ParentLink='ComplexStatement_Statement' LowerBound='43.1' HigherBound='52.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Any resolvers?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='041fcd27-303a-47f3-a886-8138207eb530' ParentLink='ReallyComplexStatement_Branch' LowerBound='44.21' HigherBound='52.1'>
                            <om:Property Name='Expression' Value='resolvers.MoveNext()' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='YES' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='082b0fee-d1aa-46ce-aaa0-9e47d0b717f1' ParentLink='ComplexStatement_Statement' LowerBound='46.1' HigherBound='49.1'>
                                <om:Property Name='Expression' Value='resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(InboundMessage, resolvers.Current);&#xD;&#xA;mergeBatchSequenceRequest = (ESB.Extensions.Resolutions.sp_MergeBatchSequence) resolutionDictionary.GetValue(&quot;ESB.Extensions.Resolutions.sp_MergeBatchSequence&quot;);&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Resolve' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='Exec' OID='2d0caf78-1e95-45d3-b810-86e11846a581' ParentLink='ComplexStatement_Statement' LowerBound='49.1' HigherBound='51.1'>
                                <om:Property Name='Invokee' Value='ESB.Extensions.Services.RegisterBatch' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Start RegisterBatch' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Parameter' OID='48b3f7c4-39f4-49eb-ac7c-ce98a067d726' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='mergeBatchSequenceRequest' />
                                    <om:Property Name='Type' Value='ESB.Extensions.Resolutions.CompositeBatchInsert.Request' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='2e28a766-87ea-4d6b-b2c5-dfad51c19f13' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='b6e1e9cd-6c25-4fc1-a566-8b0dcd7eecef' ParentLink='Scope_VariableDeclaration' LowerBound='20.1' HigherBound='21.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='ESB.Extensions.Resolution.ResolutionDictionary' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolutionDictionary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='11975fbe-0572-41c7-977e-dbf1c4139b1d' ParentLink='Scope_VariableDeclaration' LowerBound='21.1' HigherBound='22.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.ResolverCollection' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='resolvers' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='5f998f2e-6597-428d-be2d-ad3db55ce1e1' ParentLink='Scope_VariableDeclaration' LowerBound='22.1' HigherBound='23.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='itinerary' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='b24dbc7e-f9a7-46ae-898c-d5b5118718bd' ParentLink='Scope_VariableDeclaration' LowerBound='23.1' HigherBound='24.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='itineraryStep' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableDeclaration' OID='9afe12aa-7555-4406-8acf-d38cace104d5' ParentLink='Scope_VariableDeclaration' LowerBound='24.1' HigherBound='25.1'>
                        <om:Property Name='UseDefaultConstructor' Value='True' />
                        <om:Property Name='Type' Value='ESB.Extensions.Resolutions.sp_MergeBatchSequence' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='mergeBatchSequenceRequest' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='MessageDeclaration' OID='580a306a-0498-4b6e-ba3b-1b18a77cfab8' ParentLink='Scope_MessageDeclaration' LowerBound='19.1' HigherBound='20.1'>
                        <om:Property Name='Type' Value='ESB.Extensions.Services.FaultMsgType' />
                        <om:Property Name='ParamDirection' Value='In' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='FaultMessage' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Catch' OID='fb8ad8f8-676a-4868-9022-c8fcddb79f82' ParentLink='Scope_Catch' LowerBound='55.1' HigherBound='79.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Routing Resolution Exceptions' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='7b6167d1-f050-4709-a6dd-fcdae03ebb9c' ParentLink='Catch_Statement' LowerBound='58.1' HigherBound='74.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Routing and Resolution Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='8c55a9e6-6482-4799-9c9f-1cfd6b6eb98c' ParentLink='Construct_MessageRef' LowerBound='59.35' HigherBound='59.47'>
                                <om:Property Name='Ref' Value='FaultMessage' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='1a5f7878-d648-4d17-9960-d52cfa523861' ParentLink='ComplexStatement_Statement' LowerBound='61.1' HigherBound='73.1'>
                                <om:Property Name='Expression' Value='FaultMessage = Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage();&#xD;&#xA;System.Diagnostics.Trace.WriteLine(&quot;&gt;&gt;&gt; Fault msg has been created&quot;);&#xD;&#xA;&#xD;&#xA;// Set Fault Message Properties&#xD;&#xA;FaultMessage.Body.FaultCode = &quot;2111&quot;;&#xD;&#xA;FaultMessage.Body.FaultDescription = &quot;Exception while attempting to work with Itinerary Step&quot;;&#xD;&#xA;FaultMessage.Body.FailureCategory = &quot;Routing Failure&quot;;&#xD;&#xA;FaultMessage.Body.FaultSeverity = Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical;&#xD;&#xA;&#xD;&#xA;// Add message&#xD;&#xA;Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(FaultMessage, InboundMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Routing and Resolutoin Fault Message' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='c31d348f-05f2-4f03-acb3-523553a312d7' ParentLink='Catch_Statement' LowerBound='74.1' HigherBound='76.1'>
                            <om:Property Name='PortName' Value='FaultProcessing' />
                            <om:Property Name='MessageName' Value='FaultMessage' />
                            <om:Property Name='OperationName' Value='PostFault' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Persist Fault Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='0b231a1a-c45c-4c27-aa03-65456980c583' ParentLink='Catch_Statement' LowerBound='76.1' HigherBound='78.1'>
                            <om:Property Name='ErrorMessage' Value='&quot;An unexpected faulure occured during Resolution process : &quot; + ex.Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='3aa0fa6a-729c-408c-aa1e-50454cac3b7f' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='7.1' HigherBound='9.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='2' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.XmlDocumentPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentProcessing' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='DirectBindingAttribute' OID='f7f483cb-f0b7-49ba-9916-a2ad79dccb46' ParentLink='PortDeclaration_CLRAttribute' LowerBound='7.1' HigherBound='8.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='e1113c23-3702-4f29-9616-2f1165919204' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='9.1' HigherBound='11.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='20' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.FaultProcessingType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FaultProcessing' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='50737f45-53cc-4135-abc6-d4b0a0cef107' ParentLink='PortDeclaration_CLRAttribute' LowerBound='9.1' HigherBound='10.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __RegisterBatchService_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __RegisterBatchService_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "RegisterBatchService")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                RegisterBatchService __svc__ = (RegisterBatchService)_service;
                __RegisterBatchService_root_0 __ctx0__ = (__RegisterBatchService_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.FaultProcessing != null)
                {
                    __svc__.FaultProcessing.Close(this, null);
                    __svc__.FaultProcessing = null;
                }
                if (__svc__.DocumentProcessing != null)
                {
                    __svc__.DocumentProcessing.Close(this, null);
                    __svc__.DocumentProcessing = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __RegisterBatchService_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __RegisterBatchService_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "RegisterBatchService")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                RegisterBatchService __svc__ = (RegisterBatchService)_service;
                __RegisterBatchService_1 __ctx1__ = (__RegisterBatchService_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("InboundMessage")]
            public __messagetype_System_Xml_XmlDocument __InboundMessage;
        }


        [System.SerializableAttribute]
        public class ____scope64_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope64_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope64")
            {
            }

            public override int Index { get { return 2; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[3];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                RegisterBatchService __svc__ = (RegisterBatchService)_service;
                ____scope64_2 __ctx2__ = (____scope64_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                if (__ctx2__ != null)
                    __ctx2__.__mergeBatchSequenceRequest = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("FaultMessage")]
            internal FaultMsgType __FaultMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolutionDictionary")]
            internal ESB.Extensions.Resolution.ResolutionDictionary __resolutionDictionary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("resolvers")]
            internal Microsoft.Practices.ESB.Itinerary.ResolverCollection __resolvers;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itinerary")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper __itinerary;
            [Microsoft.XLANGs.Core.UserVariableAttribute("itineraryStep")]
            internal Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper __itineraryStep;
            [Microsoft.XLANGs.Core.UserVariableAttribute("mergeBatchSequenceRequest")]
            internal ESB.Extensions.Resolutions.sp_MergeBatchSequence __mergeBatchSequenceRequest;
            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentProcessing")]
        internal XmlDocumentPortType DocumentProcessing;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("FaultProcessing")]
        internal FaultProcessingType FaultProcessing;
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceName();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceState();
        private static Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType _prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType = new Microsoft.Practices.ESB.Itinerary.Schemas.ServiceType();

        sealed private class PredicateSet0_0 : Microsoft.XLANGs.Core.PredicateGroup
        {
            public PredicateSet0_0() : base(3)
            {
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceName, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "RegisterBatchService"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceState, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Pending"));
                Add(new Microsoft.XLANGs.Core.FullySpecifiedPredicate(_prop_Microsoft_Practices_ESB_Itinerary_Schemas_ServiceType, Microsoft.XLANGs.Core.PredicateBase.Operators.eEqual, "Orchestration"));
            }
        }


        private static Microsoft.XLANGs.Core.PredicateGroup[] _predicates0 = {
            new PredicateSet0_0()
        };


        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {XmlDocumentPortType.XmlDocument},
                                               typeof(RegisterBatchService).GetField("DocumentProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(RegisterBatchService), "DocumentProcessing"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {FaultProcessingType.PostFault},
                                               typeof(RegisterBatchService).GetField("FaultProcessing", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(RegisterBatchService), "FaultProcessing"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(ESB.Extensions.Services.RegisterBatch)                    
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, _predicates0 , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "45aa35f8-a8c7-42ce-a395-aa09054b3354", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "45aa35f8-a8c7-42ce-a395-aa09054b3354", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "f224571d-896b-4436-9855-4e902c5dde2f", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "b1ba8172-ddf4-4484-98af-fc2680d5cbd3", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "b1ba8172-ddf4-4484-98af-fc2680d5cbd3", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "d21ce64d-2e77-42b7-b1f9-12bb583c7da4", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "d21ce64d-2e77-42b7-b1f9-12bb583c7da4", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "7aa63c97-cfb7-4068-a495-e3c25f6069fb", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "082b0fee-d1aa-46ce-aaa0-9e47d0b717f1", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "082b0fee-d1aa-46ce-aaa0-9e47d0b717f1", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "2d0caf78-1e95-45d3-b810-86e11846a581", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "2d0caf78-1e95-45d3-b810-86e11846a581", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "7aa63c97-cfb7-4068-a495-e3c25f6069fb", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "fb8ad8f8-676a-4868-9022-c8fcddb79f82", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "7b6167d1-f050-4709-a6dd-fcdae03ebb9c", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "7b6167d1-f050-4709-a6dd-fcdae03ebb9c", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "c31d348f-05f2-4f03-acb3-523553a312d7", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "c31d348f-05f2-4f03-acb3-523553a312d7", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "0b231a1a-c45c-4c27-aa03-65456980c583", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "fb8ad8f8-676a-4868-9022-c8fcddb79f82", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "f224571d-896b-4436-9855-4e902c5dde2f", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "00000000-0000-0000-0000-000000000000", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,24,24,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,3,3,3,23,24,24,24,24,};
        public static int[] __progressLocation2 = new int[] { 6,6,6,6,6,6,6,6,7,7,7,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,};
        public static int[] __progressLocation3 = new int[] { 16,16,17,17,18,19,19,19,20,21,21,22,22,};

        public static int[][] __progressLocations = new int[4] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __RegisterBatchService_root_0 __ctx0__ = (__RegisterBatchService_root_0)_stateMgrs[0];
            __RegisterBatchService_1 __ctx1__ = (__RegisterBatchService_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                DocumentProcessing = new XmlDocumentPortType(0, this);
                FaultProcessing = new FaultProcessingType(1, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], DocumentProcessing, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __RegisterBatchService_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __RegisterBatchService_root_0 __ctx0__ = (__RegisterBatchService_root_0)_stateMgrs[0];
            __RegisterBatchService_1 __ctx1__ = (__RegisterBatchService_1)_stateMgrs[1];
            ____scope64_2 __ctx2__ = (____scope64_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!DocumentProcessing.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__InboundMessage != null)
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                __ctx1__.__InboundMessage = new __messagetype_System_Xml_XmlDocument("InboundMessage", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__InboundMessage);
                DocumentProcessing.ReceiveMessage(0, __msgEnv__, __ctx1__.__InboundMessage, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (DocumentProcessing != null)
                {
                    DocumentProcessing.Close(__ctx1__, __seg__);
                    DocumentProcessing = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__InboundMessage);
                    __edata.PortName = @"DocumentProcessing";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx2__ = new ____scope64_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__InboundMessage != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__InboundMessage);
                    __ctx1__.__InboundMessage = null;
                }
                if (FaultProcessing != null)
                {
                    FaultProcessing.Close(__ctx1__, __seg__);
                    FaultProcessing = null;
                }
                Tracker.FireEvent(__eventLocations[23],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[15],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 12;
            case 12:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __RegisterBatchService_1 __ctx1__ = (__RegisterBatchService_1)_stateMgrs[1];
            ____scope64_2 __ctx2__ = (____scope64_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__resolutionDictionary = default(ESB.Extensions.Resolution.ResolutionDictionary);
                __ctx2__.__resolvers = default(Microsoft.Practices.ESB.Itinerary.ResolverCollection);
                __ctx2__.__itinerary = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper);
                __ctx2__.__itineraryStep = default(Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper);
                __ctx2__.__mergeBatchSequenceRequest = default(ESB.Extensions.Resolutions.sp_MergeBatchSequence);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__resolutionDictionary = new ESB.Extensions.Resolution.ResolutionDictionary();
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.__resolvers = new Microsoft.Practices.ESB.Itinerary.ResolverCollection();
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx2__.__itinerary = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx2__.__itineraryStep = new Microsoft.Practices.ESB.Itinerary.SerializableItineraryStepWrapper();
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx2__.__mergeBatchSequenceRequest = new ESB.Extensions.Resolutions.sp_MergeBatchSequence();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx2__.__itinerary.Itinerary = Microsoft.Practices.ESB.Itinerary.ItineraryOMFactory.Create(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx2__.__itineraryStep.ItineraryStep = __ctx2__.__itinerary.Itinerary.GetItineraryStep(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));
                if (__ctx2__ != null)
                    __ctx2__.__itinerary = null;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                System.Diagnostics.Trace.WriteLine("ServiceName: " + __ctx2__.__itineraryStep.ItineraryStep.ServiceName);
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                System.Diagnostics.Trace.WriteLine("ServiceType: " + System.Convert.ToString(__ctx2__.__itineraryStep.ItineraryStep.ServiceType));
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                System.Diagnostics.Trace.WriteLine("Itinerary: " + __ctx2__.__itineraryStep.ItineraryStep.Itinerary.ToString());
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __ctx2__.__resolvers = __ctx2__.__itineraryStep.ItineraryStep.ResolverCollection;
                if (__ctx2__ != null)
                    __ctx2__.__itineraryStep = null;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                System.Diagnostics.Trace.WriteLine("    Resolver Collection Count: " + System.Convert.ToString(__ctx2__.__resolvers.Count));
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                __condition__ = __ctx2__.__resolvers.MoveNext();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 27;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                __ctx2__.__resolutionDictionary = ESB.Extensions.Resolution.ResolutionManager.Resolve(CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage), __ctx2__.__resolvers.Current);
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                __ctx2__.__mergeBatchSequenceRequest = (ESB.Extensions.Resolutions.sp_MergeBatchSequence)__ctx2__.__resolutionDictionary.GetValue("ESB.Extensions.Resolutions.sp_MergeBatchSequence");
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx2__, typeof(ESB.Extensions.Services.RegisterBatch), new object[] {__ctx2__.__mergeBatchSequenceRequest});
                goto case 26;
            case 26:
                Tracker.FireEvent(__eventLocations[14],__eventData[7],_stateMgrs[2].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__mergeBatchSequenceRequest = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolvers = null;
                if (__ctx2__ != null)
                    __ctx2__.__resolutionDictionary = null;
                Tracker.FireEvent(__eventLocations[15],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 30;
            case 30:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __RegisterBatchService_root_0 __ctx0__ = (__RegisterBatchService_root_0)_stateMgrs[0];
            __RegisterBatchService_1 __ctx1__ = (__RegisterBatchService_1)_stateMgrs[1];
            ____scope64_2 __ctx2__ = (____scope64_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    FaultMsgType __FaultMessage = new FaultMsgType("FaultMessage", __ctx2__);

                    __FaultMessage = (FaultMsgType)UnwrapMessageFromUserCode(Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.CreateFaultMessage(), __ctx2__, __FaultMessage);
                    System.Diagnostics.Trace.WriteLine(">>> Fault msg has been created");
                    __FaultMessage.Body.SetDistinguishedField("FaultCode", "2111");
                    __FaultMessage.Body.SetDistinguishedField("FaultDescription", "Exception while attempting to work with Itinerary Step");
                    __FaultMessage.Body.SetDistinguishedField("FailureCategory", "Routing Failure");
                    __FaultMessage.Body.SetDistinguishedField("FaultSeverity", Microsoft.Practices.ESB.ExceptionHandling.FaultSeverity.Critical);
                    Microsoft.Practices.ESB.ExceptionHandling.ExceptionMgmt.AddMessage(CreateMessageWrapperForUserCode(__FaultMessage), CreateMessageWrapperForUserCode(__ctx1__.__InboundMessage));

                    if (__ctx2__.__FaultMessage != null)
                        __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = __FaultMessage;
                    __ctx2__.RefMessage(__ctx2__.__FaultMessage);
                }
                __ctx2__.__FaultMessage.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    Tracker.FireEvent(__eventLocations[18],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                FaultProcessing.SendMessage(0, __ctx2__.__FaultMessage, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx2__.__FaultMessage);
                    __edata.PortName = @"FaultProcessing";
                    Tracker.FireEvent(__eventLocations[20],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx2__ != null && __ctx2__.__FaultMessage != null)
                {
                    __ctx2__.UnrefMessage(__ctx2__.__FaultMessage);
                    __ctx2__.__FaultMessage = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[12],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                RequestTerminate(__ctx2__,"An unexpected faulure occured during Resolution process : " + __ctx2__.__ex_0.Message);
                __seg__.SegmentDone();
                if (__ctx2__ != null)
                    __ctx2__.__ex_0 = null;
                break;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[13],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 392 "C:\Users\bhavsard\Documents\GitHub\ESB.Extensions\ESB.Extensions\ESB.Extensions.Services\HandleBatchCompleteNotification.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "SqlNotificationPort", "SqlNotification", -1, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(ESB.Extensions.Services.SqlNotificationPortType),
            typeof(ESB.Extensions.Services.GetAllCompletedBatchesPortType)
        },
        new System.String[] {
            "SqlNotificationPort",
            "SelectBatchPort"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eLongRunning
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class HandleBatchCompleteNotification : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eHasRequestResponse
,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(HandleBatchCompleteNotification));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static HandleBatchCompleteNotification()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2)
            };

            _Locks = 1;
            _rootContext = new __HandleBatchCompleteNotification_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[3];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public HandleBatchCompleteNotification(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "HandleBatchCompleteNotification", tracker)
        {
            ConstructorHelper();
        }

        public HandleBatchCompleteNotification(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "HandleBatchCompleteNotification")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>2862c64f-c0f4-4f2e-bb9f-a35c28c59ab7</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>fd2bb67c-0344-48e1-91c2-4faeb7a34119</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive BatchCompleteNotificationMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>15267cff-6da5-4f78-a804-f5da00f6f32d</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Batch complete?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1c09625c-0399-4b93-8765-046712370670</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>YES</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>c2c6811a-ca5b-48ed-b56b-406d3a57bd3e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct GoMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>d8ca69ee-3214-4b4e-9c7b-81353216de66</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign SelectBatchMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>690e60c1-0ead-4baa-8eea-9f8ae612b3fe</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>e2c225ce-ddfe-4bcf-b759-f7fa77d457ac</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send SelectBatchRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>d0f33b16-9e68-4480-b10b-dbc74c584645</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive SelectBatchResponse</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>a9faa97d-5492-4c48-ba69-ff147b8bed62</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct GoListMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>b7b28716-2811-4bd3-9187-3ba5da7454f5</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>T_GetAllCompletedBatchesResponseMsg_GoMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>eaead336-9881-4dfc-a172-1c18e8660ca2</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>e0dae4d9-d87e-4611-9d70-0cdf14e12f72</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>4b5b3994-d197-44a1-9071-194e5e8ade91</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>1ab17f99-2be7-41ed-8f4f-7c1d7713d1ee</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Debatch and send</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>09992ef4-6eff-4f35-9365-4a52d6effe05</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>goEnumerator</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>fe87dd4f-1654-4421-b146-b89d7f99844d</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>goList</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>25d5ee17-9f8a-48a7-adac-2d18f7e2bd99</ShapeID>      <ParentLink>Scope_VariableDeclaration</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>AtomicTransactionShape</shapeType>      <ShapeID>f3f4033b-eab5-44a0-84bb-9b15d39cab06</ShapeID>      <ParentLink>Scope_Transaction</ParentLink>                <shapeText>Transaction_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>1d17622a-4a70-43ff-aecc-63732558a41f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>GetEnumerator</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>WhileShape</shapeType>      <ShapeID>f0d5fa5e-5c66-4366-bb36-9d81e340bf61</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loop GoMsgs</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>e550b7ca-1ab9-44f1-b655-3150baf50119</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ExecShape</shapeType>      <ShapeID>cb235ff6-66c0-4728-ae92-afab47642ec8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Start PublishGoMsg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>09e703b1-1b36-4b93-bbc9-e1a49198436a</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>go</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransactionAttributeShape</shapeType>      <ShapeID>f163465e-6451-48d2-9cbb-7cb3e20d9d5c</ShapeID>      <ParentLink>Statement_CLRAttribute</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>adba8614-a695-41f8-891b-ca3dacf29de0</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'HandleBatchCompleteNotification'</ActionName><IsAtomic>0</IsAtomic><Line>392</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>406</Line><Position>22</Position><ShapeID>'fd2bb67c-0344-48e1-91c2-4faeb7a34119'</ShapeID>
<Messages>
	<MsgInfo><name>BatchCompleteNotificationMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.WcfSql.Notification</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>409</Line><Position>13</Position><ShapeID>'15267cff-6da5-4f78-a804-f5da00f6f32d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>414</Line><Position>17</Position><ShapeID>'c2c6811a-ca5b-48ed-b56b-406d3a57bd3e'</ShapeID>
<Messages>
	<MsgInfo><name>GetAllCompletedBatchesRequestMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo+sp_GetAllCompletedBatches</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>422</Line><Position>17</Position><ShapeID>'e2c225ce-ddfe-4bcf-b759-f7fa77d457ac'</ShapeID>
<Messages>
	<MsgInfo><name>GetAllCompletedBatchesRequestMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo+sp_GetAllCompletedBatches</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>424</Line><Position>17</Position><ShapeID>'d0f33b16-9e68-4480-b10b-dbc74c584645'</ShapeID>
<Messages>
	<MsgInfo><name>GetAllCompletedBatchesResponseMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo+sp_GetAllCompletedBatchesResponse</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>426</Line><Position>17</Position><ShapeID>'a9faa97d-5492-4c48-ba69-ff147b8bed62'</ShapeID>
<Messages>
	<MsgInfo><name>GoListMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.GoList</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>GetAllCompletedBatchesResponseMsg</name><part>Body</part><schema>ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo+sp_GetAllCompletedBatchesResponse</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'Transaction_1'</ActionName><IsAtomic>1</IsAtomic><Line>433</Line><Position>17</Position><ShapeID>'1ab17f99-2be7-41ed-8f4f-7c1d7713d1ee'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>443</Line><Position>32</Position><ShapeID>'1d17622a-4a70-43ff-aecc-63732558a41f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>446</Line><Position>25</Position><ShapeID>'f0d5fa5e-5c66-4366-bb36-9d81e340bf61'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>449</Line><Position>32</Position><ShapeID>'e550b7ca-1ab9-44f1-b655-3150baf50119'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>451</Line><Position>71</Position><ShapeID>'cb235ff6-66c0-4728-ae92-afab47642ec8'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='4e2f23e0-9691-4f2d-a6b3-1083e25a278d' LowerBound='1.1' HigherBound='102.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='ESB.Extensions.Services' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='PortType' OID='f912234c-ca1d-43f4-9c8a-7185b8ad9955' ParentLink='Module_PortType' LowerBound='20.1' HigherBound='27.1'>
            <om:Property Name='Synchronous' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SqlNotificationPortType' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='OperationDeclaration' OID='e1acb453-63d8-4579-8326-9c70b00843eb' ParentLink='PortType_OperationDeclaration' LowerBound='22.1' HigherBound='26.1'>
                <om:Property Name='OperationType' Value='OneWay' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SqlNotification' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='eb40a052-1fcf-461f-a4b4-4277f2603e0c' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='24.13' HigherBound='24.30'>
                    <om:Property Name='Ref' Value='ESB.Extensions.Services.SqlNotificationMT' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='3e449975-141e-4874-b000-b7b102fe8a7e' ParentLink='Module_PortType' LowerBound='27.1' HigherBound='34.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='GetAllCompletedBatchesPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='da22b140-bf65-4ff8-a89b-3c1088b94c5a' ParentLink='PortType_OperationDeclaration' LowerBound='29.1' HigherBound='33.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GetAllCompletedBatches' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='17e58b26-f07c-4212-ae59-011d7239a54e' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='31.13' HigherBound='31.44'>
                    <om:Property Name='Ref' Value='ESB.Extensions.Services.GetAllCompletedBatchesRequestMT' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='MessageRef' OID='ce26f5c2-3072-4f7e-9554-2d086233fa23' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='31.46' HigherBound='31.78'>
                    <om:Property Name='Ref' Value='ESB.Extensions.Services.GetAllCompletedBatchesResponseMT' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='eb84f120-4b51-4612-8777-24abdb32c305' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SqlNotificationMT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='c1e75435-f9cc-4521-a725-1759d8c62292' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='ESB.Extensions.Schemas.WcfSql.Notification' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='b4526ec6-326f-48cf-913a-c06016d60722' ParentLink='Module_MessageType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='GetAllCompletedBatchesRequestMT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='e6807423-6b00-4347-97cf-5f6935c6fc03' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='ClassName' Value='ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatches' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='b5d88330-5b42-4ddc-b3a5-e1262e7f6f34' ParentLink='Module_MessageType' LowerBound='12.1' HigherBound='16.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='GetAllCompletedBatchesResponseMT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='6a8f31c8-ebb2-4254-81af-136196733c76' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='14.1' HigherBound='15.1'>
                <om:Property Name='ClassName' Value='ESB.Extensions.Schemas.EsbBatchDb.TypedProcedure_dbo.sp_GetAllCompletedBatchesResponse' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='c45476a8-f4d7-4fd9-8b26-33fa6a730054' ParentLink='Module_MessageType' LowerBound='16.1' HigherBound='20.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='GoListMT' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='001069d4-980a-4141-b75c-5dc697cca67c' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='18.1' HigherBound='19.1'>
                <om:Property Name='ClassName' Value='ESB.Extensions.Schemas.GoList' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Body' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='ServiceDeclaration' OID='2d44345c-eeb9-4b67-9545-7b681442e4e7' ParentLink='Module_ServiceDeclaration' LowerBound='34.1' HigherBound='101.1'>
            <om:Property Name='InitializedTransactionType' Value='True' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='HandleBatchCompleteNotification' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='d6836436-8406-4fc7-b80b-5e4105330b42' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='45.1' HigherBound='46.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='xDoc' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='LongRunningTransaction' OID='0936eb2a-db9a-444f-b4ea-ddf001b43205' ParentLink='ServiceDeclaration_Transaction' LowerBound='35.21' HigherBound='35.77'>
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TxMain' />
                <om:Property Name='Signal' Value='False' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='725b8d63-2b65-4ba1-9c04-549b157bd420' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='41.1' HigherBound='42.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.SqlNotificationMT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='BatchCompleteNotificationMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='9cb097c0-3a3d-4f36-a928-0190d2c45679' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='42.1' HigherBound='43.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.GetAllCompletedBatchesRequestMT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GetAllCompletedBatchesRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='ff5e2f09-1b14-4812-9029-46ce7df7a04e' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='43.1' HigherBound='44.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.GetAllCompletedBatchesResponseMT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GetAllCompletedBatchesResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='6fa58091-21ef-4a83-a54d-786fbe7a4845' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='44.1' HigherBound='45.1'>
                <om:Property Name='Type' Value='ESB.Extensions.Services.GoListMT' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GoListMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='2862c64f-c0f4-4f2e-bb9f-a35c28c59ab7' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='fd2bb67c-0344-48e1-91c2-4faeb7a34119' ParentLink='ServiceBody_Statement' LowerBound='48.1' HigherBound='51.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='SqlNotificationPort' />
                    <om:Property Name='MessageName' Value='BatchCompleteNotificationMsg' />
                    <om:Property Name='OperationName' Value='SqlNotification' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive BatchCompleteNotificationMsg' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Decision' OID='15267cff-6da5-4f78-a804-f5da00f6f32d' ParentLink='ServiceBody_Statement' LowerBound='51.1' HigherBound='99.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Batch complete?' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DecisionBranch' OID='1c09625c-0399-4b93-8765-046712370670' ParentLink='ReallyComplexStatement_Branch' LowerBound='52.13' HigherBound='99.1'>
                        <om:Property Name='Expression' Value='BatchCompleteNotificationMsg.Body.Info == &quot;Update&quot; &amp;&amp;&#xD;&#xA;BatchCompleteNotificationMsg.Body.Source == &quot;Data&quot; &amp;&amp;&#xD;&#xA;BatchCompleteNotificationMsg.Body.Type == &quot;Change&quot;&#xD;&#xA;' />
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='YES' />
                        <om:Property Name='Signal' Value='False' />
                        <om:Element Type='Construct' OID='c2c6811a-ca5b-48ed-b56b-406d3a57bd3e' ParentLink='ComplexStatement_Statement' LowerBound='56.1' HigherBound='64.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct GoMsg' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageAssignment' OID='d8ca69ee-3214-4b4e-9c7b-81353216de66' ParentLink='ComplexStatement_Statement' LowerBound='59.1' HigherBound='63.1'>
                                <om:Property Name='Expression' Value='xDoc = new System.Xml.XmlDocument();&#xD;&#xA;xDoc.LoadXml(&quot;&lt;ns0:sp_GetAllCompletedBatches xmlns:ns0=\&quot;http://schemas.microsoft.com/Sql/2008/05/TypedProcedures/dbo\&quot; /&gt;&quot;);&#xD;&#xA;GetAllCompletedBatchesRequestMsg.Body = xDoc;&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Assign SelectBatchMsg' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='690e60c1-0ead-4baa-8eea-9f8ae612b3fe' ParentLink='Construct_MessageRef' LowerBound='57.27' HigherBound='57.59'>
                                <om:Property Name='Ref' Value='GetAllCompletedBatchesRequestMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='e2c225ce-ddfe-4bcf-b759-f7fa77d457ac' ParentLink='ComplexStatement_Statement' LowerBound='64.1' HigherBound='66.1'>
                            <om:Property Name='PortName' Value='SelectBatchPort' />
                            <om:Property Name='MessageName' Value='GetAllCompletedBatchesRequestMsg' />
                            <om:Property Name='OperationName' Value='GetAllCompletedBatches' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Send SelectBatchRequestMsg' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Receive' OID='d0f33b16-9e68-4480-b10b-dbc74c584645' ParentLink='ComplexStatement_Statement' LowerBound='66.1' HigherBound='68.1'>
                            <om:Property Name='Activate' Value='False' />
                            <om:Property Name='PortName' Value='SelectBatchPort' />
                            <om:Property Name='MessageName' Value='GetAllCompletedBatchesResponseMsg' />
                            <om:Property Name='OperationName' Value='GetAllCompletedBatches' />
                            <om:Property Name='OperationMessageName' Value='Response' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Receive SelectBatchResponse' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Construct' OID='a9faa97d-5492-4c48-ba69-ff147b8bed62' ParentLink='ComplexStatement_Statement' LowerBound='68.1' HigherBound='74.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct GoListMsg' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='b7b28716-2811-4bd3-9187-3ba5da7454f5' ParentLink='ComplexStatement_Statement' LowerBound='71.1' HigherBound='73.1'>
                                <om:Property Name='ClassName' Value='ESB.Extensions.Services.T_GetAllCompletedBatchesResponseMsg_GoMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='T_GetAllCompletedBatchesResponseMsg_GoMsg' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessagePartRef' OID='eaead336-9881-4dfc-a172-1c18e8660ca2' ParentLink='Transform_InputMessagePartRef' LowerBound='72.117' HigherBound='72.155'>
                                    <om:Property Name='MessageRef' Value='GetAllCompletedBatchesResponseMsg' />
                                    <om:Property Name='PartRef' Value='Body' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_1' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='e0dae4d9-d87e-4611-9d70-0cdf14e12f72' ParentLink='Transform_OutputMessagePartRef' LowerBound='72.32' HigherBound='72.46'>
                                    <om:Property Name='MessageRef' Value='GoListMsg' />
                                    <om:Property Name='PartRef' Value='Body' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_2' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageRef' OID='4b5b3994-d197-44a1-9071-194e5e8ade91' ParentLink='Construct_MessageRef' LowerBound='69.27' HigherBound='69.36'>
                                <om:Property Name='Ref' Value='GoListMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Scope' OID='1ab17f99-2be7-41ed-8f4f-7c1d7713d1ee' ParentLink='ComplexStatement_Statement' LowerBound='74.1' HigherBound='98.1'>
                            <om:Property Name='InitializedTransactionType' Value='True' />
                            <om:Property Name='IsSynchronized' Value='False' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Debatch and send' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableDeclaration' OID='09992ef4-6eff-4f35-9365-4a52d6effe05' ParentLink='Scope_VariableDeclaration' LowerBound='78.1' HigherBound='79.1'>
                                <om:Property Name='UseDefaultConstructor' Value='False' />
                                <om:Property Name='Type' Value='ESB.Extensions.Resolutions.GoEnumerator' />
                                <om:Property Name='ParamDirection' Value='In' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='goEnumerator' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='VariableDeclaration' OID='fe87dd4f-1654-4421-b146-b89d7f99844d' ParentLink='Scope_VariableDeclaration' LowerBound='79.1' HigherBound='80.1'>
                                <om:Property Name='UseDefaultConstructor' Value='True' />
                                <om:Property Name='Type' Value='ESB.Extensions.Resolutions.GoList' />
                                <om:Property Name='ParamDirection' Value='In' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='goList' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='VariableDeclaration' OID='25d5ee17-9f8a-48a7-adac-2d18f7e2bd99' ParentLink='Scope_VariableDeclaration' LowerBound='80.1' HigherBound='81.1'>
                                <om:Property Name='UseDefaultConstructor' Value='True' />
                                <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                                <om:Property Name='ParamDirection' Value='In' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='go' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='AtomicTransaction' OID='f3f4033b-eab5-44a0-84bb-9b15d39cab06' ParentLink='Scope_Transaction' LowerBound='76.22' HigherBound='76.55'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Transaction_1' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='1d17622a-4a70-43ff-aecc-63732558a41f' ParentLink='ComplexStatement_Statement' LowerBound='85.1' HigherBound='88.1'>
                                <om:Property Name='Expression' Value='goList = GoListMsg.Body;&#xD;&#xA;goEnumerator = goList.GetGoEnumerator();' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='GetEnumerator' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='While' OID='f0d5fa5e-5c66-4366-bb36-9d81e340bf61' ParentLink='ComplexStatement_Statement' LowerBound='88.1' HigherBound='96.1'>
                                <om:Property Name='Expression' Value='(null != goEnumerator) &amp;&amp; goEnumerator.MoveNext()' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Loop GoMsgs' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='VariableAssignment' OID='e550b7ca-1ab9-44f1-b655-3150baf50119' ParentLink='ComplexStatement_Statement' LowerBound='91.1' HigherBound='93.1'>
                                    <om:Property Name='Expression' Value='go = goEnumerator.Current;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Assign go' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Exec' OID='cb235ff6-66c0-4728-ae92-afab47642ec8' ParentLink='ComplexStatement_Statement' LowerBound='93.1' HigherBound='95.1'>
                                    <om:Property Name='Invokee' Value='ESB.Extensions.Services.PublishGoMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Start PublishGoMsg' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='Parameter' OID='09e703b1-1b36-4b93-bbc9-e1a49198436a' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='go' />
                                        <om:Property Name='Type' Value='ESB.Extensions.Resolutions.Go' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='TransactionAttribute' OID='f163465e-6451-48d2-9cbb-7cb3e20d9d5c' ParentLink='Statement_CLRAttribute' LowerBound='75.1' HigherBound='76.1'>
                                <om:Property Name='Batch' Value='True' />
                                <om:Property Name='Retry' Value='True' />
                                <om:Property Name='Timeout' Value='60' />
                                <om:Property Name='Isolation' Value='Serializable' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='DecisionBranch' OID='adba8614-a695-41f8-891b-ca3dacf29de0' ParentLink='ReallyComplexStatement_Branch'>
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Else' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='bce450d7-7d70-4ad2-826d-7f46c33a3538' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='37.1' HigherBound='39.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.SqlNotificationPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SqlNotificationPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='97bdd8c4-a392-4bd9-a607-ee50a71d3f10' ParentLink='PortDeclaration_CLRAttribute' LowerBound='37.1' HigherBound='38.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='2443e646-be00-4dab-b03b-8deddbd54cac' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='39.1' HigherBound='41.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='ESB.Extensions.Services.GetAllCompletedBatchesPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SelectBatchPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='7b53c8f7-d655-4822-bd2a-668cea13d143' ParentLink='PortDeclaration_CLRAttribute' LowerBound='39.1' HigherBound='40.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __HandleBatchCompleteNotification_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __HandleBatchCompleteNotification_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "HandleBatchCompleteNotification")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                HandleBatchCompleteNotification __svc__ = (HandleBatchCompleteNotification)_service;
                __HandleBatchCompleteNotification_root_0 __ctx0__ = (__HandleBatchCompleteNotification_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.SelectBatchPort != null)
                {
                    __svc__.SelectBatchPort.Close(this, null);
                    __svc__.SelectBatchPort = null;
                }
                if (__svc__.SqlNotificationPort != null)
                {
                    __svc__.SqlNotificationPort.Close(this, null);
                    __svc__.SqlNotificationPort = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper1;
        }


        [System.SerializableAttribute]
        public class __HandleBatchCompleteNotification_1 : Microsoft.XLANGs.Core.LongRunningTransaction
        {
            public __HandleBatchCompleteNotification_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "HandleBatchCompleteNotification")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                HandleBatchCompleteNotification __svc__ = (HandleBatchCompleteNotification)_service;
                __HandleBatchCompleteNotification_1 __ctx1__ = (__HandleBatchCompleteNotification_1)(__svc__._stateMgrs[1]);
                __HandleBatchCompleteNotification_root_0 __ctx0__ = (__HandleBatchCompleteNotification_root_0)(__svc__._stateMgrs[0]);

                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                if (__ctx1__ != null && __ctx1__.__GoListMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GoListMsg);
                    __ctx1__.__GoListMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__xDoc = null;
                if (__ctx1__ != null && __ctx1__.__GetAllCompletedBatchesRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GetAllCompletedBatchesRequestMsg);
                    __ctx1__.__GetAllCompletedBatchesRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__BatchCompleteNotificationMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__BatchCompleteNotificationMsg);
                    __ctx1__.__BatchCompleteNotificationMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__GetAllCompletedBatchesResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GetAllCompletedBatchesResponseMsg);
                    __ctx1__.__GetAllCompletedBatchesResponseMsg = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("BatchCompleteNotificationMsg")]
            internal SqlNotificationMT __BatchCompleteNotificationMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("GetAllCompletedBatchesRequestMsg")]
            internal GetAllCompletedBatchesRequestMT __GetAllCompletedBatchesRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("GetAllCompletedBatchesResponseMsg")]
            internal GetAllCompletedBatchesResponseMT __GetAllCompletedBatchesResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("GoListMsg")]
            internal GoListMT __GoListMsg;  // lock index = 0
            [Microsoft.XLANGs.Core.UserVariableAttribute("xDoc")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __xDoc;
        }


        [System.SerializableAttribute]
        public class __Transaction_1_2 : Microsoft.XLANGs.Core.AtomicTransaction
        {
            public __Transaction_1_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "Transaction_1")
            {
                Retry = true;
                Batch = true;
                Timeout = 60;
                TranIsolationLevel = System.Data.IsolationLevel.Serializable;
            }

            public override int Index { get { return 2; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                HandleBatchCompleteNotification __svc__ = (HandleBatchCompleteNotification)_service;
                __Transaction_1_2 __ctx2__ = (__Transaction_1_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null)
                    __ctx2__.__goEnumerator = null;
                if (__ctx2__ != null)
                    __ctx2__.__goList = null;
                if (__ctx2__ != null)
                    __ctx2__.__go = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("goEnumerator")]
            internal ESB.Extensions.Resolutions.GoEnumerator __goEnumerator;
            [Microsoft.XLANGs.Core.UserVariableAttribute("goList")]
            internal ESB.Extensions.Resolutions.GoList __goList;
            [Microsoft.XLANGs.Core.UserVariableAttribute("go")]
            internal ESB.Extensions.Resolutions.Go __go;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("SqlNotificationPort")]
        internal SqlNotificationPortType SqlNotificationPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("SelectBatchPort")]
        internal GetAllCompletedBatchesPortType SelectBatchPort;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {SqlNotificationPortType.SqlNotification},
                                               typeof(HandleBatchCompleteNotification).GetField("SqlNotificationPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(HandleBatchCompleteNotification), "SqlNotificationPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {GetAllCompletedBatchesPortType.GetAllCompletedBatches},
                                               typeof(HandleBatchCompleteNotification).GetField("SelectBatchPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(HandleBatchCompleteNotification), "SelectBatchPort"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(ESB.Extensions.Services.PublishGoMsg)                    
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, null , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "fd2bb67c-0344-48e1-91c2-4faeb7a34119", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "fd2bb67c-0344-48e1-91c2-4faeb7a34119", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "15267cff-6da5-4f78-a804-f5da00f6f32d", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "c2c6811a-ca5b-48ed-b56b-406d3a57bd3e", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "c2c6811a-ca5b-48ed-b56b-406d3a57bd3e", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "e2c225ce-ddfe-4bcf-b759-f7fa77d457ac", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "e2c225ce-ddfe-4bcf-b759-f7fa77d457ac", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "d0f33b16-9e68-4480-b10b-dbc74c584645", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "d0f33b16-9e68-4480-b10b-dbc74c584645", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "a9faa97d-5492-4c48-ba69-ff147b8bed62", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "a9faa97d-5492-4c48-ba69-ff147b8bed62", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "1ab17f99-2be7-41ed-8f4f-7c1d7713d1ee", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "1d17622a-4a70-43ff-aecc-63732558a41f", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "1d17622a-4a70-43ff-aecc-63732558a41f", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "f0d5fa5e-5c66-4366-bb36-9d81e340bf61", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "e550b7ca-1ab9-44f1-b655-3150baf50119", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "e550b7ca-1ab9-44f1-b655-3150baf50119", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "cb235ff6-66c0-4728-ae92-afab47642ec8", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "cb235ff6-66c0-4728-ae92-afab47642ec8", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "f0d5fa5e-5c66-4366-bb36-9d81e340bf61", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "1ab17f99-2be7-41ed-8f4f-7c1d7713d1ee", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "15267cff-6da5-4f78-a804-f5da00f6f32d", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Exec),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,3,3,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,2,4,4,5,5,6,7,7,7,8,9,9,10,11,11,12,13,13,13,24,25,3,3,3,3,};
        public static int[] __progressLocation2 = new int[] { 16,16,16,16,16,16,17,17,18,18,18,19,19,20,21,21,22,22,23,23,23,23,23,23,};

        public static int[][] __progressLocations = new int[3] [] {__progressLocation0,__progressLocation1,__progressLocation2};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __HandleBatchCompleteNotification_1 __ctx1__ = (__HandleBatchCompleteNotification_1)_stateMgrs[1];
            __HandleBatchCompleteNotification_root_0 __ctx0__ = (__HandleBatchCompleteNotification_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                SqlNotificationPort = new SqlNotificationPortType(0, this);
                SelectBatchPort = new GetAllCompletedBatchesPortType(1, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], SqlNotificationPort, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __HandleBatchCompleteNotification_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __HandleBatchCompleteNotification_1 __ctx1__ = (__HandleBatchCompleteNotification_1)_stateMgrs[1];
            __HandleBatchCompleteNotification_root_0 __ctx0__ = (__HandleBatchCompleteNotification_root_0)_stateMgrs[0];
            __Transaction_1_2 __ctx2__ = (__Transaction_1_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__xDoc = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!SqlNotificationPort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__BatchCompleteNotificationMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__BatchCompleteNotificationMsg);
                __ctx1__.__BatchCompleteNotificationMsg = new SqlNotificationMT("BatchCompleteNotificationMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__BatchCompleteNotificationMsg);
                SqlNotificationPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__BatchCompleteNotificationMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (SqlNotificationPort != null)
                {
                    SqlNotificationPort.Close(__ctx1__, __seg__);
                    SqlNotificationPort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__BatchCompleteNotificationMsg);
                    __edata.PortName = @"SqlNotificationPort";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__xDoc.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __condition__ = (System.String)__ctx1__.__BatchCompleteNotificationMsg.Body.GetDistinguishedField("Info") == "Update" && (System.String)__ctx1__.__BatchCompleteNotificationMsg.Body.GetDistinguishedField("Source") == "Data" && (System.String)__ctx1__.__BatchCompleteNotificationMsg.Body.GetDistinguishedField("Type") == "Change";
                if (__ctx1__ != null && __ctx1__.__BatchCompleteNotificationMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__BatchCompleteNotificationMsg);
                    __ctx1__.__BatchCompleteNotificationMsg = null;
                }
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 25;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                {
                    GetAllCompletedBatchesRequestMT __GetAllCompletedBatchesRequestMsg = new GetAllCompletedBatchesRequestMT("GetAllCompletedBatchesRequestMsg", __ctx1__);

                    __ctx1__.__xDoc.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__xDoc.UnderlyingXmlDocument.LoadXml("<ns0:sp_GetAllCompletedBatches xmlns:ns0=\"http://schemas.microsoft.com/Sql/2008/05/TypedProcedures/dbo\" />");
                    __GetAllCompletedBatchesRequestMsg.Body.LoadFrom((System.Xml.XmlDocument)__ctx1__.__xDoc.UnderlyingXmlDocument);

                    if (__ctx1__.__GetAllCompletedBatchesRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__GetAllCompletedBatchesRequestMsg);
                    __ctx1__.__GetAllCompletedBatchesRequestMsg = __GetAllCompletedBatchesRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__GetAllCompletedBatchesRequestMsg);
                }
                __ctx1__.__GetAllCompletedBatchesRequestMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__GetAllCompletedBatchesRequestMsg);
                    Tracker.FireEvent(__eventLocations[6],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[7],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                SelectBatchPort.SendMessage(0, __ctx1__.__GetAllCompletedBatchesRequestMsg, null, null, out __ctx0__.__subWrapper1, __ctx1__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__GetAllCompletedBatchesRequestMsg);
                    __edata.PortName = @"SelectBatchPort";
                    Tracker.FireEvent(__eventLocations[8],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__GetAllCompletedBatchesRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GetAllCompletedBatchesRequestMsg);
                    __ctx1__.__GetAllCompletedBatchesRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if (!SelectBatchPort.GetMessageId(__ctx0__.__subWrapper1.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[0]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                if (__ctx1__.__GetAllCompletedBatchesResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__GetAllCompletedBatchesResponseMsg);
                __ctx1__.__GetAllCompletedBatchesResponseMsg = new GetAllCompletedBatchesResponseMT("GetAllCompletedBatchesResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__GetAllCompletedBatchesResponseMsg);
                SelectBatchPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__GetAllCompletedBatchesResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__GetAllCompletedBatchesResponseMsg);
                    __edata.PortName = @"SelectBatchPort";
                    Tracker.FireEvent(__eventLocations[10],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                {
                    GoListMT __GoListMsg = new GoListMT("GoListMsg", __ctx1__);

                    ApplyTransform(typeof(ESB.Extensions.Services.T_GetAllCompletedBatchesResponseMsg_GoMsg), new object[] {__GoListMsg.Body}, new object[] {__ctx1__.__GetAllCompletedBatchesResponseMsg.Body});

                    if (__ctx1__.__GoListMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__GoListMsg);
                    __ctx1__.__GoListMsg = __GoListMsg;
                    __ctx1__.RefMessage(__ctx1__.__GoListMsg);
                }
                __ctx1__.__GoListMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__GoListMsg);
                    __edata.Messages.Add(__ctx1__.__GetAllCompletedBatchesResponseMsg);
                    Tracker.FireEvent(__eventLocations[12],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__GetAllCompletedBatchesResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GetAllCompletedBatchesResponseMsg);
                    __ctx1__.__GetAllCompletedBatchesResponseMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                __ctx2__ = new __Transaction_1_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__GoListMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__GoListMsg);
                    __ctx1__.__GoListMsg = null;
                }
                Tracker.FireEvent(__eventLocations[24],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__xDoc = null;
                if (SelectBatchPort != null)
                {
                    SelectBatchPort.Close(__ctx1__, __seg__);
                    SelectBatchPort = null;
                }
                Tracker.FireEvent(__eventLocations[25],__eventData[15],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                if ( !PreProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[16],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 27;
            case 27:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 29;
            case 29:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __HandleBatchCompleteNotification_1 __ctx1__ = (__HandleBatchCompleteNotification_1)_stateMgrs[1];
            __Transaction_1_2 __ctx2__ = (__Transaction_1_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx2__.__goEnumerator = default(ESB.Extensions.Resolutions.GoEnumerator);
                __ctx2__.__goList = default(ESB.Extensions.Resolutions.GoList);
                __ctx2__.__go = default(ESB.Extensions.Resolutions.Go);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx2__.__goList = new ESB.Extensions.Resolutions.GoList();
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.__go = new ESB.Extensions.Resolutions.Go();
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if (__ctx2__.LockRead(0, _segments[2]) == false)  // __HandleBatchCompleteNotification_1.__GoListMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx2__.__goList = (ESB.Extensions.Resolutions.GoList)__ctx1__.__GoListMsg.Body.RetrieveAs(typeof(ESB.Extensions.Resolutions.GoList));
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx2__.__goEnumerator = __ctx2__.__goList.GetGoEnumerator();
                if (__ctx2__ != null)
                    __ctx2__.__goList = null;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __condition__ = (null != __ctx2__.__goEnumerator) && __ctx2__.__goEnumerator.MoveNext();
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 20;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx2__.__go = __ctx2__.__goEnumerator.Current;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ExecService(__ctx2__, typeof(ESB.Extensions.Services.PublishGoMsg), new object[] {__ctx2__.__go});
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[23],__eventData[12],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__go = null;
                if (__ctx2__ != null)
                    __ctx2__.__goEnumerator = null;
                Tracker.FireEvent(__eventLocations[23],__eventData[13],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 23;
            case 23:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{65703BB2-2D96-41D9-BC19-5E8D5B0D22F8}"))
        };

    }

    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed public class _MODULE_PROXY_ { }
}
